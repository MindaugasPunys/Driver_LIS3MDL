
STM32_L053C8_MCU_TEST_LIS3MDL_IT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003630  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  080036f0  080036f0  000136f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800370c  0800370c  00020050  2**0
                  CONTENTS
  4 .ARM          00000008  0800370c  0800370c  0001370c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003714  08003714  00020050  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003714  08003714  00013714  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003718  08003718  00013718  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000050  20000000  0800371c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000050  0800376c  00020050  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  0800376c  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b180  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001cc5  00000000  00000000  0002b1f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b40  00000000  00000000  0002cec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a58  00000000  00000000  0002da00  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00013e58  00000000  00000000  0002e458  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bcc6  00000000  00000000  000422b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007b649  00000000  00000000  0004df76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c95bf  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000280c  00000000  00000000  000c9610  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000050 	.word	0x20000050
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036d8 	.word	0x080036d8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000054 	.word	0x20000054
 8000104:	080036d8 	.word	0x080036d8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_uldivmod>:
 8000220:	2b00      	cmp	r3, #0
 8000222:	d111      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000224:	2a00      	cmp	r2, #0
 8000226:	d10f      	bne.n	8000248 <__aeabi_uldivmod+0x28>
 8000228:	2900      	cmp	r1, #0
 800022a:	d100      	bne.n	800022e <__aeabi_uldivmod+0xe>
 800022c:	2800      	cmp	r0, #0
 800022e:	d002      	beq.n	8000236 <__aeabi_uldivmod+0x16>
 8000230:	2100      	movs	r1, #0
 8000232:	43c9      	mvns	r1, r1
 8000234:	0008      	movs	r0, r1
 8000236:	b407      	push	{r0, r1, r2}
 8000238:	4802      	ldr	r0, [pc, #8]	; (8000244 <__aeabi_uldivmod+0x24>)
 800023a:	a102      	add	r1, pc, #8	; (adr r1, 8000244 <__aeabi_uldivmod+0x24>)
 800023c:	1840      	adds	r0, r0, r1
 800023e:	9002      	str	r0, [sp, #8]
 8000240:	bd03      	pop	{r0, r1, pc}
 8000242:	46c0      	nop			; (mov r8, r8)
 8000244:	ffffffd9 	.word	0xffffffd9
 8000248:	b403      	push	{r0, r1}
 800024a:	4668      	mov	r0, sp
 800024c:	b501      	push	{r0, lr}
 800024e:	9802      	ldr	r0, [sp, #8]
 8000250:	f000 f834 	bl	80002bc <__udivmoddi4>
 8000254:	9b01      	ldr	r3, [sp, #4]
 8000256:	469e      	mov	lr, r3
 8000258:	b002      	add	sp, #8
 800025a:	bc0c      	pop	{r2, r3}
 800025c:	4770      	bx	lr
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_lmul>:
 8000260:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000262:	46ce      	mov	lr, r9
 8000264:	4647      	mov	r7, r8
 8000266:	b580      	push	{r7, lr}
 8000268:	0007      	movs	r7, r0
 800026a:	4699      	mov	r9, r3
 800026c:	0c3b      	lsrs	r3, r7, #16
 800026e:	469c      	mov	ip, r3
 8000270:	0413      	lsls	r3, r2, #16
 8000272:	0c1b      	lsrs	r3, r3, #16
 8000274:	001d      	movs	r5, r3
 8000276:	000e      	movs	r6, r1
 8000278:	4661      	mov	r1, ip
 800027a:	0400      	lsls	r0, r0, #16
 800027c:	0c14      	lsrs	r4, r2, #16
 800027e:	0c00      	lsrs	r0, r0, #16
 8000280:	4345      	muls	r5, r0
 8000282:	434b      	muls	r3, r1
 8000284:	4360      	muls	r0, r4
 8000286:	4361      	muls	r1, r4
 8000288:	18c0      	adds	r0, r0, r3
 800028a:	0c2c      	lsrs	r4, r5, #16
 800028c:	1820      	adds	r0, r4, r0
 800028e:	468c      	mov	ip, r1
 8000290:	4283      	cmp	r3, r0
 8000292:	d903      	bls.n	800029c <__aeabi_lmul+0x3c>
 8000294:	2380      	movs	r3, #128	; 0x80
 8000296:	025b      	lsls	r3, r3, #9
 8000298:	4698      	mov	r8, r3
 800029a:	44c4      	add	ip, r8
 800029c:	4649      	mov	r1, r9
 800029e:	4379      	muls	r1, r7
 80002a0:	4372      	muls	r2, r6
 80002a2:	0c03      	lsrs	r3, r0, #16
 80002a4:	4463      	add	r3, ip
 80002a6:	042d      	lsls	r5, r5, #16
 80002a8:	0c2d      	lsrs	r5, r5, #16
 80002aa:	18c9      	adds	r1, r1, r3
 80002ac:	0400      	lsls	r0, r0, #16
 80002ae:	1940      	adds	r0, r0, r5
 80002b0:	1889      	adds	r1, r1, r2
 80002b2:	bcc0      	pop	{r6, r7}
 80002b4:	46b9      	mov	r9, r7
 80002b6:	46b0      	mov	r8, r6
 80002b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002ba:	46c0      	nop			; (mov r8, r8)

080002bc <__udivmoddi4>:
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	4657      	mov	r7, sl
 80002c0:	464e      	mov	r6, r9
 80002c2:	4645      	mov	r5, r8
 80002c4:	46de      	mov	lr, fp
 80002c6:	b5e0      	push	{r5, r6, r7, lr}
 80002c8:	0004      	movs	r4, r0
 80002ca:	000d      	movs	r5, r1
 80002cc:	4692      	mov	sl, r2
 80002ce:	4699      	mov	r9, r3
 80002d0:	b083      	sub	sp, #12
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d830      	bhi.n	8000338 <__udivmoddi4+0x7c>
 80002d6:	d02d      	beq.n	8000334 <__udivmoddi4+0x78>
 80002d8:	4649      	mov	r1, r9
 80002da:	4650      	mov	r0, sl
 80002dc:	f000 f8ba 	bl	8000454 <__clzdi2>
 80002e0:	0029      	movs	r1, r5
 80002e2:	0006      	movs	r6, r0
 80002e4:	0020      	movs	r0, r4
 80002e6:	f000 f8b5 	bl	8000454 <__clzdi2>
 80002ea:	1a33      	subs	r3, r6, r0
 80002ec:	4698      	mov	r8, r3
 80002ee:	3b20      	subs	r3, #32
 80002f0:	469b      	mov	fp, r3
 80002f2:	d433      	bmi.n	800035c <__udivmoddi4+0xa0>
 80002f4:	465a      	mov	r2, fp
 80002f6:	4653      	mov	r3, sl
 80002f8:	4093      	lsls	r3, r2
 80002fa:	4642      	mov	r2, r8
 80002fc:	001f      	movs	r7, r3
 80002fe:	4653      	mov	r3, sl
 8000300:	4093      	lsls	r3, r2
 8000302:	001e      	movs	r6, r3
 8000304:	42af      	cmp	r7, r5
 8000306:	d83a      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000308:	42af      	cmp	r7, r5
 800030a:	d100      	bne.n	800030e <__udivmoddi4+0x52>
 800030c:	e078      	b.n	8000400 <__udivmoddi4+0x144>
 800030e:	465b      	mov	r3, fp
 8000310:	1ba4      	subs	r4, r4, r6
 8000312:	41bd      	sbcs	r5, r7
 8000314:	2b00      	cmp	r3, #0
 8000316:	da00      	bge.n	800031a <__udivmoddi4+0x5e>
 8000318:	e075      	b.n	8000406 <__udivmoddi4+0x14a>
 800031a:	2200      	movs	r2, #0
 800031c:	2300      	movs	r3, #0
 800031e:	9200      	str	r2, [sp, #0]
 8000320:	9301      	str	r3, [sp, #4]
 8000322:	2301      	movs	r3, #1
 8000324:	465a      	mov	r2, fp
 8000326:	4093      	lsls	r3, r2
 8000328:	9301      	str	r3, [sp, #4]
 800032a:	2301      	movs	r3, #1
 800032c:	4642      	mov	r2, r8
 800032e:	4093      	lsls	r3, r2
 8000330:	9300      	str	r3, [sp, #0]
 8000332:	e028      	b.n	8000386 <__udivmoddi4+0xca>
 8000334:	4282      	cmp	r2, r0
 8000336:	d9cf      	bls.n	80002d8 <__udivmoddi4+0x1c>
 8000338:	2200      	movs	r2, #0
 800033a:	2300      	movs	r3, #0
 800033c:	9200      	str	r2, [sp, #0]
 800033e:	9301      	str	r3, [sp, #4]
 8000340:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <__udivmoddi4+0x8e>
 8000346:	601c      	str	r4, [r3, #0]
 8000348:	605d      	str	r5, [r3, #4]
 800034a:	9800      	ldr	r0, [sp, #0]
 800034c:	9901      	ldr	r1, [sp, #4]
 800034e:	b003      	add	sp, #12
 8000350:	bcf0      	pop	{r4, r5, r6, r7}
 8000352:	46bb      	mov	fp, r7
 8000354:	46b2      	mov	sl, r6
 8000356:	46a9      	mov	r9, r5
 8000358:	46a0      	mov	r8, r4
 800035a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800035c:	4642      	mov	r2, r8
 800035e:	2320      	movs	r3, #32
 8000360:	1a9b      	subs	r3, r3, r2
 8000362:	4652      	mov	r2, sl
 8000364:	40da      	lsrs	r2, r3
 8000366:	4641      	mov	r1, r8
 8000368:	0013      	movs	r3, r2
 800036a:	464a      	mov	r2, r9
 800036c:	408a      	lsls	r2, r1
 800036e:	0017      	movs	r7, r2
 8000370:	4642      	mov	r2, r8
 8000372:	431f      	orrs	r7, r3
 8000374:	4653      	mov	r3, sl
 8000376:	4093      	lsls	r3, r2
 8000378:	001e      	movs	r6, r3
 800037a:	42af      	cmp	r7, r5
 800037c:	d9c4      	bls.n	8000308 <__udivmoddi4+0x4c>
 800037e:	2200      	movs	r2, #0
 8000380:	2300      	movs	r3, #0
 8000382:	9200      	str	r2, [sp, #0]
 8000384:	9301      	str	r3, [sp, #4]
 8000386:	4643      	mov	r3, r8
 8000388:	2b00      	cmp	r3, #0
 800038a:	d0d9      	beq.n	8000340 <__udivmoddi4+0x84>
 800038c:	07fb      	lsls	r3, r7, #31
 800038e:	0872      	lsrs	r2, r6, #1
 8000390:	431a      	orrs	r2, r3
 8000392:	4646      	mov	r6, r8
 8000394:	087b      	lsrs	r3, r7, #1
 8000396:	e00e      	b.n	80003b6 <__udivmoddi4+0xfa>
 8000398:	42ab      	cmp	r3, r5
 800039a:	d101      	bne.n	80003a0 <__udivmoddi4+0xe4>
 800039c:	42a2      	cmp	r2, r4
 800039e:	d80c      	bhi.n	80003ba <__udivmoddi4+0xfe>
 80003a0:	1aa4      	subs	r4, r4, r2
 80003a2:	419d      	sbcs	r5, r3
 80003a4:	2001      	movs	r0, #1
 80003a6:	1924      	adds	r4, r4, r4
 80003a8:	416d      	adcs	r5, r5
 80003aa:	2100      	movs	r1, #0
 80003ac:	3e01      	subs	r6, #1
 80003ae:	1824      	adds	r4, r4, r0
 80003b0:	414d      	adcs	r5, r1
 80003b2:	2e00      	cmp	r6, #0
 80003b4:	d006      	beq.n	80003c4 <__udivmoddi4+0x108>
 80003b6:	42ab      	cmp	r3, r5
 80003b8:	d9ee      	bls.n	8000398 <__udivmoddi4+0xdc>
 80003ba:	3e01      	subs	r6, #1
 80003bc:	1924      	adds	r4, r4, r4
 80003be:	416d      	adcs	r5, r5
 80003c0:	2e00      	cmp	r6, #0
 80003c2:	d1f8      	bne.n	80003b6 <__udivmoddi4+0xfa>
 80003c4:	9800      	ldr	r0, [sp, #0]
 80003c6:	9901      	ldr	r1, [sp, #4]
 80003c8:	465b      	mov	r3, fp
 80003ca:	1900      	adds	r0, r0, r4
 80003cc:	4169      	adcs	r1, r5
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	db24      	blt.n	800041c <__udivmoddi4+0x160>
 80003d2:	002b      	movs	r3, r5
 80003d4:	465a      	mov	r2, fp
 80003d6:	4644      	mov	r4, r8
 80003d8:	40d3      	lsrs	r3, r2
 80003da:	002a      	movs	r2, r5
 80003dc:	40e2      	lsrs	r2, r4
 80003de:	001c      	movs	r4, r3
 80003e0:	465b      	mov	r3, fp
 80003e2:	0015      	movs	r5, r2
 80003e4:	2b00      	cmp	r3, #0
 80003e6:	db2a      	blt.n	800043e <__udivmoddi4+0x182>
 80003e8:	0026      	movs	r6, r4
 80003ea:	409e      	lsls	r6, r3
 80003ec:	0033      	movs	r3, r6
 80003ee:	0026      	movs	r6, r4
 80003f0:	4647      	mov	r7, r8
 80003f2:	40be      	lsls	r6, r7
 80003f4:	0032      	movs	r2, r6
 80003f6:	1a80      	subs	r0, r0, r2
 80003f8:	4199      	sbcs	r1, r3
 80003fa:	9000      	str	r0, [sp, #0]
 80003fc:	9101      	str	r1, [sp, #4]
 80003fe:	e79f      	b.n	8000340 <__udivmoddi4+0x84>
 8000400:	42a3      	cmp	r3, r4
 8000402:	d8bc      	bhi.n	800037e <__udivmoddi4+0xc2>
 8000404:	e783      	b.n	800030e <__udivmoddi4+0x52>
 8000406:	4642      	mov	r2, r8
 8000408:	2320      	movs	r3, #32
 800040a:	2100      	movs	r1, #0
 800040c:	1a9b      	subs	r3, r3, r2
 800040e:	2200      	movs	r2, #0
 8000410:	9100      	str	r1, [sp, #0]
 8000412:	9201      	str	r2, [sp, #4]
 8000414:	2201      	movs	r2, #1
 8000416:	40da      	lsrs	r2, r3
 8000418:	9201      	str	r2, [sp, #4]
 800041a:	e786      	b.n	800032a <__udivmoddi4+0x6e>
 800041c:	4642      	mov	r2, r8
 800041e:	2320      	movs	r3, #32
 8000420:	1a9b      	subs	r3, r3, r2
 8000422:	002a      	movs	r2, r5
 8000424:	4646      	mov	r6, r8
 8000426:	409a      	lsls	r2, r3
 8000428:	0023      	movs	r3, r4
 800042a:	40f3      	lsrs	r3, r6
 800042c:	4644      	mov	r4, r8
 800042e:	4313      	orrs	r3, r2
 8000430:	002a      	movs	r2, r5
 8000432:	40e2      	lsrs	r2, r4
 8000434:	001c      	movs	r4, r3
 8000436:	465b      	mov	r3, fp
 8000438:	0015      	movs	r5, r2
 800043a:	2b00      	cmp	r3, #0
 800043c:	dad4      	bge.n	80003e8 <__udivmoddi4+0x12c>
 800043e:	4642      	mov	r2, r8
 8000440:	002f      	movs	r7, r5
 8000442:	2320      	movs	r3, #32
 8000444:	0026      	movs	r6, r4
 8000446:	4097      	lsls	r7, r2
 8000448:	1a9b      	subs	r3, r3, r2
 800044a:	40de      	lsrs	r6, r3
 800044c:	003b      	movs	r3, r7
 800044e:	4333      	orrs	r3, r6
 8000450:	e7cd      	b.n	80003ee <__udivmoddi4+0x132>
 8000452:	46c0      	nop			; (mov r8, r8)

08000454 <__clzdi2>:
 8000454:	b510      	push	{r4, lr}
 8000456:	2900      	cmp	r1, #0
 8000458:	d103      	bne.n	8000462 <__clzdi2+0xe>
 800045a:	f000 f807 	bl	800046c <__clzsi2>
 800045e:	3020      	adds	r0, #32
 8000460:	e002      	b.n	8000468 <__clzdi2+0x14>
 8000462:	0008      	movs	r0, r1
 8000464:	f000 f802 	bl	800046c <__clzsi2>
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__clzsi2>:
 800046c:	211c      	movs	r1, #28
 800046e:	2301      	movs	r3, #1
 8000470:	041b      	lsls	r3, r3, #16
 8000472:	4298      	cmp	r0, r3
 8000474:	d301      	bcc.n	800047a <__clzsi2+0xe>
 8000476:	0c00      	lsrs	r0, r0, #16
 8000478:	3910      	subs	r1, #16
 800047a:	0a1b      	lsrs	r3, r3, #8
 800047c:	4298      	cmp	r0, r3
 800047e:	d301      	bcc.n	8000484 <__clzsi2+0x18>
 8000480:	0a00      	lsrs	r0, r0, #8
 8000482:	3908      	subs	r1, #8
 8000484:	091b      	lsrs	r3, r3, #4
 8000486:	4298      	cmp	r0, r3
 8000488:	d301      	bcc.n	800048e <__clzsi2+0x22>
 800048a:	0900      	lsrs	r0, r0, #4
 800048c:	3904      	subs	r1, #4
 800048e:	a202      	add	r2, pc, #8	; (adr r2, 8000498 <__clzsi2+0x2c>)
 8000490:	5c10      	ldrb	r0, [r2, r0]
 8000492:	1840      	adds	r0, r0, r1
 8000494:	4770      	bx	lr
 8000496:	46c0      	nop			; (mov r8, r8)
 8000498:	02020304 	.word	0x02020304
 800049c:	01010101 	.word	0x01010101
	...

080004a8 <Driver_Lis3mdl_WriteReg>:
	status = HAL_SPI_Transmit(hspi, &data, 1, 100);

	HAL_GPIO_WritePin(SS2_GPIO_Port, SS2_Pin, GPIO_PIN_SET);
	return true;
}
static bool Driver_Lis3mdl_WriteReg(SPI_HandleTypeDef *hspi, eDriverLis3mdlReg_t reg) {
 80004a8:	b580      	push	{r7, lr}
 80004aa:	b082      	sub	sp, #8
 80004ac:	af00      	add	r7, sp, #0
 80004ae:	6078      	str	r0, [r7, #4]
 80004b0:	000a      	movs	r2, r1
 80004b2:	1cfb      	adds	r3, r7, #3
 80004b4:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SS2_GPIO_Port, SS2_Pin, GPIO_PIN_RESET);
 80004b6:	2380      	movs	r3, #128	; 0x80
 80004b8:	015b      	lsls	r3, r3, #5
 80004ba:	4818      	ldr	r0, [pc, #96]	; (800051c <Driver_Lis3mdl_WriteReg+0x74>)
 80004bc:	2200      	movs	r2, #0
 80004be:	0019      	movs	r1, r3
 80004c0:	f001 f97c 	bl	80017bc <HAL_GPIO_WritePin>

	spi_cmd = SPI_WRITE | lis3mdl_reg_LUT[reg].address;
 80004c4:	1cfb      	adds	r3, r7, #3
 80004c6:	781a      	ldrb	r2, [r3, #0]
 80004c8:	4b15      	ldr	r3, [pc, #84]	; (8000520 <Driver_Lis3mdl_WriteReg+0x78>)
 80004ca:	0052      	lsls	r2, r2, #1
 80004cc:	5cd2      	ldrb	r2, [r2, r3]
 80004ce:	4b15      	ldr	r3, [pc, #84]	; (8000524 <Driver_Lis3mdl_WriteReg+0x7c>)
 80004d0:	701a      	strb	r2, [r3, #0]
	status = HAL_SPI_Transmit(hspi, &spi_cmd, 1, 100);
 80004d2:	4914      	ldr	r1, [pc, #80]	; (8000524 <Driver_Lis3mdl_WriteReg+0x7c>)
 80004d4:	6878      	ldr	r0, [r7, #4]
 80004d6:	2364      	movs	r3, #100	; 0x64
 80004d8:	2201      	movs	r2, #1
 80004da:	f002 f843 	bl	8002564 <HAL_SPI_Transmit>
 80004de:	0003      	movs	r3, r0
 80004e0:	001a      	movs	r2, r3
 80004e2:	4b11      	ldr	r3, [pc, #68]	; (8000528 <Driver_Lis3mdl_WriteReg+0x80>)
 80004e4:	701a      	strb	r2, [r3, #0]
	status = HAL_SPI_Transmit(hspi, &lis3mdl_reg_LUT[reg].reg_data, 1, 100);
 80004e6:	1cfb      	adds	r3, r7, #3
 80004e8:	781b      	ldrb	r3, [r3, #0]
 80004ea:	005a      	lsls	r2, r3, #1
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <Driver_Lis3mdl_WriteReg+0x78>)
 80004ee:	18d3      	adds	r3, r2, r3
 80004f0:	1c59      	adds	r1, r3, #1
 80004f2:	6878      	ldr	r0, [r7, #4]
 80004f4:	2364      	movs	r3, #100	; 0x64
 80004f6:	2201      	movs	r2, #1
 80004f8:	f002 f834 	bl	8002564 <HAL_SPI_Transmit>
 80004fc:	0003      	movs	r3, r0
 80004fe:	001a      	movs	r2, r3
 8000500:	4b09      	ldr	r3, [pc, #36]	; (8000528 <Driver_Lis3mdl_WriteReg+0x80>)
 8000502:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SS2_GPIO_Port, SS2_Pin, GPIO_PIN_SET);
 8000504:	2380      	movs	r3, #128	; 0x80
 8000506:	015b      	lsls	r3, r3, #5
 8000508:	4804      	ldr	r0, [pc, #16]	; (800051c <Driver_Lis3mdl_WriteReg+0x74>)
 800050a:	2201      	movs	r2, #1
 800050c:	0019      	movs	r1, r3
 800050e:	f001 f955 	bl	80017bc <HAL_GPIO_WritePin>
	return true;
 8000512:	2301      	movs	r3, #1
}
 8000514:	0018      	movs	r0, r3
 8000516:	46bd      	mov	sp, r7
 8000518:	b002      	add	sp, #8
 800051a:	bd80      	pop	{r7, pc}
 800051c:	50000400 	.word	0x50000400
 8000520:	20000010 	.word	0x20000010
 8000524:	2000006c 	.word	0x2000006c
 8000528:	20000072 	.word	0x20000072

0800052c <Driver_Lis3mdl_Read>:
static bool Driver_Lis3mdl_Read(SPI_HandleTypeDef *hspi, eDriverLis3mdlReg_t reg, uint8_t *data) {
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b085      	sub	sp, #20
 8000530:	af00      	add	r7, sp, #0
 8000532:	60f8      	str	r0, [r7, #12]
 8000534:	607a      	str	r2, [r7, #4]
 8000536:	240b      	movs	r4, #11
 8000538:	193b      	adds	r3, r7, r4
 800053a:	1c0a      	adds	r2, r1, #0
 800053c:	701a      	strb	r2, [r3, #0]
	HAL_GPIO_WritePin(SS2_GPIO_Port, SS2_Pin, GPIO_PIN_RESET);
 800053e:	2380      	movs	r3, #128	; 0x80
 8000540:	015b      	lsls	r3, r3, #5
 8000542:	4818      	ldr	r0, [pc, #96]	; (80005a4 <Driver_Lis3mdl_Read+0x78>)
 8000544:	2200      	movs	r2, #0
 8000546:	0019      	movs	r1, r3
 8000548:	f001 f938 	bl	80017bc <HAL_GPIO_WritePin>

	spi_cmd = SPI_READ | lis3mdl_reg_LUT[reg].address;
 800054c:	193b      	adds	r3, r7, r4
 800054e:	781a      	ldrb	r2, [r3, #0]
 8000550:	4b15      	ldr	r3, [pc, #84]	; (80005a8 <Driver_Lis3mdl_Read+0x7c>)
 8000552:	0052      	lsls	r2, r2, #1
 8000554:	5cd3      	ldrb	r3, [r2, r3]
 8000556:	2280      	movs	r2, #128	; 0x80
 8000558:	4252      	negs	r2, r2
 800055a:	4313      	orrs	r3, r2
 800055c:	b2da      	uxtb	r2, r3
 800055e:	4b13      	ldr	r3, [pc, #76]	; (80005ac <Driver_Lis3mdl_Read+0x80>)
 8000560:	701a      	strb	r2, [r3, #0]
	status = HAL_SPI_Transmit(hspi, &spi_cmd, 1, 100);
 8000562:	4912      	ldr	r1, [pc, #72]	; (80005ac <Driver_Lis3mdl_Read+0x80>)
 8000564:	68f8      	ldr	r0, [r7, #12]
 8000566:	2364      	movs	r3, #100	; 0x64
 8000568:	2201      	movs	r2, #1
 800056a:	f001 fffb 	bl	8002564 <HAL_SPI_Transmit>
 800056e:	0003      	movs	r3, r0
 8000570:	001a      	movs	r2, r3
 8000572:	4b0f      	ldr	r3, [pc, #60]	; (80005b0 <Driver_Lis3mdl_Read+0x84>)
 8000574:	701a      	strb	r2, [r3, #0]
	status = HAL_SPI_Receive(hspi, data, 1, 100);
 8000576:	6879      	ldr	r1, [r7, #4]
 8000578:	68f8      	ldr	r0, [r7, #12]
 800057a:	2364      	movs	r3, #100	; 0x64
 800057c:	2201      	movs	r2, #1
 800057e:	f002 f947 	bl	8002810 <HAL_SPI_Receive>
 8000582:	0003      	movs	r3, r0
 8000584:	001a      	movs	r2, r3
 8000586:	4b0a      	ldr	r3, [pc, #40]	; (80005b0 <Driver_Lis3mdl_Read+0x84>)
 8000588:	701a      	strb	r2, [r3, #0]

	HAL_GPIO_WritePin(SS2_GPIO_Port, SS2_Pin, GPIO_PIN_SET);
 800058a:	2380      	movs	r3, #128	; 0x80
 800058c:	015b      	lsls	r3, r3, #5
 800058e:	4805      	ldr	r0, [pc, #20]	; (80005a4 <Driver_Lis3mdl_Read+0x78>)
 8000590:	2201      	movs	r2, #1
 8000592:	0019      	movs	r1, r3
 8000594:	f001 f912 	bl	80017bc <HAL_GPIO_WritePin>
	return true;
 8000598:	2301      	movs	r3, #1
}
 800059a:	0018      	movs	r0, r3
 800059c:	46bd      	mov	sp, r7
 800059e:	b005      	add	sp, #20
 80005a0:	bd90      	pop	{r4, r7, pc}
 80005a2:	46c0      	nop			; (mov r8, r8)
 80005a4:	50000400 	.word	0x50000400
 80005a8:	20000010 	.word	0x20000010
 80005ac:	2000006c 	.word	0x2000006c
 80005b0:	20000072 	.word	0x20000072

080005b4 <Driver_Lis3mdl_InitCtrlReg>:
static bool Driver_Lis3mdl_InitCtrlReg(SPI_HandleTypeDef *hspi) {
 80005b4:	b580      	push	{r7, lr}
 80005b6:	b082      	sub	sp, #8
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	lis3mdl_reg_LUT[eDriverLis3mdlReg_CtrlReg1].reg_data = sensor_config.temp_sensor | sensor_config.xy_mode
 80005bc:	4b2a      	ldr	r3, [pc, #168]	; (8000668 <Driver_Lis3mdl_InitCtrlReg+0xb4>)
 80005be:	781a      	ldrb	r2, [r3, #0]
 80005c0:	4b29      	ldr	r3, [pc, #164]	; (8000668 <Driver_Lis3mdl_InitCtrlReg+0xb4>)
 80005c2:	785b      	ldrb	r3, [r3, #1]
 80005c4:	4313      	orrs	r3, r2
 80005c6:	b2da      	uxtb	r2, r3
			| sensor_config.odr_mode | sensor_config.self_test;
 80005c8:	4b27      	ldr	r3, [pc, #156]	; (8000668 <Driver_Lis3mdl_InitCtrlReg+0xb4>)
 80005ca:	789b      	ldrb	r3, [r3, #2]
	lis3mdl_reg_LUT[eDriverLis3mdlReg_CtrlReg1].reg_data = sensor_config.temp_sensor | sensor_config.xy_mode
 80005cc:	4313      	orrs	r3, r2
 80005ce:	b2da      	uxtb	r2, r3
			| sensor_config.odr_mode | sensor_config.self_test;
 80005d0:	4b25      	ldr	r3, [pc, #148]	; (8000668 <Driver_Lis3mdl_InitCtrlReg+0xb4>)
 80005d2:	78db      	ldrb	r3, [r3, #3]
	lis3mdl_reg_LUT[eDriverLis3mdlReg_CtrlReg1].reg_data = sensor_config.temp_sensor | sensor_config.xy_mode
 80005d4:	4313      	orrs	r3, r2
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <Driver_Lis3mdl_InitCtrlReg+0xb8>)
 80005da:	73da      	strb	r2, [r3, #15]
	lis3mdl_reg_LUT[eDriverLis3mdlReg_CtrlReg2].reg_data = sensor_config.full_scale | sensor_config.reboot
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <Driver_Lis3mdl_InitCtrlReg+0xb4>)
 80005de:	791a      	ldrb	r2, [r3, #4]
 80005e0:	4b21      	ldr	r3, [pc, #132]	; (8000668 <Driver_Lis3mdl_InitCtrlReg+0xb4>)
 80005e2:	795b      	ldrb	r3, [r3, #5]
 80005e4:	4313      	orrs	r3, r2
 80005e6:	b2da      	uxtb	r2, r3
			| sensor_config.soft_reset;
 80005e8:	4b1f      	ldr	r3, [pc, #124]	; (8000668 <Driver_Lis3mdl_InitCtrlReg+0xb4>)
 80005ea:	799b      	ldrb	r3, [r3, #6]
	lis3mdl_reg_LUT[eDriverLis3mdlReg_CtrlReg2].reg_data = sensor_config.full_scale | sensor_config.reboot
 80005ec:	4313      	orrs	r3, r2
 80005ee:	b2da      	uxtb	r2, r3
 80005f0:	4b1e      	ldr	r3, [pc, #120]	; (800066c <Driver_Lis3mdl_InitCtrlReg+0xb8>)
 80005f2:	745a      	strb	r2, [r3, #17]
	lis3mdl_reg_LUT[eDriverLis3mdlReg_CtrlReg3].reg_data = sensor_config.low_power_mode | sensor_config.wire_mode
 80005f4:	4b1c      	ldr	r3, [pc, #112]	; (8000668 <Driver_Lis3mdl_InitCtrlReg+0xb4>)
 80005f6:	79da      	ldrb	r2, [r3, #7]
 80005f8:	4b1b      	ldr	r3, [pc, #108]	; (8000668 <Driver_Lis3mdl_InitCtrlReg+0xb4>)
 80005fa:	7a1b      	ldrb	r3, [r3, #8]
 80005fc:	4313      	orrs	r3, r2
 80005fe:	b2da      	uxtb	r2, r3
			| sensor_config.measure_mode;
 8000600:	4b19      	ldr	r3, [pc, #100]	; (8000668 <Driver_Lis3mdl_InitCtrlReg+0xb4>)
 8000602:	7a5b      	ldrb	r3, [r3, #9]
	lis3mdl_reg_LUT[eDriverLis3mdlReg_CtrlReg3].reg_data = sensor_config.low_power_mode | sensor_config.wire_mode
 8000604:	4313      	orrs	r3, r2
 8000606:	b2da      	uxtb	r2, r3
 8000608:	4b18      	ldr	r3, [pc, #96]	; (800066c <Driver_Lis3mdl_InitCtrlReg+0xb8>)
 800060a:	74da      	strb	r2, [r3, #19]
	lis3mdl_reg_LUT[eDriverLis3mdlReg_CtrlReg4].reg_data = sensor_config.z_mode | sensor_config.endian_mode;
 800060c:	4b16      	ldr	r3, [pc, #88]	; (8000668 <Driver_Lis3mdl_InitCtrlReg+0xb4>)
 800060e:	7a9a      	ldrb	r2, [r3, #10]
 8000610:	4b15      	ldr	r3, [pc, #84]	; (8000668 <Driver_Lis3mdl_InitCtrlReg+0xb4>)
 8000612:	7adb      	ldrb	r3, [r3, #11]
 8000614:	4313      	orrs	r3, r2
 8000616:	b2da      	uxtb	r2, r3
 8000618:	4b14      	ldr	r3, [pc, #80]	; (800066c <Driver_Lis3mdl_InitCtrlReg+0xb8>)
 800061a:	755a      	strb	r2, [r3, #21]
	lis3mdl_reg_LUT[eDriverLis3mdlReg_CtrlReg5].reg_data = sensor_config.fast_read | sensor_config.block_data;
 800061c:	4b12      	ldr	r3, [pc, #72]	; (8000668 <Driver_Lis3mdl_InitCtrlReg+0xb4>)
 800061e:	7b1a      	ldrb	r2, [r3, #12]
 8000620:	4b11      	ldr	r3, [pc, #68]	; (8000668 <Driver_Lis3mdl_InitCtrlReg+0xb4>)
 8000622:	7b5b      	ldrb	r3, [r3, #13]
 8000624:	4313      	orrs	r3, r2
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b10      	ldr	r3, [pc, #64]	; (800066c <Driver_Lis3mdl_InitCtrlReg+0xb8>)
 800062a:	75da      	strb	r2, [r3, #23]

	Driver_Lis3mdl_WriteReg(hspi, eDriverLis3mdlReg_CtrlReg2);
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	2108      	movs	r1, #8
 8000630:	0018      	movs	r0, r3
 8000632:	f7ff ff39 	bl	80004a8 <Driver_Lis3mdl_WriteReg>
	Driver_Lis3mdl_WriteReg(hspi, eDriverLis3mdlReg_CtrlReg1);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	2107      	movs	r1, #7
 800063a:	0018      	movs	r0, r3
 800063c:	f7ff ff34 	bl	80004a8 <Driver_Lis3mdl_WriteReg>
	Driver_Lis3mdl_WriteReg(hspi, eDriverLis3mdlReg_CtrlReg4);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	210a      	movs	r1, #10
 8000644:	0018      	movs	r0, r3
 8000646:	f7ff ff2f 	bl	80004a8 <Driver_Lis3mdl_WriteReg>
	Driver_Lis3mdl_WriteReg(hspi, eDriverLis3mdlReg_CtrlReg3);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	2109      	movs	r1, #9
 800064e:	0018      	movs	r0, r3
 8000650:	f7ff ff2a 	bl	80004a8 <Driver_Lis3mdl_WriteReg>
	Driver_Lis3mdl_WriteReg(hspi, eDriverLis3mdlReg_CtrlReg5);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	210b      	movs	r1, #11
 8000658:	0018      	movs	r0, r3
 800065a:	f7ff ff25 	bl	80004a8 <Driver_Lis3mdl_WriteReg>

	return true;
 800065e:	2301      	movs	r3, #1
}
 8000660:	0018      	movs	r0, r3
 8000662:	46bd      	mov	sp, r7
 8000664:	b002      	add	sp, #8
 8000666:	bd80      	pop	{r7, pc}
 8000668:	20000000 	.word	0x20000000
 800066c:	20000010 	.word	0x20000010

08000670 <Utility_TwosCompToDec>:

static int16_t Utility_TwosCompToDec(uint8_t msb, uint8_t lsb) {
 8000670:	b580      	push	{r7, lr}
 8000672:	b084      	sub	sp, #16
 8000674:	af00      	add	r7, sp, #0
 8000676:	0002      	movs	r2, r0
 8000678:	1dfb      	adds	r3, r7, #7
 800067a:	701a      	strb	r2, [r3, #0]
 800067c:	1dbb      	adds	r3, r7, #6
 800067e:	1c0a      	adds	r2, r1, #0
 8000680:	701a      	strb	r2, [r3, #0]
	int16_t result = 0;
 8000682:	230e      	movs	r3, #14
 8000684:	18fb      	adds	r3, r7, r3
 8000686:	2200      	movs	r2, #0
 8000688:	801a      	strh	r2, [r3, #0]
	int16_t sign = msb & 0x80 ? -1 : 1; // Check the sign bit of the MSB
 800068a:	1dfb      	adds	r3, r7, #7
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	b25b      	sxtb	r3, r3
 8000690:	2b00      	cmp	r3, #0
 8000692:	da02      	bge.n	800069a <Utility_TwosCompToDec+0x2a>
 8000694:	2301      	movs	r3, #1
 8000696:	425a      	negs	r2, r3
 8000698:	e000      	b.n	800069c <Utility_TwosCompToDec+0x2c>
 800069a:	2201      	movs	r2, #1
 800069c:	210c      	movs	r1, #12
 800069e:	187b      	adds	r3, r7, r1
 80006a0:	801a      	strh	r2, [r3, #0]

	// If the number is negative, first take the two's complement
	if (sign == -1) {
 80006a2:	187b      	adds	r3, r7, r1
 80006a4:	2200      	movs	r2, #0
 80006a6:	5e9b      	ldrsh	r3, [r3, r2]
 80006a8:	3301      	adds	r3, #1
 80006aa:	d10e      	bne.n	80006ca <Utility_TwosCompToDec+0x5a>
		msb = ~msb;
 80006ac:	1dfb      	adds	r3, r7, #7
 80006ae:	1dfa      	adds	r2, r7, #7
 80006b0:	7812      	ldrb	r2, [r2, #0]
 80006b2:	43d2      	mvns	r2, r2
 80006b4:	701a      	strb	r2, [r3, #0]
		lsb = ~lsb;
 80006b6:	1dbb      	adds	r3, r7, #6
 80006b8:	1dba      	adds	r2, r7, #6
 80006ba:	7812      	ldrb	r2, [r2, #0]
 80006bc:	43d2      	mvns	r2, r2
 80006be:	701a      	strb	r2, [r3, #0]
		result = -1; // Start with -1 instead of 0 for the carry
 80006c0:	230e      	movs	r3, #14
 80006c2:	18fb      	adds	r3, r7, r3
 80006c4:	2201      	movs	r2, #1
 80006c6:	4252      	negs	r2, r2
 80006c8:	801a      	strh	r2, [r3, #0]
	}
	// Add the MSB shifted left by 8 bits, and the LSB
	result = (result << 8) | msb;
 80006ca:	200e      	movs	r0, #14
 80006cc:	183b      	adds	r3, r7, r0
 80006ce:	2200      	movs	r2, #0
 80006d0:	5e9b      	ldrsh	r3, [r3, r2]
 80006d2:	021b      	lsls	r3, r3, #8
 80006d4:	b219      	sxth	r1, r3
 80006d6:	1dfb      	adds	r3, r7, #7
 80006d8:	781b      	ldrb	r3, [r3, #0]
 80006da:	b21a      	sxth	r2, r3
 80006dc:	183b      	adds	r3, r7, r0
 80006de:	430a      	orrs	r2, r1
 80006e0:	801a      	strh	r2, [r3, #0]
	result = (result << 8) | lsb;
 80006e2:	183b      	adds	r3, r7, r0
 80006e4:	2200      	movs	r2, #0
 80006e6:	5e9b      	ldrsh	r3, [r3, r2]
 80006e8:	021b      	lsls	r3, r3, #8
 80006ea:	b219      	sxth	r1, r3
 80006ec:	1dbb      	adds	r3, r7, #6
 80006ee:	781b      	ldrb	r3, [r3, #0]
 80006f0:	b21a      	sxth	r2, r3
 80006f2:	183b      	adds	r3, r7, r0
 80006f4:	430a      	orrs	r2, r1
 80006f6:	801a      	strh	r2, [r3, #0]

	// If the number is negative, subtract 1 to get the correct value
	if (sign == -1) {
 80006f8:	230c      	movs	r3, #12
 80006fa:	18fb      	adds	r3, r7, r3
 80006fc:	2200      	movs	r2, #0
 80006fe:	5e9b      	ldrsh	r3, [r3, r2]
 8000700:	3301      	adds	r3, #1
 8000702:	d104      	bne.n	800070e <Utility_TwosCompToDec+0x9e>
		result = -result - 1;
 8000704:	183b      	adds	r3, r7, r0
 8000706:	183a      	adds	r2, r7, r0
 8000708:	8812      	ldrh	r2, [r2, #0]
 800070a:	43d2      	mvns	r2, r2
 800070c:	801a      	strh	r2, [r3, #0]
	}

	return result;
 800070e:	230e      	movs	r3, #14
 8000710:	18fb      	adds	r3, r7, r3
 8000712:	2200      	movs	r2, #0
 8000714:	5e9b      	ldrsh	r3, [r3, r2]
}
 8000716:	0018      	movs	r0, r3
 8000718:	46bd      	mov	sp, r7
 800071a:	b004      	add	sp, #16
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <Driver_Lis3mdl_Init>:
//	return true;
//}

/*_____________________________________________________________________________________________________________________
 * Definitions of exported functions */
bool Driver_Lis3mdl_Init(SPI_HandleTypeDef *hspi) {
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(SS2_GPIO_Port, SS2_Pin, GPIO_PIN_SET);
 8000728:	2380      	movs	r3, #128	; 0x80
 800072a:	015b      	lsls	r3, r3, #5
 800072c:	480d      	ldr	r0, [pc, #52]	; (8000764 <Driver_Lis3mdl_Init+0x44>)
 800072e:	2201      	movs	r2, #1
 8000730:	0019      	movs	r1, r3
 8000732:	f001 f843 	bl	80017bc <HAL_GPIO_WritePin>
// 	STARTUP SEQUENCE
	Driver_Lis3mdl_Read(hspi, eDriverLis3mdlReg_WhoAmI, &sensor_id);
 8000736:	4a0c      	ldr	r2, [pc, #48]	; (8000768 <Driver_Lis3mdl_Init+0x48>)
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	2106      	movs	r1, #6
 800073c:	0018      	movs	r0, r3
 800073e:	f7ff fef5 	bl	800052c <Driver_Lis3mdl_Read>

	Driver_Lis3mdl_InitCtrlReg(hspi);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	0018      	movs	r0, r3
 8000746:	f7ff ff35 	bl	80005b4 <Driver_Lis3mdl_InitCtrlReg>

	HAL_GPIO_WritePin(SS2_GPIO_Port, SS2_Pin, GPIO_PIN_SET);
 800074a:	2380      	movs	r3, #128	; 0x80
 800074c:	015b      	lsls	r3, r3, #5
 800074e:	4805      	ldr	r0, [pc, #20]	; (8000764 <Driver_Lis3mdl_Init+0x44>)
 8000750:	2201      	movs	r2, #1
 8000752:	0019      	movs	r1, r3
 8000754:	f001 f832 	bl	80017bc <HAL_GPIO_WritePin>
	return true;
 8000758:	2301      	movs	r3, #1
}
 800075a:	0018      	movs	r0, r3
 800075c:	46bd      	mov	sp, r7
 800075e:	b002      	add	sp, #8
 8000760:	bd80      	pop	{r7, pc}
 8000762:	46c0      	nop			; (mov r8, r8)
 8000764:	50000400 	.word	0x50000400
 8000768:	2000006d 	.word	0x2000006d

0800076c <Driver_Lis3mdl_ReadData>:
bool Driver_Lis3mdl_ReadData(SPI_HandleTypeDef *hspi, sLis3mdl_DriverOut_t *sensor_data) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
 8000774:	6039      	str	r1, [r7, #0]
	Driver_Lis3mdl_Read(hspi, eDriverLis3mdlReg_StatusReg, &(sensor_data->status));
 8000776:	683a      	ldr	r2, [r7, #0]
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	210c      	movs	r1, #12
 800077c:	0018      	movs	r0, r3
 800077e:	f7ff fed5 	bl	800052c <Driver_Lis3mdl_Read>
// 	STATUS BIT3 - NEW DATA AVAILABE
	if ((sensor_data->status & 0b00000100) == 0) {
 8000782:	683b      	ldr	r3, [r7, #0]
 8000784:	781b      	ldrb	r3, [r3, #0]
 8000786:	001a      	movs	r2, r3
 8000788:	2304      	movs	r3, #4
 800078a:	4013      	ands	r3, r2
 800078c:	d101      	bne.n	8000792 <Driver_Lis3mdl_ReadData+0x26>
		return false;
 800078e:	2300      	movs	r3, #0
 8000790:	e04e      	b.n	8000830 <Driver_Lis3mdl_ReadData+0xc4>
	}

	Driver_Lis3mdl_Read(hspi, eDriverLis3mdlReg_OutXL, &raw_sensor_data[0]);
 8000792:	4a29      	ldr	r2, [pc, #164]	; (8000838 <Driver_Lis3mdl_ReadData+0xcc>)
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	210d      	movs	r1, #13
 8000798:	0018      	movs	r0, r3
 800079a:	f7ff fec7 	bl	800052c <Driver_Lis3mdl_Read>
	Driver_Lis3mdl_Read(hspi, eDriverLis3mdlReg_OutXH, &raw_sensor_data[1]);
 800079e:	4a27      	ldr	r2, [pc, #156]	; (800083c <Driver_Lis3mdl_ReadData+0xd0>)
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	210e      	movs	r1, #14
 80007a4:	0018      	movs	r0, r3
 80007a6:	f7ff fec1 	bl	800052c <Driver_Lis3mdl_Read>
	sensor_data->x = Utility_TwosCompToDec(raw_sensor_data[1], raw_sensor_data[0]);
 80007aa:	4b23      	ldr	r3, [pc, #140]	; (8000838 <Driver_Lis3mdl_ReadData+0xcc>)
 80007ac:	785a      	ldrb	r2, [r3, #1]
 80007ae:	4b22      	ldr	r3, [pc, #136]	; (8000838 <Driver_Lis3mdl_ReadData+0xcc>)
 80007b0:	781b      	ldrb	r3, [r3, #0]
 80007b2:	0019      	movs	r1, r3
 80007b4:	0010      	movs	r0, r2
 80007b6:	f7ff ff5b 	bl	8000670 <Utility_TwosCompToDec>
 80007ba:	0003      	movs	r3, r0
 80007bc:	001a      	movs	r2, r3
 80007be:	683b      	ldr	r3, [r7, #0]
 80007c0:	805a      	strh	r2, [r3, #2]

	Driver_Lis3mdl_Read(hspi, eDriverLis3mdlReg_OutYL, &raw_sensor_data[0]);
 80007c2:	4a1d      	ldr	r2, [pc, #116]	; (8000838 <Driver_Lis3mdl_ReadData+0xcc>)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	210f      	movs	r1, #15
 80007c8:	0018      	movs	r0, r3
 80007ca:	f7ff feaf 	bl	800052c <Driver_Lis3mdl_Read>
	Driver_Lis3mdl_Read(hspi, eDriverLis3mdlReg_OutYH, &raw_sensor_data[1]);
 80007ce:	4a1b      	ldr	r2, [pc, #108]	; (800083c <Driver_Lis3mdl_ReadData+0xd0>)
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2110      	movs	r1, #16
 80007d4:	0018      	movs	r0, r3
 80007d6:	f7ff fea9 	bl	800052c <Driver_Lis3mdl_Read>
	sensor_data->y = Utility_TwosCompToDec(raw_sensor_data[1], raw_sensor_data[0]);
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <Driver_Lis3mdl_ReadData+0xcc>)
 80007dc:	785a      	ldrb	r2, [r3, #1]
 80007de:	4b16      	ldr	r3, [pc, #88]	; (8000838 <Driver_Lis3mdl_ReadData+0xcc>)
 80007e0:	781b      	ldrb	r3, [r3, #0]
 80007e2:	0019      	movs	r1, r3
 80007e4:	0010      	movs	r0, r2
 80007e6:	f7ff ff43 	bl	8000670 <Utility_TwosCompToDec>
 80007ea:	0003      	movs	r3, r0
 80007ec:	001a      	movs	r2, r3
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	809a      	strh	r2, [r3, #4]

	Driver_Lis3mdl_Read(hspi, eDriverLis3mdlReg_OutZL, &raw_sensor_data[0]);
 80007f2:	4a11      	ldr	r2, [pc, #68]	; (8000838 <Driver_Lis3mdl_ReadData+0xcc>)
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2111      	movs	r1, #17
 80007f8:	0018      	movs	r0, r3
 80007fa:	f7ff fe97 	bl	800052c <Driver_Lis3mdl_Read>
	Driver_Lis3mdl_Read(hspi, eDriverLis3mdlReg_OutZH, &raw_sensor_data[1]);
 80007fe:	4a0f      	ldr	r2, [pc, #60]	; (800083c <Driver_Lis3mdl_ReadData+0xd0>)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	2112      	movs	r1, #18
 8000804:	0018      	movs	r0, r3
 8000806:	f7ff fe91 	bl	800052c <Driver_Lis3mdl_Read>
	sensor_data->z = Utility_TwosCompToDec(raw_sensor_data[1], raw_sensor_data[0]);
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <Driver_Lis3mdl_ReadData+0xcc>)
 800080c:	785a      	ldrb	r2, [r3, #1]
 800080e:	4b0a      	ldr	r3, [pc, #40]	; (8000838 <Driver_Lis3mdl_ReadData+0xcc>)
 8000810:	781b      	ldrb	r3, [r3, #0]
 8000812:	0019      	movs	r1, r3
 8000814:	0010      	movs	r0, r2
 8000816:	f7ff ff2b 	bl	8000670 <Utility_TwosCompToDec>
 800081a:	0003      	movs	r3, r0
 800081c:	001a      	movs	r2, r3
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	80da      	strh	r2, [r3, #6]

	Driver_Lis3mdl_Read(hspi, eDriverLis3mdlReg_WhoAmI, &sensor_id);
 8000822:	4a07      	ldr	r2, [pc, #28]	; (8000840 <Driver_Lis3mdl_ReadData+0xd4>)
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	2106      	movs	r1, #6
 8000828:	0018      	movs	r0, r3
 800082a:	f7ff fe7f 	bl	800052c <Driver_Lis3mdl_Read>
	return true;
 800082e:	2301      	movs	r3, #1
}
 8000830:	0018      	movs	r0, r3
 8000832:	46bd      	mov	sp, r7
 8000834:	b002      	add	sp, #8
 8000836:	bd80      	pop	{r7, pc}
 8000838:	20000070 	.word	0x20000070
 800083c:	20000071 	.word	0x20000071
 8000840:	2000006d 	.word	0x2000006d

08000844 <Driver_Lis3mdl_ExampleApp>:

bool Driver_Lis3mdl_ExampleApp(SPI_HandleTypeDef *hspi, sLis3mdl_DriverOut_t *sensor_data) {
 8000844:	b580      	push	{r7, lr}
 8000846:	b082      	sub	sp, #8
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
 800084c:	6039      	str	r1, [r7, #0]

	if (abs(sensor_data->x) >= abs(sensor_data->y)) {
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	2202      	movs	r2, #2
 8000852:	5e9b      	ldrsh	r3, [r3, r2]
 8000854:	17da      	asrs	r2, r3, #31
 8000856:	189b      	adds	r3, r3, r2
 8000858:	4053      	eors	r3, r2
 800085a:	b29a      	uxth	r2, r3
 800085c:	683b      	ldr	r3, [r7, #0]
 800085e:	2104      	movs	r1, #4
 8000860:	5e5b      	ldrsh	r3, [r3, r1]
 8000862:	17d9      	asrs	r1, r3, #31
 8000864:	185b      	adds	r3, r3, r1
 8000866:	404b      	eors	r3, r1
 8000868:	b29b      	uxth	r3, r3
 800086a:	429a      	cmp	r2, r3
 800086c:	d336      	bcc.n	80008dc <Driver_Lis3mdl_ExampleApp+0x98>
		if (sensor_data->x >= 0) {
 800086e:	683b      	ldr	r3, [r7, #0]
 8000870:	2202      	movs	r2, #2
 8000872:	5e9b      	ldrsh	r3, [r3, r2]
 8000874:	2b00      	cmp	r3, #0
 8000876:	db10      	blt.n	800089a <Driver_Lis3mdl_ExampleApp+0x56>
			HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_SET);
 8000878:	2380      	movs	r3, #128	; 0x80
 800087a:	0099      	lsls	r1, r3, #2
 800087c:	23a0      	movs	r3, #160	; 0xa0
 800087e:	05db      	lsls	r3, r3, #23
 8000880:	2201      	movs	r2, #1
 8000882:	0018      	movs	r0, r3
 8000884:	f000 ff9a 	bl	80017bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_RESET);
 8000888:	2380      	movs	r3, #128	; 0x80
 800088a:	0119      	lsls	r1, r3, #4
 800088c:	23a0      	movs	r3, #160	; 0xa0
 800088e:	05db      	lsls	r3, r3, #23
 8000890:	2200      	movs	r2, #0
 8000892:	0018      	movs	r0, r3
 8000894:	f000 ff92 	bl	80017bc <HAL_GPIO_WritePin>
 8000898:	e00f      	b.n	80008ba <Driver_Lis3mdl_ExampleApp+0x76>
		} else {
			HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 800089a:	2380      	movs	r3, #128	; 0x80
 800089c:	0099      	lsls	r1, r3, #2
 800089e:	23a0      	movs	r3, #160	; 0xa0
 80008a0:	05db      	lsls	r3, r3, #23
 80008a2:	2200      	movs	r2, #0
 80008a4:	0018      	movs	r0, r3
 80008a6:	f000 ff89 	bl	80017bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_SET);
 80008aa:	2380      	movs	r3, #128	; 0x80
 80008ac:	0119      	lsls	r1, r3, #4
 80008ae:	23a0      	movs	r3, #160	; 0xa0
 80008b0:	05db      	lsls	r3, r3, #23
 80008b2:	2201      	movs	r2, #1
 80008b4:	0018      	movs	r0, r3
 80008b6:	f000 ff81 	bl	80017bc <HAL_GPIO_WritePin>
		}
		HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 80008ba:	2380      	movs	r3, #128	; 0x80
 80008bc:	0059      	lsls	r1, r3, #1
 80008be:	23a0      	movs	r3, #160	; 0xa0
 80008c0:	05db      	lsls	r3, r3, #23
 80008c2:	2200      	movs	r2, #0
 80008c4:	0018      	movs	r0, r3
 80008c6:	f000 ff79 	bl	80017bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 80008ca:	2380      	movs	r3, #128	; 0x80
 80008cc:	00d9      	lsls	r1, r3, #3
 80008ce:	23a0      	movs	r3, #160	; 0xa0
 80008d0:	05db      	lsls	r3, r3, #23
 80008d2:	2200      	movs	r2, #0
 80008d4:	0018      	movs	r0, r3
 80008d6:	f000 ff71 	bl	80017bc <HAL_GPIO_WritePin>
 80008da:	e035      	b.n	8000948 <Driver_Lis3mdl_ExampleApp+0x104>
	} else {
		if (sensor_data->y >= 0) {
 80008dc:	683b      	ldr	r3, [r7, #0]
 80008de:	2204      	movs	r2, #4
 80008e0:	5e9b      	ldrsh	r3, [r3, r2]
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	db10      	blt.n	8000908 <Driver_Lis3mdl_ExampleApp+0xc4>
			HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_SET);
 80008e6:	2380      	movs	r3, #128	; 0x80
 80008e8:	0059      	lsls	r1, r3, #1
 80008ea:	23a0      	movs	r3, #160	; 0xa0
 80008ec:	05db      	lsls	r3, r3, #23
 80008ee:	2201      	movs	r2, #1
 80008f0:	0018      	movs	r0, r3
 80008f2:	f000 ff63 	bl	80017bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_RESET);
 80008f6:	2380      	movs	r3, #128	; 0x80
 80008f8:	00d9      	lsls	r1, r3, #3
 80008fa:	23a0      	movs	r3, #160	; 0xa0
 80008fc:	05db      	lsls	r3, r3, #23
 80008fe:	2200      	movs	r2, #0
 8000900:	0018      	movs	r0, r3
 8000902:	f000 ff5b 	bl	80017bc <HAL_GPIO_WritePin>
 8000906:	e00f      	b.n	8000928 <Driver_Lis3mdl_ExampleApp+0xe4>
		} else {
			HAL_GPIO_WritePin(GPIOA, LED1_Pin, GPIO_PIN_RESET);
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	0059      	lsls	r1, r3, #1
 800090c:	23a0      	movs	r3, #160	; 0xa0
 800090e:	05db      	lsls	r3, r3, #23
 8000910:	2200      	movs	r2, #0
 8000912:	0018      	movs	r0, r3
 8000914:	f000 ff52 	bl	80017bc <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, LED3_Pin, GPIO_PIN_SET);
 8000918:	2380      	movs	r3, #128	; 0x80
 800091a:	00d9      	lsls	r1, r3, #3
 800091c:	23a0      	movs	r3, #160	; 0xa0
 800091e:	05db      	lsls	r3, r3, #23
 8000920:	2201      	movs	r2, #1
 8000922:	0018      	movs	r0, r3
 8000924:	f000 ff4a 	bl	80017bc <HAL_GPIO_WritePin>
		}
		HAL_GPIO_WritePin(GPIOA, LED2_Pin, GPIO_PIN_RESET);
 8000928:	2380      	movs	r3, #128	; 0x80
 800092a:	0099      	lsls	r1, r3, #2
 800092c:	23a0      	movs	r3, #160	; 0xa0
 800092e:	05db      	lsls	r3, r3, #23
 8000930:	2200      	movs	r2, #0
 8000932:	0018      	movs	r0, r3
 8000934:	f000 ff42 	bl	80017bc <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, LED4_Pin, GPIO_PIN_RESET);
 8000938:	2380      	movs	r3, #128	; 0x80
 800093a:	0119      	lsls	r1, r3, #4
 800093c:	23a0      	movs	r3, #160	; 0xa0
 800093e:	05db      	lsls	r3, r3, #23
 8000940:	2200      	movs	r2, #0
 8000942:	0018      	movs	r0, r3
 8000944:	f000 ff3a 	bl	80017bc <HAL_GPIO_WritePin>
	}
	return true;
 8000948:	2301      	movs	r3, #1
}
 800094a:	0018      	movs	r0, r3
 800094c:	46bd      	mov	sp, r7
 800094e:	b002      	add	sp, #8
 8000950:	bd80      	pop	{r7, pc}
	...

08000954 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000954:	b580      	push	{r7, lr}
 8000956:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000958:	f000 fada 	bl	8000f10 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800095c:	f000 f820 	bl	80009a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000960:	f000 f90a 	bl	8000b78 <MX_GPIO_Init>
  MX_DMA_Init();
 8000964:	f000 f8ea 	bl	8000b3c <MX_DMA_Init>
  MX_SPI2_Init();
 8000968:	f000 f876 	bl	8000a58 <MX_SPI2_Init>
  MX_TIM6_Init();
 800096c:	f000 f8ac 	bl	8000ac8 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */
	Driver_Lis3mdl_Init(&hspi2);
 8000970:	4b09      	ldr	r3, [pc, #36]	; (8000998 <main+0x44>)
 8000972:	0018      	movs	r0, r3
 8000974:	f7ff fed4 	bl	8000720 <Driver_Lis3mdl_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
		HAL_Delay(100);
 8000978:	2064      	movs	r0, #100	; 0x64
 800097a:	f000 fb39 	bl	8000ff0 <HAL_Delay>
		Driver_Lis3mdl_ReadData(&hspi2, &mag_sensor_data);
 800097e:	4a07      	ldr	r2, [pc, #28]	; (800099c <main+0x48>)
 8000980:	4b05      	ldr	r3, [pc, #20]	; (8000998 <main+0x44>)
 8000982:	0011      	movs	r1, r2
 8000984:	0018      	movs	r0, r3
 8000986:	f7ff fef1 	bl	800076c <Driver_Lis3mdl_ReadData>
		Driver_Lis3mdl_ExampleApp(&hspi2, &mag_sensor_data);
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <main+0x48>)
 800098c:	4b02      	ldr	r3, [pc, #8]	; (8000998 <main+0x44>)
 800098e:	0011      	movs	r1, r2
 8000990:	0018      	movs	r0, r3
 8000992:	f7ff ff57 	bl	8000844 <Driver_Lis3mdl_ExampleApp>
		HAL_Delay(100);
 8000996:	e7ef      	b.n	8000978 <main+0x24>
 8000998:	20000074 	.word	0x20000074
 800099c:	2000019c 	.word	0x2000019c

080009a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009a0:	b590      	push	{r4, r7, lr}
 80009a2:	b095      	sub	sp, #84	; 0x54
 80009a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009a6:	2418      	movs	r4, #24
 80009a8:	193b      	adds	r3, r7, r4
 80009aa:	0018      	movs	r0, r3
 80009ac:	2338      	movs	r3, #56	; 0x38
 80009ae:	001a      	movs	r2, r3
 80009b0:	2100      	movs	r1, #0
 80009b2:	f002 fe89 	bl	80036c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80009b6:	1d3b      	adds	r3, r7, #4
 80009b8:	0018      	movs	r0, r3
 80009ba:	2314      	movs	r3, #20
 80009bc:	001a      	movs	r2, r3
 80009be:	2100      	movs	r1, #0
 80009c0:	f002 fe82 	bl	80036c8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80009c4:	4b22      	ldr	r3, [pc, #136]	; (8000a50 <SystemClock_Config+0xb0>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a22      	ldr	r2, [pc, #136]	; (8000a54 <SystemClock_Config+0xb4>)
 80009ca:	401a      	ands	r2, r3
 80009cc:	4b20      	ldr	r3, [pc, #128]	; (8000a50 <SystemClock_Config+0xb0>)
 80009ce:	2180      	movs	r1, #128	; 0x80
 80009d0:	0109      	lsls	r1, r1, #4
 80009d2:	430a      	orrs	r2, r1
 80009d4:	601a      	str	r2, [r3, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80009d6:	0021      	movs	r1, r4
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2202      	movs	r2, #2
 80009dc:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2201      	movs	r2, #1
 80009e2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2210      	movs	r2, #16
 80009e8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2202      	movs	r2, #2
 80009ee:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80009f0:	187b      	adds	r3, r7, r1
 80009f2:	2200      	movs	r2, #0
 80009f4:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLLMUL_4;
 80009f6:	187b      	adds	r3, r7, r1
 80009f8:	2280      	movs	r2, #128	; 0x80
 80009fa:	02d2      	lsls	r2, r2, #11
 80009fc:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLLDIV_2;
 80009fe:	187b      	adds	r3, r7, r1
 8000a00:	2280      	movs	r2, #128	; 0x80
 8000a02:	03d2      	lsls	r2, r2, #15
 8000a04:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a06:	187b      	adds	r3, r7, r1
 8000a08:	0018      	movs	r0, r3
 8000a0a:	f000 ff65 	bl	80018d8 <HAL_RCC_OscConfig>
 8000a0e:	1e03      	subs	r3, r0, #0
 8000a10:	d001      	beq.n	8000a16 <SystemClock_Config+0x76>
  {
    Error_Handler();
 8000a12:	f000 f913 	bl	8000c3c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a16:	1d3b      	adds	r3, r7, #4
 8000a18:	220f      	movs	r2, #15
 8000a1a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a1c:	1d3b      	adds	r3, r7, #4
 8000a1e:	2203      	movs	r2, #3
 8000a20:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000a22:	1d3b      	adds	r3, r7, #4
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000a28:	1d3b      	adds	r3, r7, #4
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000a2e:	1d3b      	adds	r3, r7, #4
 8000a30:	2200      	movs	r2, #0
 8000a32:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000a34:	1d3b      	adds	r3, r7, #4
 8000a36:	2101      	movs	r1, #1
 8000a38:	0018      	movs	r0, r3
 8000a3a:	f001 fb11 	bl	8002060 <HAL_RCC_ClockConfig>
 8000a3e:	1e03      	subs	r3, r0, #0
 8000a40:	d001      	beq.n	8000a46 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000a42:	f000 f8fb 	bl	8000c3c <Error_Handler>
  }
}
 8000a46:	46c0      	nop			; (mov r8, r8)
 8000a48:	46bd      	mov	sp, r7
 8000a4a:	b015      	add	sp, #84	; 0x54
 8000a4c:	bd90      	pop	{r4, r7, pc}
 8000a4e:	46c0      	nop			; (mov r8, r8)
 8000a50:	40007000 	.word	0x40007000
 8000a54:	ffffe7ff 	.word	0xffffe7ff

08000a58 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a5c:	4b18      	ldr	r3, [pc, #96]	; (8000ac0 <MX_SPI2_Init+0x68>)
 8000a5e:	4a19      	ldr	r2, [pc, #100]	; (8000ac4 <MX_SPI2_Init+0x6c>)
 8000a60:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a62:	4b17      	ldr	r3, [pc, #92]	; (8000ac0 <MX_SPI2_Init+0x68>)
 8000a64:	2282      	movs	r2, #130	; 0x82
 8000a66:	0052      	lsls	r2, r2, #1
 8000a68:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000a6a:	4b15      	ldr	r3, [pc, #84]	; (8000ac0 <MX_SPI2_Init+0x68>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a70:	4b13      	ldr	r3, [pc, #76]	; (8000ac0 <MX_SPI2_Init+0x68>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_HIGH;
 8000a76:	4b12      	ldr	r3, [pc, #72]	; (8000ac0 <MX_SPI2_Init+0x68>)
 8000a78:	2202      	movs	r2, #2
 8000a7a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000a7c:	4b10      	ldr	r3, [pc, #64]	; (8000ac0 <MX_SPI2_Init+0x68>)
 8000a7e:	2201      	movs	r2, #1
 8000a80:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a82:	4b0f      	ldr	r3, [pc, #60]	; (8000ac0 <MX_SPI2_Init+0x68>)
 8000a84:	2280      	movs	r2, #128	; 0x80
 8000a86:	0092      	lsls	r2, r2, #2
 8000a88:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_64;
 8000a8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ac0 <MX_SPI2_Init+0x68>)
 8000a8c:	2228      	movs	r2, #40	; 0x28
 8000a8e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a90:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <MX_SPI2_Init+0x68>)
 8000a92:	2200      	movs	r2, #0
 8000a94:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a96:	4b0a      	ldr	r3, [pc, #40]	; (8000ac0 <MX_SPI2_Init+0x68>)
 8000a98:	2200      	movs	r2, #0
 8000a9a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a9c:	4b08      	ldr	r3, [pc, #32]	; (8000ac0 <MX_SPI2_Init+0x68>)
 8000a9e:	2200      	movs	r2, #0
 8000aa0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 8000aa2:	4b07      	ldr	r3, [pc, #28]	; (8000ac0 <MX_SPI2_Init+0x68>)
 8000aa4:	2207      	movs	r2, #7
 8000aa6:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000aa8:	4b05      	ldr	r3, [pc, #20]	; (8000ac0 <MX_SPI2_Init+0x68>)
 8000aaa:	0018      	movs	r0, r3
 8000aac:	f001 fcc6 	bl	800243c <HAL_SPI_Init>
 8000ab0:	1e03      	subs	r3, r0, #0
 8000ab2:	d001      	beq.n	8000ab8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000ab4:	f000 f8c2 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000ab8:	46c0      	nop			; (mov r8, r8)
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	46c0      	nop			; (mov r8, r8)
 8000ac0:	20000074 	.word	0x20000074
 8000ac4:	40003800 	.word	0x40003800

08000ac8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ace:	003b      	movs	r3, r7
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	2308      	movs	r3, #8
 8000ad4:	001a      	movs	r2, r3
 8000ad6:	2100      	movs	r1, #0
 8000ad8:	f002 fdf6 	bl	80036c8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8000adc:	4b15      	ldr	r3, [pc, #84]	; (8000b34 <MX_TIM6_Init+0x6c>)
 8000ade:	4a16      	ldr	r2, [pc, #88]	; (8000b38 <MX_TIM6_Init+0x70>)
 8000ae0:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 32;
 8000ae2:	4b14      	ldr	r3, [pc, #80]	; (8000b34 <MX_TIM6_Init+0x6c>)
 8000ae4:	2220      	movs	r2, #32
 8000ae6:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ae8:	4b12      	ldr	r3, [pc, #72]	; (8000b34 <MX_TIM6_Init+0x6c>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 99;
 8000aee:	4b11      	ldr	r3, [pc, #68]	; (8000b34 <MX_TIM6_Init+0x6c>)
 8000af0:	2263      	movs	r2, #99	; 0x63
 8000af2:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000af4:	4b0f      	ldr	r3, [pc, #60]	; (8000b34 <MX_TIM6_Init+0x6c>)
 8000af6:	2280      	movs	r2, #128	; 0x80
 8000af8:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8000afa:	4b0e      	ldr	r3, [pc, #56]	; (8000b34 <MX_TIM6_Init+0x6c>)
 8000afc:	0018      	movs	r0, r3
 8000afe:	f002 fbc3 	bl	8003288 <HAL_TIM_Base_Init>
 8000b02:	1e03      	subs	r3, r0, #0
 8000b04:	d001      	beq.n	8000b0a <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 8000b06:	f000 f899 	bl	8000c3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b0a:	003b      	movs	r3, r7
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b10:	003b      	movs	r3, r7
 8000b12:	2200      	movs	r2, #0
 8000b14:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8000b16:	003a      	movs	r2, r7
 8000b18:	4b06      	ldr	r3, [pc, #24]	; (8000b34 <MX_TIM6_Init+0x6c>)
 8000b1a:	0011      	movs	r1, r2
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f002 fd57 	bl	80035d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000b22:	1e03      	subs	r3, r0, #0
 8000b24:	d001      	beq.n	8000b2a <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 8000b26:	f000 f889 	bl	8000c3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8000b2a:	46c0      	nop			; (mov r8, r8)
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	b002      	add	sp, #8
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	46c0      	nop			; (mov r8, r8)
 8000b34:	2000015c 	.word	0x2000015c
 8000b38:	40001000 	.word	0x40001000

08000b3c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000b3c:	b580      	push	{r7, lr}
 8000b3e:	b082      	sub	sp, #8
 8000b40:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000b42:	4b0c      	ldr	r3, [pc, #48]	; (8000b74 <MX_DMA_Init+0x38>)
 8000b44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000b46:	4b0b      	ldr	r3, [pc, #44]	; (8000b74 <MX_DMA_Init+0x38>)
 8000b48:	2101      	movs	r1, #1
 8000b4a:	430a      	orrs	r2, r1
 8000b4c:	631a      	str	r2, [r3, #48]	; 0x30
 8000b4e:	4b09      	ldr	r3, [pc, #36]	; (8000b74 <MX_DMA_Init+0x38>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b52:	2201      	movs	r2, #1
 8000b54:	4013      	ands	r3, r2
 8000b56:	607b      	str	r3, [r7, #4]
 8000b58:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 0, 0);
 8000b5a:	2200      	movs	r2, #0
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	200b      	movs	r0, #11
 8000b60:	f000 fb16 	bl	8001190 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 8000b64:	200b      	movs	r0, #11
 8000b66:	f000 fb28 	bl	80011ba <HAL_NVIC_EnableIRQ>

}
 8000b6a:	46c0      	nop			; (mov r8, r8)
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	b002      	add	sp, #8
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	46c0      	nop			; (mov r8, r8)
 8000b74:	40021000 	.word	0x40021000

08000b78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b78:	b590      	push	{r4, r7, lr}
 8000b7a:	b089      	sub	sp, #36	; 0x24
 8000b7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b7e:	240c      	movs	r4, #12
 8000b80:	193b      	adds	r3, r7, r4
 8000b82:	0018      	movs	r0, r3
 8000b84:	2314      	movs	r3, #20
 8000b86:	001a      	movs	r2, r3
 8000b88:	2100      	movs	r1, #0
 8000b8a:	f002 fd9d 	bl	80036c8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b8e:	4b29      	ldr	r3, [pc, #164]	; (8000c34 <MX_GPIO_Init+0xbc>)
 8000b90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000b92:	4b28      	ldr	r3, [pc, #160]	; (8000c34 <MX_GPIO_Init+0xbc>)
 8000b94:	2102      	movs	r1, #2
 8000b96:	430a      	orrs	r2, r1
 8000b98:	62da      	str	r2, [r3, #44]	; 0x2c
 8000b9a:	4b26      	ldr	r3, [pc, #152]	; (8000c34 <MX_GPIO_Init+0xbc>)
 8000b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000b9e:	2202      	movs	r2, #2
 8000ba0:	4013      	ands	r3, r2
 8000ba2:	60bb      	str	r3, [r7, #8]
 8000ba4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba6:	4b23      	ldr	r3, [pc, #140]	; (8000c34 <MX_GPIO_Init+0xbc>)
 8000ba8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000baa:	4b22      	ldr	r3, [pc, #136]	; (8000c34 <MX_GPIO_Init+0xbc>)
 8000bac:	2101      	movs	r1, #1
 8000bae:	430a      	orrs	r2, r1
 8000bb0:	62da      	str	r2, [r3, #44]	; 0x2c
 8000bb2:	4b20      	ldr	r3, [pc, #128]	; (8000c34 <MX_GPIO_Init+0xbc>)
 8000bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4013      	ands	r3, r2
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SS2_GPIO_Port, SS2_Pin, GPIO_PIN_RESET);
 8000bbe:	2380      	movs	r3, #128	; 0x80
 8000bc0:	015b      	lsls	r3, r3, #5
 8000bc2:	481d      	ldr	r0, [pc, #116]	; (8000c38 <MX_GPIO_Init+0xc0>)
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	0019      	movs	r1, r3
 8000bc8:	f000 fdf8 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin, GPIO_PIN_RESET);
 8000bcc:	23f0      	movs	r3, #240	; 0xf0
 8000bce:	0119      	lsls	r1, r3, #4
 8000bd0:	23a0      	movs	r3, #160	; 0xa0
 8000bd2:	05db      	lsls	r3, r3, #23
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	0018      	movs	r0, r3
 8000bd8:	f000 fdf0 	bl	80017bc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : SS2_Pin */
  GPIO_InitStruct.Pin = SS2_Pin;
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	2280      	movs	r2, #128	; 0x80
 8000be0:	0152      	lsls	r2, r2, #5
 8000be2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be4:	193b      	adds	r3, r7, r4
 8000be6:	2201      	movs	r2, #1
 8000be8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2200      	movs	r2, #0
 8000bee:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(SS2_GPIO_Port, &GPIO_InitStruct);
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	4a0f      	ldr	r2, [pc, #60]	; (8000c38 <MX_GPIO_Init+0xc0>)
 8000bfa:	0019      	movs	r1, r3
 8000bfc:	0010      	movs	r0, r2
 8000bfe:	f000 fc67 	bl	80014d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED1_Pin LED2_Pin LED3_Pin LED4_Pin */
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin|LED3_Pin|LED4_Pin;
 8000c02:	0021      	movs	r1, r4
 8000c04:	187b      	adds	r3, r7, r1
 8000c06:	22f0      	movs	r2, #240	; 0xf0
 8000c08:	0112      	lsls	r2, r2, #4
 8000c0a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c0c:	187b      	adds	r3, r7, r1
 8000c0e:	2201      	movs	r2, #1
 8000c10:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c12:	187b      	adds	r3, r7, r1
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c18:	187b      	adds	r3, r7, r1
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c1e:	187a      	adds	r2, r7, r1
 8000c20:	23a0      	movs	r3, #160	; 0xa0
 8000c22:	05db      	lsls	r3, r3, #23
 8000c24:	0011      	movs	r1, r2
 8000c26:	0018      	movs	r0, r3
 8000c28:	f000 fc52 	bl	80014d0 <HAL_GPIO_Init>

}
 8000c2c:	46c0      	nop			; (mov r8, r8)
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	b009      	add	sp, #36	; 0x24
 8000c32:	bd90      	pop	{r4, r7, pc}
 8000c34:	40021000 	.word	0x40021000
 8000c38:	50000400 	.word	0x50000400

08000c3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c40:	b672      	cpsid	i
}
 8000c42:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8000c44:	e7fe      	b.n	8000c44 <Error_Handler+0x8>
	...

08000c48 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b082      	sub	sp, #8
 8000c4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */
  PWR_PVDTypeDef sConfigPVD = {0};
 8000c4e:	003b      	movs	r3, r7
 8000c50:	0018      	movs	r0, r3
 8000c52:	2308      	movs	r3, #8
 8000c54:	001a      	movs	r2, r3
 8000c56:	2100      	movs	r1, #0
 8000c58:	f002 fd36 	bl	80036c8 <memset>

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c5c:	4b0e      	ldr	r3, [pc, #56]	; (8000c98 <HAL_MspInit+0x50>)
 8000c5e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c60:	4b0d      	ldr	r3, [pc, #52]	; (8000c98 <HAL_MspInit+0x50>)
 8000c62:	2101      	movs	r1, #1
 8000c64:	430a      	orrs	r2, r1
 8000c66:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c68:	4b0b      	ldr	r3, [pc, #44]	; (8000c98 <HAL_MspInit+0x50>)
 8000c6a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	; (8000c98 <HAL_MspInit+0x50>)
 8000c6e:	2180      	movs	r1, #128	; 0x80
 8000c70:	0549      	lsls	r1, r1, #21
 8000c72:	430a      	orrs	r2, r1
 8000c74:	639a      	str	r2, [r3, #56]	; 0x38

  /* System interrupt init*/

  /** PVD Configuration
  */
  sConfigPVD.PVDLevel = PWR_PVDLEVEL_0;
 8000c76:	003b      	movs	r3, r7
 8000c78:	2200      	movs	r2, #0
 8000c7a:	601a      	str	r2, [r3, #0]
  sConfigPVD.Mode = PWR_PVD_MODE_NORMAL;
 8000c7c:	003b      	movs	r3, r7
 8000c7e:	2200      	movs	r2, #0
 8000c80:	605a      	str	r2, [r3, #4]
  HAL_PWR_ConfigPVD(&sConfigPVD);
 8000c82:	003b      	movs	r3, r7
 8000c84:	0018      	movs	r0, r3
 8000c86:	f000 fdb7 	bl	80017f8 <HAL_PWR_ConfigPVD>
  /** Enable the PVD Output
  */
  HAL_PWR_EnablePVD();
 8000c8a:	f000 fe17 	bl	80018bc <HAL_PWR_EnablePVD>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c8e:	46c0      	nop			; (mov r8, r8)
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b002      	add	sp, #8
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	46c0      	nop			; (mov r8, r8)
 8000c98:	40021000 	.word	0x40021000

08000c9c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000c9c:	b590      	push	{r4, r7, lr}
 8000c9e:	b089      	sub	sp, #36	; 0x24
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	240c      	movs	r4, #12
 8000ca6:	193b      	adds	r3, r7, r4
 8000ca8:	0018      	movs	r0, r3
 8000caa:	2314      	movs	r3, #20
 8000cac:	001a      	movs	r2, r3
 8000cae:	2100      	movs	r1, #0
 8000cb0:	f002 fd0a 	bl	80036c8 <memset>
  if(hspi->Instance==SPI2)
 8000cb4:	687b      	ldr	r3, [r7, #4]
 8000cb6:	681b      	ldr	r3, [r3, #0]
 8000cb8:	4a45      	ldr	r2, [pc, #276]	; (8000dd0 <HAL_SPI_MspInit+0x134>)
 8000cba:	4293      	cmp	r3, r2
 8000cbc:	d000      	beq.n	8000cc0 <HAL_SPI_MspInit+0x24>
 8000cbe:	e083      	b.n	8000dc8 <HAL_SPI_MspInit+0x12c>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000cc0:	4b44      	ldr	r3, [pc, #272]	; (8000dd4 <HAL_SPI_MspInit+0x138>)
 8000cc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000cc4:	4b43      	ldr	r3, [pc, #268]	; (8000dd4 <HAL_SPI_MspInit+0x138>)
 8000cc6:	2180      	movs	r1, #128	; 0x80
 8000cc8:	01c9      	lsls	r1, r1, #7
 8000cca:	430a      	orrs	r2, r1
 8000ccc:	639a      	str	r2, [r3, #56]	; 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cce:	4b41      	ldr	r3, [pc, #260]	; (8000dd4 <HAL_SPI_MspInit+0x138>)
 8000cd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000cd2:	4b40      	ldr	r3, [pc, #256]	; (8000dd4 <HAL_SPI_MspInit+0x138>)
 8000cd4:	2102      	movs	r1, #2
 8000cd6:	430a      	orrs	r2, r1
 8000cd8:	62da      	str	r2, [r3, #44]	; 0x2c
 8000cda:	4b3e      	ldr	r3, [pc, #248]	; (8000dd4 <HAL_SPI_MspInit+0x138>)
 8000cdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cde:	2202      	movs	r2, #2
 8000ce0:	4013      	ands	r3, r2
 8000ce2:	60bb      	str	r3, [r7, #8]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PB13     ------> SPI2_SCK
    PB14     ------> SPI2_MISO
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000ce6:	193b      	adds	r3, r7, r4
 8000ce8:	22e0      	movs	r2, #224	; 0xe0
 8000cea:	0212      	lsls	r2, r2, #8
 8000cec:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cee:	0021      	movs	r1, r4
 8000cf0:	187b      	adds	r3, r7, r1
 8000cf2:	2202      	movs	r2, #2
 8000cf4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	187b      	adds	r3, r7, r1
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000cfc:	187b      	adds	r3, r7, r1
 8000cfe:	2203      	movs	r2, #3
 8000d00:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8000d02:	187b      	adds	r3, r7, r1
 8000d04:	2200      	movs	r2, #0
 8000d06:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d08:	187b      	adds	r3, r7, r1
 8000d0a:	4a33      	ldr	r2, [pc, #204]	; (8000dd8 <HAL_SPI_MspInit+0x13c>)
 8000d0c:	0019      	movs	r1, r3
 8000d0e:	0010      	movs	r0, r2
 8000d10:	f000 fbde 	bl	80014d0 <HAL_GPIO_Init>

    /* SPI2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8000d14:	4b31      	ldr	r3, [pc, #196]	; (8000ddc <HAL_SPI_MspInit+0x140>)
 8000d16:	4a32      	ldr	r2, [pc, #200]	; (8000de0 <HAL_SPI_MspInit+0x144>)
 8000d18:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8000d1a:	4b30      	ldr	r3, [pc, #192]	; (8000ddc <HAL_SPI_MspInit+0x140>)
 8000d1c:	2202      	movs	r2, #2
 8000d1e:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d20:	4b2e      	ldr	r3, [pc, #184]	; (8000ddc <HAL_SPI_MspInit+0x140>)
 8000d22:	2200      	movs	r2, #0
 8000d24:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d26:	4b2d      	ldr	r3, [pc, #180]	; (8000ddc <HAL_SPI_MspInit+0x140>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000d2c:	4b2b      	ldr	r3, [pc, #172]	; (8000ddc <HAL_SPI_MspInit+0x140>)
 8000d2e:	2280      	movs	r2, #128	; 0x80
 8000d30:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d32:	4b2a      	ldr	r3, [pc, #168]	; (8000ddc <HAL_SPI_MspInit+0x140>)
 8000d34:	2200      	movs	r2, #0
 8000d36:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d38:	4b28      	ldr	r3, [pc, #160]	; (8000ddc <HAL_SPI_MspInit+0x140>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8000d3e:	4b27      	ldr	r3, [pc, #156]	; (8000ddc <HAL_SPI_MspInit+0x140>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000d44:	4b25      	ldr	r3, [pc, #148]	; (8000ddc <HAL_SPI_MspInit+0x140>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8000d4a:	4b24      	ldr	r3, [pc, #144]	; (8000ddc <HAL_SPI_MspInit+0x140>)
 8000d4c:	0018      	movs	r0, r3
 8000d4e:	f000 fa51 	bl	80011f4 <HAL_DMA_Init>
 8000d52:	1e03      	subs	r3, r0, #0
 8000d54:	d001      	beq.n	8000d5a <HAL_SPI_MspInit+0xbe>
    {
      Error_Handler();
 8000d56:	f7ff ff71 	bl	8000c3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi2_rx);
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	4a1f      	ldr	r2, [pc, #124]	; (8000ddc <HAL_SPI_MspInit+0x140>)
 8000d5e:	64da      	str	r2, [r3, #76]	; 0x4c
 8000d60:	4b1e      	ldr	r3, [pc, #120]	; (8000ddc <HAL_SPI_MspInit+0x140>)
 8000d62:	687a      	ldr	r2, [r7, #4]
 8000d64:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Channel5;
 8000d66:	4b1f      	ldr	r3, [pc, #124]	; (8000de4 <HAL_SPI_MspInit+0x148>)
 8000d68:	4a1f      	ldr	r2, [pc, #124]	; (8000de8 <HAL_SPI_MspInit+0x14c>)
 8000d6a:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Request = DMA_REQUEST_2;
 8000d6c:	4b1d      	ldr	r3, [pc, #116]	; (8000de4 <HAL_SPI_MspInit+0x148>)
 8000d6e:	2202      	movs	r2, #2
 8000d70:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000d72:	4b1c      	ldr	r3, [pc, #112]	; (8000de4 <HAL_SPI_MspInit+0x148>)
 8000d74:	2210      	movs	r2, #16
 8000d76:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d78:	4b1a      	ldr	r3, [pc, #104]	; (8000de4 <HAL_SPI_MspInit+0x148>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000d7e:	4b19      	ldr	r3, [pc, #100]	; (8000de4 <HAL_SPI_MspInit+0x148>)
 8000d80:	2280      	movs	r2, #128	; 0x80
 8000d82:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000d84:	4b17      	ldr	r3, [pc, #92]	; (8000de4 <HAL_SPI_MspInit+0x148>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <HAL_SPI_MspInit+0x148>)
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_NORMAL;
 8000d90:	4b14      	ldr	r3, [pc, #80]	; (8000de4 <HAL_SPI_MspInit+0x148>)
 8000d92:	2200      	movs	r2, #0
 8000d94:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000d96:	4b13      	ldr	r3, [pc, #76]	; (8000de4 <HAL_SPI_MspInit+0x148>)
 8000d98:	2200      	movs	r2, #0
 8000d9a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8000d9c:	4b11      	ldr	r3, [pc, #68]	; (8000de4 <HAL_SPI_MspInit+0x148>)
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f000 fa28 	bl	80011f4 <HAL_DMA_Init>
 8000da4:	1e03      	subs	r3, r0, #0
 8000da6:	d001      	beq.n	8000dac <HAL_SPI_MspInit+0x110>
    {
      Error_Handler();
 8000da8:	f7ff ff48 	bl	8000c3c <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmatx,hdma_spi2_tx);
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	4a0d      	ldr	r2, [pc, #52]	; (8000de4 <HAL_SPI_MspInit+0x148>)
 8000db0:	649a      	str	r2, [r3, #72]	; 0x48
 8000db2:	4b0c      	ldr	r3, [pc, #48]	; (8000de4 <HAL_SPI_MspInit+0x148>)
 8000db4:	687a      	ldr	r2, [r7, #4]
 8000db6:	629a      	str	r2, [r3, #40]	; 0x28

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8000db8:	2200      	movs	r2, #0
 8000dba:	2100      	movs	r1, #0
 8000dbc:	201a      	movs	r0, #26
 8000dbe:	f000 f9e7 	bl	8001190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8000dc2:	201a      	movs	r0, #26
 8000dc4:	f000 f9f9 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000dc8:	46c0      	nop			; (mov r8, r8)
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	b009      	add	sp, #36	; 0x24
 8000dce:	bd90      	pop	{r4, r7, pc}
 8000dd0:	40003800 	.word	0x40003800
 8000dd4:	40021000 	.word	0x40021000
 8000dd8:	50000400 	.word	0x50000400
 8000ddc:	200000cc 	.word	0x200000cc
 8000de0:	40020044 	.word	0x40020044
 8000de4:	20000114 	.word	0x20000114
 8000de8:	40020058 	.word	0x40020058

08000dec <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a0a      	ldr	r2, [pc, #40]	; (8000e24 <HAL_TIM_Base_MspInit+0x38>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d10d      	bne.n	8000e1a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8000dfe:	4b0a      	ldr	r3, [pc, #40]	; (8000e28 <HAL_TIM_Base_MspInit+0x3c>)
 8000e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8000e02:	4b09      	ldr	r3, [pc, #36]	; (8000e28 <HAL_TIM_Base_MspInit+0x3c>)
 8000e04:	2110      	movs	r1, #16
 8000e06:	430a      	orrs	r2, r1
 8000e08:	639a      	str	r2, [r3, #56]	; 0x38
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	2011      	movs	r0, #17
 8000e10:	f000 f9be 	bl	8001190 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000e14:	2011      	movs	r0, #17
 8000e16:	f000 f9d0 	bl	80011ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8000e1a:	46c0      	nop			; (mov r8, r8)
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	b002      	add	sp, #8
 8000e20:	bd80      	pop	{r7, pc}
 8000e22:	46c0      	nop			; (mov r8, r8)
 8000e24:	40001000 	.word	0x40001000
 8000e28:	40021000 	.word	0x40021000

08000e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <NMI_Handler+0x4>

08000e32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e32:	b580      	push	{r7, lr}
 8000e34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e36:	e7fe      	b.n	8000e36 <HardFault_Handler+0x4>

08000e38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000e3c:	46c0      	nop			; (mov r8, r8)
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}

08000e42 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e42:	b580      	push	{r7, lr}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f000 f8b2 	bl	8000fb8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	46c0      	nop			; (mov r8, r8)
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bd80      	pop	{r7, pc}
	...

08000e5c <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <DMA1_Channel4_5_6_7_IRQHandler+0x1c>)
 8000e62:	0018      	movs	r0, r3
 8000e64:	f000 fa85 	bl	8001372 <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8000e68:	4b04      	ldr	r3, [pc, #16]	; (8000e7c <DMA1_Channel4_5_6_7_IRQHandler+0x20>)
 8000e6a:	0018      	movs	r0, r3
 8000e6c:	f000 fa81 	bl	8001372 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 8000e70:	46c0      	nop			; (mov r8, r8)
 8000e72:	46bd      	mov	sp, r7
 8000e74:	bd80      	pop	{r7, pc}
 8000e76:	46c0      	nop			; (mov r8, r8)
 8000e78:	200000cc 	.word	0x200000cc
 8000e7c:	20000114 	.word	0x20000114

08000e80 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1/DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <TIM6_DAC_IRQHandler+0x14>)
 8000e86:	0018      	movs	r0, r3
 8000e88:	f002 fa3e 	bl	8003308 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e8c:	46c0      	nop			; (mov r8, r8)
 8000e8e:	46bd      	mov	sp, r7
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	46c0      	nop			; (mov r8, r8)
 8000e94:	2000015c 	.word	0x2000015c

08000e98 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8000e9c:	4b03      	ldr	r3, [pc, #12]	; (8000eac <SPI2_IRQHandler+0x14>)
 8000e9e:	0018      	movs	r0, r3
 8000ea0:	f001 ff98 	bl	8002dd4 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8000ea4:	46c0      	nop			; (mov r8, r8)
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	46c0      	nop			; (mov r8, r8)
 8000eac:	20000074 	.word	0x20000074

08000eb0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000eb4:	46c0      	nop			; (mov r8, r8)
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
	...

08000ebc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   r0, =_estack
 8000ebc:	480d      	ldr	r0, [pc, #52]	; (8000ef4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000ebe:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ec0:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000ec2:	490e      	ldr	r1, [pc, #56]	; (8000efc <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ec4:	4a0e      	ldr	r2, [pc, #56]	; (8000f00 <LoopForever+0xe>)
  movs r3, #0
 8000ec6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ec8:	e002      	b.n	8000ed0 <LoopCopyDataInit>

08000eca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ecc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ece:	3304      	adds	r3, #4

08000ed0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ed0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ed2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ed4:	d3f9      	bcc.n	8000eca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ed6:	4a0b      	ldr	r2, [pc, #44]	; (8000f04 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ed8:	4c0b      	ldr	r4, [pc, #44]	; (8000f08 <LoopForever+0x16>)
  movs r3, #0
 8000eda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000edc:	e001      	b.n	8000ee2 <LoopFillZerobss>

08000ede <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ede:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ee0:	3204      	adds	r2, #4

08000ee2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ee2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ee4:	d3fb      	bcc.n	8000ede <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000ee6:	f7ff ffe3 	bl	8000eb0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000eea:	f002 fbc9 	bl	8003680 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000eee:	f7ff fd31 	bl	8000954 <main>

08000ef2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ef2:	e7fe      	b.n	8000ef2 <LoopForever>
  ldr   r0, =_estack
 8000ef4:	20002000 	.word	0x20002000
  ldr r0, =_sdata
 8000ef8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000efc:	20000050 	.word	0x20000050
  ldr r2, =_sidata
 8000f00:	0800371c 	.word	0x0800371c
  ldr r2, =_sbss
 8000f04:	20000050 	.word	0x20000050
  ldr r4, =_ebss
 8000f08:	200001a8 	.word	0x200001a8

08000f0c <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f0c:	e7fe      	b.n	8000f0c <ADC1_COMP_IRQHandler>
	...

08000f10 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	2200      	movs	r2, #0
 8000f1a:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 8000f1c:	4b0b      	ldr	r3, [pc, #44]	; (8000f4c <HAL_Init+0x3c>)
 8000f1e:	681a      	ldr	r2, [r3, #0]
 8000f20:	4b0a      	ldr	r3, [pc, #40]	; (8000f4c <HAL_Init+0x3c>)
 8000f22:	2140      	movs	r1, #64	; 0x40
 8000f24:	430a      	orrs	r2, r1
 8000f26:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f28:	2003      	movs	r0, #3
 8000f2a:	f000 f811 	bl	8000f50 <HAL_InitTick>
 8000f2e:	1e03      	subs	r3, r0, #0
 8000f30:	d003      	beq.n	8000f3a <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 8000f32:	1dfb      	adds	r3, r7, #7
 8000f34:	2201      	movs	r2, #1
 8000f36:	701a      	strb	r2, [r3, #0]
 8000f38:	e001      	b.n	8000f3e <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f3a:	f7ff fe85 	bl	8000c48 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f3e:	1dfb      	adds	r3, r7, #7
 8000f40:	781b      	ldrb	r3, [r3, #0]
}
 8000f42:	0018      	movs	r0, r3
 8000f44:	46bd      	mov	sp, r7
 8000f46:	b002      	add	sp, #8
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	46c0      	nop			; (mov r8, r8)
 8000f4c:	40022000 	.word	0x40022000

08000f50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f50:	b590      	push	{r4, r7, lr}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f58:	4b14      	ldr	r3, [pc, #80]	; (8000fac <HAL_InitTick+0x5c>)
 8000f5a:	681c      	ldr	r4, [r3, #0]
 8000f5c:	4b14      	ldr	r3, [pc, #80]	; (8000fb0 <HAL_InitTick+0x60>)
 8000f5e:	781b      	ldrb	r3, [r3, #0]
 8000f60:	0019      	movs	r1, r3
 8000f62:	23fa      	movs	r3, #250	; 0xfa
 8000f64:	0098      	lsls	r0, r3, #2
 8000f66:	f7ff f8cf 	bl	8000108 <__udivsi3>
 8000f6a:	0003      	movs	r3, r0
 8000f6c:	0019      	movs	r1, r3
 8000f6e:	0020      	movs	r0, r4
 8000f70:	f7ff f8ca 	bl	8000108 <__udivsi3>
 8000f74:	0003      	movs	r3, r0
 8000f76:	0018      	movs	r0, r3
 8000f78:	f000 f92f 	bl	80011da <HAL_SYSTICK_Config>
 8000f7c:	1e03      	subs	r3, r0, #0
 8000f7e:	d001      	beq.n	8000f84 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8000f80:	2301      	movs	r3, #1
 8000f82:	e00f      	b.n	8000fa4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b03      	cmp	r3, #3
 8000f88:	d80b      	bhi.n	8000fa2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f8a:	6879      	ldr	r1, [r7, #4]
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	425b      	negs	r3, r3
 8000f90:	2200      	movs	r2, #0
 8000f92:	0018      	movs	r0, r3
 8000f94:	f000 f8fc 	bl	8001190 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <HAL_InitTick+0x64>)
 8000f9a:	687a      	ldr	r2, [r7, #4]
 8000f9c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	e000      	b.n	8000fa4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8000fa2:	2301      	movs	r3, #1
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b003      	add	sp, #12
 8000faa:	bd90      	pop	{r4, r7, pc}
 8000fac:	20000044 	.word	0x20000044
 8000fb0:	2000004c 	.word	0x2000004c
 8000fb4:	20000048 	.word	0x20000048

08000fb8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <HAL_IncTick+0x1c>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	001a      	movs	r2, r3
 8000fc2:	4b05      	ldr	r3, [pc, #20]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	18d2      	adds	r2, r2, r3
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_IncTick+0x20>)
 8000fca:	601a      	str	r2, [r3, #0]
}
 8000fcc:	46c0      	nop			; (mov r8, r8)
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}
 8000fd2:	46c0      	nop			; (mov r8, r8)
 8000fd4:	2000004c 	.word	0x2000004c
 8000fd8:	200001a4 	.word	0x200001a4

08000fdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	af00      	add	r7, sp, #0
  return uwTick;
 8000fe0:	4b02      	ldr	r3, [pc, #8]	; (8000fec <HAL_GetTick+0x10>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
}
 8000fe4:	0018      	movs	r0, r3
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	46c0      	nop			; (mov r8, r8)
 8000fec:	200001a4 	.word	0x200001a4

08000ff0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000ff8:	f7ff fff0 	bl	8000fdc <HAL_GetTick>
 8000ffc:	0003      	movs	r3, r0
 8000ffe:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	3301      	adds	r3, #1
 8001008:	d005      	beq.n	8001016 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800100a:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <HAL_Delay+0x44>)
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	001a      	movs	r2, r3
 8001010:	68fb      	ldr	r3, [r7, #12]
 8001012:	189b      	adds	r3, r3, r2
 8001014:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001016:	46c0      	nop			; (mov r8, r8)
 8001018:	f7ff ffe0 	bl	8000fdc <HAL_GetTick>
 800101c:	0002      	movs	r2, r0
 800101e:	68bb      	ldr	r3, [r7, #8]
 8001020:	1ad3      	subs	r3, r2, r3
 8001022:	68fa      	ldr	r2, [r7, #12]
 8001024:	429a      	cmp	r2, r3
 8001026:	d8f7      	bhi.n	8001018 <HAL_Delay+0x28>
  {
  }
}
 8001028:	46c0      	nop			; (mov r8, r8)
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	46bd      	mov	sp, r7
 800102e:	b004      	add	sp, #16
 8001030:	bd80      	pop	{r7, pc}
 8001032:	46c0      	nop			; (mov r8, r8)
 8001034:	2000004c 	.word	0x2000004c

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b082      	sub	sp, #8
 800103c:	af00      	add	r7, sp, #0
 800103e:	0002      	movs	r2, r0
 8001040:	1dfb      	adds	r3, r7, #7
 8001042:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001044:	1dfb      	adds	r3, r7, #7
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	2b7f      	cmp	r3, #127	; 0x7f
 800104a:	d809      	bhi.n	8001060 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104c:	1dfb      	adds	r3, r7, #7
 800104e:	781b      	ldrb	r3, [r3, #0]
 8001050:	001a      	movs	r2, r3
 8001052:	231f      	movs	r3, #31
 8001054:	401a      	ands	r2, r3
 8001056:	4b04      	ldr	r3, [pc, #16]	; (8001068 <__NVIC_EnableIRQ+0x30>)
 8001058:	2101      	movs	r1, #1
 800105a:	4091      	lsls	r1, r2
 800105c:	000a      	movs	r2, r1
 800105e:	601a      	str	r2, [r3, #0]
  }
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46bd      	mov	sp, r7
 8001064:	b002      	add	sp, #8
 8001066:	bd80      	pop	{r7, pc}
 8001068:	e000e100 	.word	0xe000e100

0800106c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800106c:	b590      	push	{r4, r7, lr}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	0002      	movs	r2, r0
 8001074:	6039      	str	r1, [r7, #0]
 8001076:	1dfb      	adds	r3, r7, #7
 8001078:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800107a:	1dfb      	adds	r3, r7, #7
 800107c:	781b      	ldrb	r3, [r3, #0]
 800107e:	2b7f      	cmp	r3, #127	; 0x7f
 8001080:	d828      	bhi.n	80010d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001082:	4a2f      	ldr	r2, [pc, #188]	; (8001140 <__NVIC_SetPriority+0xd4>)
 8001084:	1dfb      	adds	r3, r7, #7
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	b25b      	sxtb	r3, r3
 800108a:	089b      	lsrs	r3, r3, #2
 800108c:	33c0      	adds	r3, #192	; 0xc0
 800108e:	009b      	lsls	r3, r3, #2
 8001090:	589b      	ldr	r3, [r3, r2]
 8001092:	1dfa      	adds	r2, r7, #7
 8001094:	7812      	ldrb	r2, [r2, #0]
 8001096:	0011      	movs	r1, r2
 8001098:	2203      	movs	r2, #3
 800109a:	400a      	ands	r2, r1
 800109c:	00d2      	lsls	r2, r2, #3
 800109e:	21ff      	movs	r1, #255	; 0xff
 80010a0:	4091      	lsls	r1, r2
 80010a2:	000a      	movs	r2, r1
 80010a4:	43d2      	mvns	r2, r2
 80010a6:	401a      	ands	r2, r3
 80010a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	019b      	lsls	r3, r3, #6
 80010ae:	22ff      	movs	r2, #255	; 0xff
 80010b0:	401a      	ands	r2, r3
 80010b2:	1dfb      	adds	r3, r7, #7
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	0018      	movs	r0, r3
 80010b8:	2303      	movs	r3, #3
 80010ba:	4003      	ands	r3, r0
 80010bc:	00db      	lsls	r3, r3, #3
 80010be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010c0:	481f      	ldr	r0, [pc, #124]	; (8001140 <__NVIC_SetPriority+0xd4>)
 80010c2:	1dfb      	adds	r3, r7, #7
 80010c4:	781b      	ldrb	r3, [r3, #0]
 80010c6:	b25b      	sxtb	r3, r3
 80010c8:	089b      	lsrs	r3, r3, #2
 80010ca:	430a      	orrs	r2, r1
 80010cc:	33c0      	adds	r3, #192	; 0xc0
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80010d2:	e031      	b.n	8001138 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80010d4:	4a1b      	ldr	r2, [pc, #108]	; (8001144 <__NVIC_SetPriority+0xd8>)
 80010d6:	1dfb      	adds	r3, r7, #7
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	0019      	movs	r1, r3
 80010dc:	230f      	movs	r3, #15
 80010de:	400b      	ands	r3, r1
 80010e0:	3b08      	subs	r3, #8
 80010e2:	089b      	lsrs	r3, r3, #2
 80010e4:	3306      	adds	r3, #6
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	18d3      	adds	r3, r2, r3
 80010ea:	3304      	adds	r3, #4
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	1dfa      	adds	r2, r7, #7
 80010f0:	7812      	ldrb	r2, [r2, #0]
 80010f2:	0011      	movs	r1, r2
 80010f4:	2203      	movs	r2, #3
 80010f6:	400a      	ands	r2, r1
 80010f8:	00d2      	lsls	r2, r2, #3
 80010fa:	21ff      	movs	r1, #255	; 0xff
 80010fc:	4091      	lsls	r1, r2
 80010fe:	000a      	movs	r2, r1
 8001100:	43d2      	mvns	r2, r2
 8001102:	401a      	ands	r2, r3
 8001104:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	019b      	lsls	r3, r3, #6
 800110a:	22ff      	movs	r2, #255	; 0xff
 800110c:	401a      	ands	r2, r3
 800110e:	1dfb      	adds	r3, r7, #7
 8001110:	781b      	ldrb	r3, [r3, #0]
 8001112:	0018      	movs	r0, r3
 8001114:	2303      	movs	r3, #3
 8001116:	4003      	ands	r3, r0
 8001118:	00db      	lsls	r3, r3, #3
 800111a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800111c:	4809      	ldr	r0, [pc, #36]	; (8001144 <__NVIC_SetPriority+0xd8>)
 800111e:	1dfb      	adds	r3, r7, #7
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	001c      	movs	r4, r3
 8001124:	230f      	movs	r3, #15
 8001126:	4023      	ands	r3, r4
 8001128:	3b08      	subs	r3, #8
 800112a:	089b      	lsrs	r3, r3, #2
 800112c:	430a      	orrs	r2, r1
 800112e:	3306      	adds	r3, #6
 8001130:	009b      	lsls	r3, r3, #2
 8001132:	18c3      	adds	r3, r0, r3
 8001134:	3304      	adds	r3, #4
 8001136:	601a      	str	r2, [r3, #0]
}
 8001138:	46c0      	nop			; (mov r8, r8)
 800113a:	46bd      	mov	sp, r7
 800113c:	b003      	add	sp, #12
 800113e:	bd90      	pop	{r4, r7, pc}
 8001140:	e000e100 	.word	0xe000e100
 8001144:	e000ed00 	.word	0xe000ed00

08001148 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	1e5a      	subs	r2, r3, #1
 8001154:	2380      	movs	r3, #128	; 0x80
 8001156:	045b      	lsls	r3, r3, #17
 8001158:	429a      	cmp	r2, r3
 800115a:	d301      	bcc.n	8001160 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800115c:	2301      	movs	r3, #1
 800115e:	e010      	b.n	8001182 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001160:	4b0a      	ldr	r3, [pc, #40]	; (800118c <SysTick_Config+0x44>)
 8001162:	687a      	ldr	r2, [r7, #4]
 8001164:	3a01      	subs	r2, #1
 8001166:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001168:	2301      	movs	r3, #1
 800116a:	425b      	negs	r3, r3
 800116c:	2103      	movs	r1, #3
 800116e:	0018      	movs	r0, r3
 8001170:	f7ff ff7c 	bl	800106c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001174:	4b05      	ldr	r3, [pc, #20]	; (800118c <SysTick_Config+0x44>)
 8001176:	2200      	movs	r2, #0
 8001178:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800117a:	4b04      	ldr	r3, [pc, #16]	; (800118c <SysTick_Config+0x44>)
 800117c:	2207      	movs	r2, #7
 800117e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001180:	2300      	movs	r3, #0
}
 8001182:	0018      	movs	r0, r3
 8001184:	46bd      	mov	sp, r7
 8001186:	b002      	add	sp, #8
 8001188:	bd80      	pop	{r7, pc}
 800118a:	46c0      	nop			; (mov r8, r8)
 800118c:	e000e010 	.word	0xe000e010

08001190 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
 8001196:	60b9      	str	r1, [r7, #8]
 8001198:	607a      	str	r2, [r7, #4]
 800119a:	210f      	movs	r1, #15
 800119c:	187b      	adds	r3, r7, r1
 800119e:	1c02      	adds	r2, r0, #0
 80011a0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80011a2:	68ba      	ldr	r2, [r7, #8]
 80011a4:	187b      	adds	r3, r7, r1
 80011a6:	781b      	ldrb	r3, [r3, #0]
 80011a8:	b25b      	sxtb	r3, r3
 80011aa:	0011      	movs	r1, r2
 80011ac:	0018      	movs	r0, r3
 80011ae:	f7ff ff5d 	bl	800106c <__NVIC_SetPriority>
}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	46bd      	mov	sp, r7
 80011b6:	b004      	add	sp, #16
 80011b8:	bd80      	pop	{r7, pc}

080011ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ba:	b580      	push	{r7, lr}
 80011bc:	b082      	sub	sp, #8
 80011be:	af00      	add	r7, sp, #0
 80011c0:	0002      	movs	r2, r0
 80011c2:	1dfb      	adds	r3, r7, #7
 80011c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011c6:	1dfb      	adds	r3, r7, #7
 80011c8:	781b      	ldrb	r3, [r3, #0]
 80011ca:	b25b      	sxtb	r3, r3
 80011cc:	0018      	movs	r0, r3
 80011ce:	f7ff ff33 	bl	8001038 <__NVIC_EnableIRQ>
}
 80011d2:	46c0      	nop			; (mov r8, r8)
 80011d4:	46bd      	mov	sp, r7
 80011d6:	b002      	add	sp, #8
 80011d8:	bd80      	pop	{r7, pc}

080011da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011da:	b580      	push	{r7, lr}
 80011dc:	b082      	sub	sp, #8
 80011de:	af00      	add	r7, sp, #0
 80011e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	0018      	movs	r0, r3
 80011e6:	f7ff ffaf 	bl	8001148 <SysTick_Config>
 80011ea:	0003      	movs	r3, r0
}
 80011ec:	0018      	movs	r0, r3
 80011ee:	46bd      	mov	sp, r7
 80011f0:	b002      	add	sp, #8
 80011f2:	bd80      	pop	{r7, pc}

080011f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80011f4:	b580      	push	{r7, lr}
 80011f6:	b084      	sub	sp, #16
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d101      	bne.n	8001206 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	e061      	b.n	80012ca <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a32      	ldr	r2, [pc, #200]	; (80012d4 <HAL_DMA_Init+0xe0>)
 800120c:	4694      	mov	ip, r2
 800120e:	4463      	add	r3, ip
 8001210:	2114      	movs	r1, #20
 8001212:	0018      	movs	r0, r3
 8001214:	f7fe ff78 	bl	8000108 <__udivsi3>
 8001218:	0003      	movs	r3, r0
 800121a:	009a      	lsls	r2, r3, #2
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->DmaBaseAddress = DMA1;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	4a2d      	ldr	r2, [pc, #180]	; (80012d8 <HAL_DMA_Init+0xe4>)
 8001224:	641a      	str	r2, [r3, #64]	; 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	2225      	movs	r2, #37	; 0x25
 800122a:	2102      	movs	r1, #2
 800122c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	4a28      	ldr	r2, [pc, #160]	; (80012dc <HAL_DMA_Init+0xe8>)
 800123a:	4013      	ands	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8001246:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	691b      	ldr	r3, [r3, #16]
 800124c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001252:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800125e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	6a1b      	ldr	r3, [r3, #32]
 8001264:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001266:	68fa      	ldr	r2, [r7, #12]
 8001268:	4313      	orrs	r3, r2
 800126a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	68fa      	ldr	r2, [r7, #12]
 8001272:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689a      	ldr	r2, [r3, #8]
 8001278:	2380      	movs	r3, #128	; 0x80
 800127a:	01db      	lsls	r3, r3, #7
 800127c:	429a      	cmp	r2, r3
 800127e:	d018      	beq.n	80012b2 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <HAL_DMA_Init+0xec>)
 8001282:	681a      	ldr	r2, [r3, #0]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001288:	211c      	movs	r1, #28
 800128a:	400b      	ands	r3, r1
 800128c:	210f      	movs	r1, #15
 800128e:	4099      	lsls	r1, r3
 8001290:	000b      	movs	r3, r1
 8001292:	43d9      	mvns	r1, r3
 8001294:	4b12      	ldr	r3, [pc, #72]	; (80012e0 <HAL_DMA_Init+0xec>)
 8001296:	400a      	ands	r2, r1
 8001298:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800129a:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <HAL_DMA_Init+0xec>)
 800129c:	6819      	ldr	r1, [r3, #0]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	685a      	ldr	r2, [r3, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012a6:	201c      	movs	r0, #28
 80012a8:	4003      	ands	r3, r0
 80012aa:	409a      	lsls	r2, r3
 80012ac:	4b0c      	ldr	r3, [pc, #48]	; (80012e0 <HAL_DMA_Init+0xec>)
 80012ae:	430a      	orrs	r2, r1
 80012b0:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2225      	movs	r2, #37	; 0x25
 80012bc:	2101      	movs	r1, #1
 80012be:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2224      	movs	r2, #36	; 0x24
 80012c4:	2100      	movs	r1, #0
 80012c6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80012c8:	2300      	movs	r3, #0
}
 80012ca:	0018      	movs	r0, r3
 80012cc:	46bd      	mov	sp, r7
 80012ce:	b004      	add	sp, #16
 80012d0:	bd80      	pop	{r7, pc}
 80012d2:	46c0      	nop			; (mov r8, r8)
 80012d4:	bffdfff8 	.word	0xbffdfff8
 80012d8:	40020000 	.word	0x40020000
 80012dc:	ffff800f 	.word	0xffff800f
 80012e0:	400200a8 	.word	0x400200a8

080012e4 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012ec:	210f      	movs	r1, #15
 80012ee:	187b      	adds	r3, r7, r1
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2225      	movs	r2, #37	; 0x25
 80012f8:	5c9b      	ldrb	r3, [r3, r2]
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	2b02      	cmp	r3, #2
 80012fe:	d006      	beq.n	800130e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	2204      	movs	r2, #4
 8001304:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8001306:	187b      	adds	r3, r7, r1
 8001308:	2201      	movs	r2, #1
 800130a:	701a      	strb	r2, [r3, #0]
 800130c:	e02a      	b.n	8001364 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	681a      	ldr	r2, [r3, #0]
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	210e      	movs	r1, #14
 800131a:	438a      	bics	r2, r1
 800131c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	681a      	ldr	r2, [r3, #0]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	2101      	movs	r1, #1
 800132a:	438a      	bics	r2, r1
 800132c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001332:	221c      	movs	r2, #28
 8001334:	401a      	ands	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	2101      	movs	r1, #1
 800133c:	4091      	lsls	r1, r2
 800133e:	000a      	movs	r2, r1
 8001340:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	2225      	movs	r2, #37	; 0x25
 8001346:	2101      	movs	r1, #1
 8001348:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	2224      	movs	r2, #36	; 0x24
 800134e:	2100      	movs	r1, #0
 8001350:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001356:	2b00      	cmp	r3, #0
 8001358:	d004      	beq.n	8001364 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800135e:	687a      	ldr	r2, [r7, #4]
 8001360:	0010      	movs	r0, r2
 8001362:	4798      	blx	r3
    }
  }
  return status;
 8001364:	230f      	movs	r3, #15
 8001366:	18fb      	adds	r3, r7, r3
 8001368:	781b      	ldrb	r3, [r3, #0]
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b004      	add	sp, #16
 8001370:	bd80      	pop	{r7, pc}

08001372 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001372:	b580      	push	{r7, lr}
 8001374:	b084      	sub	sp, #16
 8001376:	af00      	add	r7, sp, #0
 8001378:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	681b      	ldr	r3, [r3, #0]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800138e:	221c      	movs	r2, #28
 8001390:	4013      	ands	r3, r2
 8001392:	2204      	movs	r2, #4
 8001394:	409a      	lsls	r2, r3
 8001396:	0013      	movs	r3, r2
 8001398:	68fa      	ldr	r2, [r7, #12]
 800139a:	4013      	ands	r3, r2
 800139c:	d026      	beq.n	80013ec <HAL_DMA_IRQHandler+0x7a>
 800139e:	68bb      	ldr	r3, [r7, #8]
 80013a0:	2204      	movs	r2, #4
 80013a2:	4013      	ands	r3, r2
 80013a4:	d022      	beq.n	80013ec <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	2220      	movs	r2, #32
 80013ae:	4013      	ands	r3, r2
 80013b0:	d107      	bne.n	80013c2 <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	681a      	ldr	r2, [r3, #0]
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2104      	movs	r1, #4
 80013be:	438a      	bics	r2, r1
 80013c0:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013c6:	221c      	movs	r2, #28
 80013c8:	401a      	ands	r2, r3
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013ce:	2104      	movs	r1, #4
 80013d0:	4091      	lsls	r1, r2
 80013d2:	000a      	movs	r2, r1
 80013d4:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d100      	bne.n	80013e0 <HAL_DMA_IRQHandler+0x6e>
 80013de:	e071      	b.n	80014c4 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e4:	687a      	ldr	r2, [r7, #4]
 80013e6:	0010      	movs	r0, r2
 80013e8:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 80013ea:	e06b      	b.n	80014c4 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f0:	221c      	movs	r2, #28
 80013f2:	4013      	ands	r3, r2
 80013f4:	2202      	movs	r2, #2
 80013f6:	409a      	lsls	r2, r3
 80013f8:	0013      	movs	r3, r2
 80013fa:	68fa      	ldr	r2, [r7, #12]
 80013fc:	4013      	ands	r3, r2
 80013fe:	d02d      	beq.n	800145c <HAL_DMA_IRQHandler+0xea>
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	2202      	movs	r2, #2
 8001404:	4013      	ands	r3, r2
 8001406:	d029      	beq.n	800145c <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	2220      	movs	r2, #32
 8001410:	4013      	ands	r3, r2
 8001412:	d10b      	bne.n	800142c <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	681a      	ldr	r2, [r3, #0]
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	210a      	movs	r1, #10
 8001420:	438a      	bics	r2, r1
 8001422:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	2225      	movs	r2, #37	; 0x25
 8001428:	2101      	movs	r1, #1
 800142a:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	221c      	movs	r2, #28
 8001432:	401a      	ands	r2, r3
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001438:	2102      	movs	r1, #2
 800143a:	4091      	lsls	r1, r2
 800143c:	000a      	movs	r2, r1
 800143e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2224      	movs	r2, #36	; 0x24
 8001444:	2100      	movs	r1, #0
 8001446:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800144c:	2b00      	cmp	r3, #0
 800144e:	d039      	beq.n	80014c4 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001454:	687a      	ldr	r2, [r7, #4]
 8001456:	0010      	movs	r0, r2
 8001458:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800145a:	e033      	b.n	80014c4 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001460:	221c      	movs	r2, #28
 8001462:	4013      	ands	r3, r2
 8001464:	2208      	movs	r2, #8
 8001466:	409a      	lsls	r2, r3
 8001468:	0013      	movs	r3, r2
 800146a:	68fa      	ldr	r2, [r7, #12]
 800146c:	4013      	ands	r3, r2
 800146e:	d02a      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x154>
 8001470:	68bb      	ldr	r3, [r7, #8]
 8001472:	2208      	movs	r2, #8
 8001474:	4013      	ands	r3, r2
 8001476:	d026      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	681a      	ldr	r2, [r3, #0]
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	210e      	movs	r1, #14
 8001484:	438a      	bics	r2, r1
 8001486:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148c:	221c      	movs	r2, #28
 800148e:	401a      	ands	r2, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001494:	2101      	movs	r1, #1
 8001496:	4091      	lsls	r1, r2
 8001498:	000a      	movs	r2, r1
 800149a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	2201      	movs	r2, #1
 80014a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	2225      	movs	r2, #37	; 0x25
 80014a6:	2101      	movs	r1, #1
 80014a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	2224      	movs	r2, #36	; 0x24
 80014ae:	2100      	movs	r1, #0
 80014b0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d005      	beq.n	80014c6 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014be:	687a      	ldr	r2, [r7, #4]
 80014c0:	0010      	movs	r0, r2
 80014c2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80014c4:	46c0      	nop			; (mov r8, r8)
 80014c6:	46c0      	nop			; (mov r8, r8)
}
 80014c8:	46bd      	mov	sp, r7
 80014ca:	b004      	add	sp, #16
 80014cc:	bd80      	pop	{r7, pc}
	...

080014d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b086      	sub	sp, #24
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
 80014d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80014da:	2300      	movs	r3, #0
 80014dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80014de:	2300      	movs	r3, #0
 80014e0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80014e2:	2300      	movs	r3, #0
 80014e4:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80014e6:	e14f      	b.n	8001788 <HAL_GPIO_Init+0x2b8>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2101      	movs	r1, #1
 80014ee:	697a      	ldr	r2, [r7, #20]
 80014f0:	4091      	lsls	r1, r2
 80014f2:	000a      	movs	r2, r1
 80014f4:	4013      	ands	r3, r2
 80014f6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d100      	bne.n	8001500 <HAL_GPIO_Init+0x30>
 80014fe:	e140      	b.n	8001782 <HAL_GPIO_Init+0x2b2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685b      	ldr	r3, [r3, #4]
 8001504:	2203      	movs	r2, #3
 8001506:	4013      	ands	r3, r2
 8001508:	2b01      	cmp	r3, #1
 800150a:	d005      	beq.n	8001518 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800150c:	683b      	ldr	r3, [r7, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	2203      	movs	r2, #3
 8001512:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001514:	2b02      	cmp	r3, #2
 8001516:	d130      	bne.n	800157a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	005b      	lsls	r3, r3, #1
 8001522:	2203      	movs	r2, #3
 8001524:	409a      	lsls	r2, r3
 8001526:	0013      	movs	r3, r2
 8001528:	43da      	mvns	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	4013      	ands	r3, r2
 800152e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001530:	683b      	ldr	r3, [r7, #0]
 8001532:	68da      	ldr	r2, [r3, #12]
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	005b      	lsls	r3, r3, #1
 8001538:	409a      	lsls	r2, r3
 800153a:	0013      	movs	r3, r2
 800153c:	693a      	ldr	r2, [r7, #16]
 800153e:	4313      	orrs	r3, r2
 8001540:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	693a      	ldr	r2, [r7, #16]
 8001546:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	685b      	ldr	r3, [r3, #4]
 800154c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800154e:	2201      	movs	r2, #1
 8001550:	697b      	ldr	r3, [r7, #20]
 8001552:	409a      	lsls	r2, r3
 8001554:	0013      	movs	r3, r2
 8001556:	43da      	mvns	r2, r3
 8001558:	693b      	ldr	r3, [r7, #16]
 800155a:	4013      	ands	r3, r2
 800155c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	685b      	ldr	r3, [r3, #4]
 8001562:	091b      	lsrs	r3, r3, #4
 8001564:	2201      	movs	r2, #1
 8001566:	401a      	ands	r2, r3
 8001568:	697b      	ldr	r3, [r7, #20]
 800156a:	409a      	lsls	r2, r3
 800156c:	0013      	movs	r3, r2
 800156e:	693a      	ldr	r2, [r7, #16]
 8001570:	4313      	orrs	r3, r2
 8001572:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	685b      	ldr	r3, [r3, #4]
 800157e:	2203      	movs	r2, #3
 8001580:	4013      	ands	r3, r2
 8001582:	2b03      	cmp	r3, #3
 8001584:	d017      	beq.n	80015b6 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	68db      	ldr	r3, [r3, #12]
 800158a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	005b      	lsls	r3, r3, #1
 8001590:	2203      	movs	r2, #3
 8001592:	409a      	lsls	r2, r3
 8001594:	0013      	movs	r3, r2
 8001596:	43da      	mvns	r2, r3
 8001598:	693b      	ldr	r3, [r7, #16]
 800159a:	4013      	ands	r3, r2
 800159c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800159e:	683b      	ldr	r3, [r7, #0]
 80015a0:	689a      	ldr	r2, [r3, #8]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	409a      	lsls	r2, r3
 80015a8:	0013      	movs	r3, r2
 80015aa:	693a      	ldr	r2, [r7, #16]
 80015ac:	4313      	orrs	r3, r2
 80015ae:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	693a      	ldr	r2, [r7, #16]
 80015b4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	2203      	movs	r2, #3
 80015bc:	4013      	ands	r3, r2
 80015be:	2b02      	cmp	r3, #2
 80015c0:	d123      	bne.n	800160a <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	08da      	lsrs	r2, r3, #3
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	3208      	adds	r2, #8
 80015ca:	0092      	lsls	r2, r2, #2
 80015cc:	58d3      	ldr	r3, [r2, r3]
 80015ce:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	2207      	movs	r2, #7
 80015d4:	4013      	ands	r3, r2
 80015d6:	009b      	lsls	r3, r3, #2
 80015d8:	220f      	movs	r2, #15
 80015da:	409a      	lsls	r2, r3
 80015dc:	0013      	movs	r3, r2
 80015de:	43da      	mvns	r2, r3
 80015e0:	693b      	ldr	r3, [r7, #16]
 80015e2:	4013      	ands	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	691a      	ldr	r2, [r3, #16]
 80015ea:	697b      	ldr	r3, [r7, #20]
 80015ec:	2107      	movs	r1, #7
 80015ee:	400b      	ands	r3, r1
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	409a      	lsls	r2, r3
 80015f4:	0013      	movs	r3, r2
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4313      	orrs	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	08da      	lsrs	r2, r3, #3
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	3208      	adds	r2, #8
 8001604:	0092      	lsls	r2, r2, #2
 8001606:	6939      	ldr	r1, [r7, #16]
 8001608:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	005b      	lsls	r3, r3, #1
 8001614:	2203      	movs	r2, #3
 8001616:	409a      	lsls	r2, r3
 8001618:	0013      	movs	r3, r2
 800161a:	43da      	mvns	r2, r3
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	4013      	ands	r3, r2
 8001620:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001622:	683b      	ldr	r3, [r7, #0]
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	2203      	movs	r2, #3
 8001628:	401a      	ands	r2, r3
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	005b      	lsls	r3, r3, #1
 800162e:	409a      	lsls	r2, r3
 8001630:	0013      	movs	r3, r2
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	4313      	orrs	r3, r2
 8001636:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800163e:	683b      	ldr	r3, [r7, #0]
 8001640:	685a      	ldr	r2, [r3, #4]
 8001642:	23c0      	movs	r3, #192	; 0xc0
 8001644:	029b      	lsls	r3, r3, #10
 8001646:	4013      	ands	r3, r2
 8001648:	d100      	bne.n	800164c <HAL_GPIO_Init+0x17c>
 800164a:	e09a      	b.n	8001782 <HAL_GPIO_Init+0x2b2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800164c:	4b54      	ldr	r3, [pc, #336]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 800164e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001650:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_GPIO_Init+0x2d0>)
 8001652:	2101      	movs	r1, #1
 8001654:	430a      	orrs	r2, r1
 8001656:	635a      	str	r2, [r3, #52]	; 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 8001658:	4a52      	ldr	r2, [pc, #328]	; (80017a4 <HAL_GPIO_Init+0x2d4>)
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	089b      	lsrs	r3, r3, #2
 800165e:	3302      	adds	r3, #2
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	589b      	ldr	r3, [r3, r2]
 8001664:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 8001666:	697b      	ldr	r3, [r7, #20]
 8001668:	2203      	movs	r2, #3
 800166a:	4013      	ands	r3, r2
 800166c:	009b      	lsls	r3, r3, #2
 800166e:	220f      	movs	r2, #15
 8001670:	409a      	lsls	r2, r3
 8001672:	0013      	movs	r3, r2
 8001674:	43da      	mvns	r2, r3
 8001676:	693b      	ldr	r3, [r7, #16]
 8001678:	4013      	ands	r3, r2
 800167a:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800167c:	687a      	ldr	r2, [r7, #4]
 800167e:	23a0      	movs	r3, #160	; 0xa0
 8001680:	05db      	lsls	r3, r3, #23
 8001682:	429a      	cmp	r2, r3
 8001684:	d019      	beq.n	80016ba <HAL_GPIO_Init+0x1ea>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	4a47      	ldr	r2, [pc, #284]	; (80017a8 <HAL_GPIO_Init+0x2d8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d013      	beq.n	80016b6 <HAL_GPIO_Init+0x1e6>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	4a46      	ldr	r2, [pc, #280]	; (80017ac <HAL_GPIO_Init+0x2dc>)
 8001692:	4293      	cmp	r3, r2
 8001694:	d00d      	beq.n	80016b2 <HAL_GPIO_Init+0x1e2>
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	4a45      	ldr	r2, [pc, #276]	; (80017b0 <HAL_GPIO_Init+0x2e0>)
 800169a:	4293      	cmp	r3, r2
 800169c:	d007      	beq.n	80016ae <HAL_GPIO_Init+0x1de>
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	4a44      	ldr	r2, [pc, #272]	; (80017b4 <HAL_GPIO_Init+0x2e4>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d101      	bne.n	80016aa <HAL_GPIO_Init+0x1da>
 80016a6:	2305      	movs	r3, #5
 80016a8:	e008      	b.n	80016bc <HAL_GPIO_Init+0x1ec>
 80016aa:	2306      	movs	r3, #6
 80016ac:	e006      	b.n	80016bc <HAL_GPIO_Init+0x1ec>
 80016ae:	2303      	movs	r3, #3
 80016b0:	e004      	b.n	80016bc <HAL_GPIO_Init+0x1ec>
 80016b2:	2302      	movs	r3, #2
 80016b4:	e002      	b.n	80016bc <HAL_GPIO_Init+0x1ec>
 80016b6:	2301      	movs	r3, #1
 80016b8:	e000      	b.n	80016bc <HAL_GPIO_Init+0x1ec>
 80016ba:	2300      	movs	r3, #0
 80016bc:	697a      	ldr	r2, [r7, #20]
 80016be:	2103      	movs	r1, #3
 80016c0:	400a      	ands	r2, r1
 80016c2:	0092      	lsls	r2, r2, #2
 80016c4:	4093      	lsls	r3, r2
 80016c6:	693a      	ldr	r2, [r7, #16]
 80016c8:	4313      	orrs	r3, r2
 80016ca:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80016cc:	4935      	ldr	r1, [pc, #212]	; (80017a4 <HAL_GPIO_Init+0x2d4>)
 80016ce:	697b      	ldr	r3, [r7, #20]
 80016d0:	089b      	lsrs	r3, r3, #2
 80016d2:	3302      	adds	r3, #2
 80016d4:	009b      	lsls	r3, r3, #2
 80016d6:	693a      	ldr	r2, [r7, #16]
 80016d8:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016da:	4b37      	ldr	r3, [pc, #220]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80016e0:	68fb      	ldr	r3, [r7, #12]
 80016e2:	43da      	mvns	r2, r3
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	4013      	ands	r3, r2
 80016e8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80016ea:	683b      	ldr	r3, [r7, #0]
 80016ec:	685a      	ldr	r2, [r3, #4]
 80016ee:	2380      	movs	r3, #128	; 0x80
 80016f0:	025b      	lsls	r3, r3, #9
 80016f2:	4013      	ands	r3, r2
 80016f4:	d003      	beq.n	80016fe <HAL_GPIO_Init+0x22e>
        {
          temp |= iocurrent;
 80016f6:	693a      	ldr	r2, [r7, #16]
 80016f8:	68fb      	ldr	r3, [r7, #12]
 80016fa:	4313      	orrs	r3, r2
 80016fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80016fe:	4b2e      	ldr	r3, [pc, #184]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001704:	4b2c      	ldr	r3, [pc, #176]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800170a:	68fb      	ldr	r3, [r7, #12]
 800170c:	43da      	mvns	r2, r3
 800170e:	693b      	ldr	r3, [r7, #16]
 8001710:	4013      	ands	r3, r2
 8001712:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685a      	ldr	r2, [r3, #4]
 8001718:	2380      	movs	r3, #128	; 0x80
 800171a:	029b      	lsls	r3, r3, #10
 800171c:	4013      	ands	r3, r2
 800171e:	d003      	beq.n	8001728 <HAL_GPIO_Init+0x258>
        {
          temp |= iocurrent;
 8001720:	693a      	ldr	r2, [r7, #16]
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	4313      	orrs	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001728:	4b23      	ldr	r3, [pc, #140]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800172e:	4b22      	ldr	r3, [pc, #136]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	43da      	mvns	r2, r3
 8001738:	693b      	ldr	r3, [r7, #16]
 800173a:	4013      	ands	r3, r2
 800173c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800173e:	683b      	ldr	r3, [r7, #0]
 8001740:	685a      	ldr	r2, [r3, #4]
 8001742:	2380      	movs	r3, #128	; 0x80
 8001744:	035b      	lsls	r3, r3, #13
 8001746:	4013      	ands	r3, r2
 8001748:	d003      	beq.n	8001752 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800174a:	693a      	ldr	r2, [r7, #16]
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	4313      	orrs	r3, r2
 8001750:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001752:	4b19      	ldr	r3, [pc, #100]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001758:	4b17      	ldr	r3, [pc, #92]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 800175a:	68db      	ldr	r3, [r3, #12]
 800175c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	43da      	mvns	r2, r3
 8001762:	693b      	ldr	r3, [r7, #16]
 8001764:	4013      	ands	r3, r2
 8001766:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	685a      	ldr	r2, [r3, #4]
 800176c:	2380      	movs	r3, #128	; 0x80
 800176e:	039b      	lsls	r3, r3, #14
 8001770:	4013      	ands	r3, r2
 8001772:	d003      	beq.n	800177c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001774:	693a      	ldr	r2, [r7, #16]
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	4313      	orrs	r3, r2
 800177a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800177c:	4b0e      	ldr	r3, [pc, #56]	; (80017b8 <HAL_GPIO_Init+0x2e8>)
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	60da      	str	r2, [r3, #12]
      }
    }
    position++;
 8001782:	697b      	ldr	r3, [r7, #20]
 8001784:	3301      	adds	r3, #1
 8001786:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	40da      	lsrs	r2, r3
 8001790:	1e13      	subs	r3, r2, #0
 8001792:	d000      	beq.n	8001796 <HAL_GPIO_Init+0x2c6>
 8001794:	e6a8      	b.n	80014e8 <HAL_GPIO_Init+0x18>
  }
}
 8001796:	46c0      	nop			; (mov r8, r8)
 8001798:	46c0      	nop			; (mov r8, r8)
 800179a:	46bd      	mov	sp, r7
 800179c:	b006      	add	sp, #24
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40010000 	.word	0x40010000
 80017a8:	50000400 	.word	0x50000400
 80017ac:	50000800 	.word	0x50000800
 80017b0:	50000c00 	.word	0x50000c00
 80017b4:	50001c00 	.word	0x50001c00
 80017b8:	40010400 	.word	0x40010400

080017bc <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80017bc:	b580      	push	{r7, lr}
 80017be:	b082      	sub	sp, #8
 80017c0:	af00      	add	r7, sp, #0
 80017c2:	6078      	str	r0, [r7, #4]
 80017c4:	0008      	movs	r0, r1
 80017c6:	0011      	movs	r1, r2
 80017c8:	1cbb      	adds	r3, r7, #2
 80017ca:	1c02      	adds	r2, r0, #0
 80017cc:	801a      	strh	r2, [r3, #0]
 80017ce:	1c7b      	adds	r3, r7, #1
 80017d0:	1c0a      	adds	r2, r1, #0
 80017d2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80017d4:	1c7b      	adds	r3, r7, #1
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d004      	beq.n	80017e6 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017dc:	1cbb      	adds	r3, r7, #2
 80017de:	881a      	ldrh	r2, [r3, #0]
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 80017e4:	e003      	b.n	80017ee <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 80017e6:	1cbb      	adds	r3, r7, #2
 80017e8:	881a      	ldrh	r2, [r3, #0]
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	629a      	str	r2, [r3, #40]	; 0x28
}
 80017ee:	46c0      	nop			; (mov r8, r8)
 80017f0:	46bd      	mov	sp, r7
 80017f2:	b002      	add	sp, #8
 80017f4:	bd80      	pop	{r7, pc}
	...

080017f8 <HAL_PWR_ConfigPVD>:
  *         more details about the voltage threshold corresponding to each
  *         detection level.
  * @retval None
  */
void HAL_PWR_ConfigPVD(PWR_PVDTypeDef *sConfigPVD)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_PWR_PVD_LEVEL(sConfigPVD->PVDLevel));
  assert_param(IS_PWR_PVD_MODE(sConfigPVD->Mode));

  /* Set PLS[7:5] bits according to PVDLevel value */
  MODIFY_REG(PWR->CR, PWR_CR_PLS, sConfigPVD->PVDLevel);
 8001800:	4b2b      	ldr	r3, [pc, #172]	; (80018b0 <HAL_PWR_ConfigPVD+0xb8>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	22e0      	movs	r2, #224	; 0xe0
 8001806:	4393      	bics	r3, r2
 8001808:	0019      	movs	r1, r3
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681a      	ldr	r2, [r3, #0]
 800180e:	4b28      	ldr	r3, [pc, #160]	; (80018b0 <HAL_PWR_ConfigPVD+0xb8>)
 8001810:	430a      	orrs	r2, r1
 8001812:	601a      	str	r2, [r3, #0]
  
  /* Clear any previous config. Keep it clear if no event or IT mode is selected */
  __HAL_PWR_PVD_EXTI_DISABLE_EVENT();
 8001814:	4b27      	ldr	r3, [pc, #156]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 8001816:	685a      	ldr	r2, [r3, #4]
 8001818:	4b26      	ldr	r3, [pc, #152]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 800181a:	4927      	ldr	r1, [pc, #156]	; (80018b8 <HAL_PWR_ConfigPVD+0xc0>)
 800181c:	400a      	ands	r2, r1
 800181e:	605a      	str	r2, [r3, #4]
  __HAL_PWR_PVD_EXTI_DISABLE_IT();
 8001820:	4b24      	ldr	r3, [pc, #144]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 8001822:	681a      	ldr	r2, [r3, #0]
 8001824:	4b23      	ldr	r3, [pc, #140]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 8001826:	4924      	ldr	r1, [pc, #144]	; (80018b8 <HAL_PWR_ConfigPVD+0xc0>)
 8001828:	400a      	ands	r2, r1
 800182a:	601a      	str	r2, [r3, #0]
  __HAL_PWR_PVD_EXTI_DISABLE_FALLING_EDGE(); 
 800182c:	4b21      	ldr	r3, [pc, #132]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 800182e:	68da      	ldr	r2, [r3, #12]
 8001830:	4b20      	ldr	r3, [pc, #128]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 8001832:	4921      	ldr	r1, [pc, #132]	; (80018b8 <HAL_PWR_ConfigPVD+0xc0>)
 8001834:	400a      	ands	r2, r1
 8001836:	60da      	str	r2, [r3, #12]
  __HAL_PWR_PVD_EXTI_DISABLE_RISING_EDGE();
 8001838:	4b1e      	ldr	r3, [pc, #120]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 800183a:	689a      	ldr	r2, [r3, #8]
 800183c:	4b1d      	ldr	r3, [pc, #116]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 800183e:	491e      	ldr	r1, [pc, #120]	; (80018b8 <HAL_PWR_ConfigPVD+0xc0>)
 8001840:	400a      	ands	r2, r1
 8001842:	609a      	str	r2, [r3, #8]

  /* Configure interrupt mode */
  if((sConfigPVD->Mode & PVD_MODE_IT) == PVD_MODE_IT)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	025b      	lsls	r3, r3, #9
 800184c:	4013      	ands	r3, r2
 800184e:	d006      	beq.n	800185e <HAL_PWR_ConfigPVD+0x66>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_IT();
 8001850:	4b18      	ldr	r3, [pc, #96]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 8001852:	681a      	ldr	r2, [r3, #0]
 8001854:	4b17      	ldr	r3, [pc, #92]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	0249      	lsls	r1, r1, #9
 800185a:	430a      	orrs	r2, r1
 800185c:	601a      	str	r2, [r3, #0]
  }
  
  /* Configure event mode */
  if((sConfigPVD->Mode & PVD_MODE_EVT) == PVD_MODE_EVT)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685a      	ldr	r2, [r3, #4]
 8001862:	2380      	movs	r3, #128	; 0x80
 8001864:	029b      	lsls	r3, r3, #10
 8001866:	4013      	ands	r3, r2
 8001868:	d006      	beq.n	8001878 <HAL_PWR_ConfigPVD+0x80>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_EVENT();
 800186a:	4b12      	ldr	r3, [pc, #72]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 8001870:	2180      	movs	r1, #128	; 0x80
 8001872:	0249      	lsls	r1, r1, #9
 8001874:	430a      	orrs	r2, r1
 8001876:	605a      	str	r2, [r3, #4]
  }
  
  /* Configure the edge */
  if((sConfigPVD->Mode & PVD_RISING_EDGE) == PVD_RISING_EDGE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	2201      	movs	r2, #1
 800187e:	4013      	ands	r3, r2
 8001880:	d006      	beq.n	8001890 <HAL_PWR_ConfigPVD+0x98>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_RISING_EDGE();
 8001882:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 8001884:	689a      	ldr	r2, [r3, #8]
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 8001888:	2180      	movs	r1, #128	; 0x80
 800188a:	0249      	lsls	r1, r1, #9
 800188c:	430a      	orrs	r2, r1
 800188e:	609a      	str	r2, [r3, #8]
  }
  
  if((sConfigPVD->Mode & PVD_FALLING_EDGE) == PVD_FALLING_EDGE)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	685b      	ldr	r3, [r3, #4]
 8001894:	2202      	movs	r2, #2
 8001896:	4013      	ands	r3, r2
 8001898:	d006      	beq.n	80018a8 <HAL_PWR_ConfigPVD+0xb0>
  {
    __HAL_PWR_PVD_EXTI_ENABLE_FALLING_EDGE();
 800189a:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 800189c:	68da      	ldr	r2, [r3, #12]
 800189e:	4b05      	ldr	r3, [pc, #20]	; (80018b4 <HAL_PWR_ConfigPVD+0xbc>)
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	0249      	lsls	r1, r1, #9
 80018a4:	430a      	orrs	r2, r1
 80018a6:	60da      	str	r2, [r3, #12]
  }
}
 80018a8:	46c0      	nop			; (mov r8, r8)
 80018aa:	46bd      	mov	sp, r7
 80018ac:	b002      	add	sp, #8
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	40007000 	.word	0x40007000
 80018b4:	40010400 	.word	0x40010400
 80018b8:	fffeffff 	.word	0xfffeffff

080018bc <HAL_PWR_EnablePVD>:
/**
  * @brief Enables the Power Voltage Detector(PVD).
  * @retval None
  */
void HAL_PWR_EnablePVD(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
  /* Enable the power voltage detector */
  SET_BIT(PWR->CR, PWR_CR_PVDE);
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <HAL_PWR_EnablePVD+0x18>)
 80018c2:	681a      	ldr	r2, [r3, #0]
 80018c4:	4b03      	ldr	r3, [pc, #12]	; (80018d4 <HAL_PWR_EnablePVD+0x18>)
 80018c6:	2110      	movs	r1, #16
 80018c8:	430a      	orrs	r2, r1
 80018ca:	601a      	str	r2, [r3, #0]
}
 80018cc:	46c0      	nop			; (mov r8, r8)
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	40007000 	.word	0x40007000

080018d8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80018d8:	b5b0      	push	{r4, r5, r7, lr}
 80018da:	b08a      	sub	sp, #40	; 0x28
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d102      	bne.n	80018ec <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80018e6:	2301      	movs	r3, #1
 80018e8:	f000 fbaf 	bl	800204a <HAL_RCC_OscConfig+0x772>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ec:	4bcf      	ldr	r3, [pc, #828]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 80018ee:	68db      	ldr	r3, [r3, #12]
 80018f0:	220c      	movs	r2, #12
 80018f2:	4013      	ands	r3, r2
 80018f4:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80018f6:	4bcd      	ldr	r3, [pc, #820]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 80018f8:	68da      	ldr	r2, [r3, #12]
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	025b      	lsls	r3, r3, #9
 80018fe:	4013      	ands	r3, r2
 8001900:	61fb      	str	r3, [r7, #28]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	2201      	movs	r2, #1
 8001908:	4013      	ands	r3, r2
 800190a:	d100      	bne.n	800190e <HAL_RCC_OscConfig+0x36>
 800190c:	e07e      	b.n	8001a0c <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800190e:	6a3b      	ldr	r3, [r7, #32]
 8001910:	2b08      	cmp	r3, #8
 8001912:	d007      	beq.n	8001924 <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001914:	6a3b      	ldr	r3, [r7, #32]
 8001916:	2b0c      	cmp	r3, #12
 8001918:	d112      	bne.n	8001940 <HAL_RCC_OscConfig+0x68>
 800191a:	69fa      	ldr	r2, [r7, #28]
 800191c:	2380      	movs	r3, #128	; 0x80
 800191e:	025b      	lsls	r3, r3, #9
 8001920:	429a      	cmp	r2, r3
 8001922:	d10d      	bne.n	8001940 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001924:	4bc1      	ldr	r3, [pc, #772]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	2380      	movs	r3, #128	; 0x80
 800192a:	029b      	lsls	r3, r3, #10
 800192c:	4013      	ands	r3, r2
 800192e:	d100      	bne.n	8001932 <HAL_RCC_OscConfig+0x5a>
 8001930:	e06b      	b.n	8001a0a <HAL_RCC_OscConfig+0x132>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	685b      	ldr	r3, [r3, #4]
 8001936:	2b00      	cmp	r3, #0
 8001938:	d167      	bne.n	8001a0a <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	f000 fb85 	bl	800204a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	2380      	movs	r3, #128	; 0x80
 8001946:	025b      	lsls	r3, r3, #9
 8001948:	429a      	cmp	r2, r3
 800194a:	d107      	bne.n	800195c <HAL_RCC_OscConfig+0x84>
 800194c:	4bb7      	ldr	r3, [pc, #732]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 800194e:	681a      	ldr	r2, [r3, #0]
 8001950:	4bb6      	ldr	r3, [pc, #728]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001952:	2180      	movs	r1, #128	; 0x80
 8001954:	0249      	lsls	r1, r1, #9
 8001956:	430a      	orrs	r2, r1
 8001958:	601a      	str	r2, [r3, #0]
 800195a:	e027      	b.n	80019ac <HAL_RCC_OscConfig+0xd4>
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	685a      	ldr	r2, [r3, #4]
 8001960:	23a0      	movs	r3, #160	; 0xa0
 8001962:	02db      	lsls	r3, r3, #11
 8001964:	429a      	cmp	r2, r3
 8001966:	d10e      	bne.n	8001986 <HAL_RCC_OscConfig+0xae>
 8001968:	4bb0      	ldr	r3, [pc, #704]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 800196a:	681a      	ldr	r2, [r3, #0]
 800196c:	4baf      	ldr	r3, [pc, #700]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 800196e:	2180      	movs	r1, #128	; 0x80
 8001970:	02c9      	lsls	r1, r1, #11
 8001972:	430a      	orrs	r2, r1
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	4bad      	ldr	r3, [pc, #692]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001978:	681a      	ldr	r2, [r3, #0]
 800197a:	4bac      	ldr	r3, [pc, #688]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 800197c:	2180      	movs	r1, #128	; 0x80
 800197e:	0249      	lsls	r1, r1, #9
 8001980:	430a      	orrs	r2, r1
 8001982:	601a      	str	r2, [r3, #0]
 8001984:	e012      	b.n	80019ac <HAL_RCC_OscConfig+0xd4>
 8001986:	4ba9      	ldr	r3, [pc, #676]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001988:	681a      	ldr	r2, [r3, #0]
 800198a:	4ba8      	ldr	r3, [pc, #672]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 800198c:	49a8      	ldr	r1, [pc, #672]	; (8001c30 <HAL_RCC_OscConfig+0x358>)
 800198e:	400a      	ands	r2, r1
 8001990:	601a      	str	r2, [r3, #0]
 8001992:	4ba6      	ldr	r3, [pc, #664]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	2380      	movs	r3, #128	; 0x80
 8001998:	025b      	lsls	r3, r3, #9
 800199a:	4013      	ands	r3, r2
 800199c:	60fb      	str	r3, [r7, #12]
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4ba2      	ldr	r3, [pc, #648]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 80019a2:	681a      	ldr	r2, [r3, #0]
 80019a4:	4ba1      	ldr	r3, [pc, #644]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 80019a6:	49a3      	ldr	r1, [pc, #652]	; (8001c34 <HAL_RCC_OscConfig+0x35c>)
 80019a8:	400a      	ands	r2, r1
 80019aa:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d015      	beq.n	80019e0 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b4:	f7ff fb12 	bl	8000fdc <HAL_GetTick>
 80019b8:	0003      	movs	r3, r0
 80019ba:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019bc:	e009      	b.n	80019d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019be:	f7ff fb0d 	bl	8000fdc <HAL_GetTick>
 80019c2:	0002      	movs	r2, r0
 80019c4:	69bb      	ldr	r3, [r7, #24]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b64      	cmp	r3, #100	; 0x64
 80019ca:	d902      	bls.n	80019d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	f000 fb3c 	bl	800204a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80019d2:	4b96      	ldr	r3, [pc, #600]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	2380      	movs	r3, #128	; 0x80
 80019d8:	029b      	lsls	r3, r3, #10
 80019da:	4013      	ands	r3, r2
 80019dc:	d0ef      	beq.n	80019be <HAL_RCC_OscConfig+0xe6>
 80019de:	e015      	b.n	8001a0c <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019e0:	f7ff fafc 	bl	8000fdc <HAL_GetTick>
 80019e4:	0003      	movs	r3, r0
 80019e6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019e8:	e008      	b.n	80019fc <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80019ea:	f7ff faf7 	bl	8000fdc <HAL_GetTick>
 80019ee:	0002      	movs	r2, r0
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	2b64      	cmp	r3, #100	; 0x64
 80019f6:	d901      	bls.n	80019fc <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e326      	b.n	800204a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80019fc:	4b8b      	ldr	r3, [pc, #556]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 80019fe:	681a      	ldr	r2, [r3, #0]
 8001a00:	2380      	movs	r3, #128	; 0x80
 8001a02:	029b      	lsls	r3, r3, #10
 8001a04:	4013      	ands	r3, r2
 8001a06:	d1f0      	bne.n	80019ea <HAL_RCC_OscConfig+0x112>
 8001a08:	e000      	b.n	8001a0c <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a0a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2202      	movs	r2, #2
 8001a12:	4013      	ands	r3, r2
 8001a14:	d100      	bne.n	8001a18 <HAL_RCC_OscConfig+0x140>
 8001a16:	e08b      	b.n	8001b30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	68db      	ldr	r3, [r3, #12]
 8001a1c:	617b      	str	r3, [r7, #20]
      hsi_state &= ~RCC_CR_HSIOUTEN;
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001a1e:	6a3b      	ldr	r3, [r7, #32]
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d005      	beq.n	8001a30 <HAL_RCC_OscConfig+0x158>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a24:	6a3b      	ldr	r3, [r7, #32]
 8001a26:	2b0c      	cmp	r3, #12
 8001a28:	d13e      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x1d0>
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d13b      	bne.n	8001aa8 <HAL_RCC_OscConfig+0x1d0>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 8001a30:	4b7e      	ldr	r3, [pc, #504]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	2204      	movs	r2, #4
 8001a36:	4013      	ands	r3, r2
 8001a38:	d004      	beq.n	8001a44 <HAL_RCC_OscConfig+0x16c>
 8001a3a:	697b      	ldr	r3, [r7, #20]
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <HAL_RCC_OscConfig+0x16c>
      {
        return HAL_ERROR;
 8001a40:	2301      	movs	r3, #1
 8001a42:	e302      	b.n	800204a <HAL_RCC_OscConfig+0x772>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a44:	4b79      	ldr	r3, [pc, #484]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	4a7b      	ldr	r2, [pc, #492]	; (8001c38 <HAL_RCC_OscConfig+0x360>)
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	0019      	movs	r1, r3
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	691b      	ldr	r3, [r3, #16]
 8001a52:	021a      	lsls	r2, r3, #8
 8001a54:	4b75      	ldr	r3, [pc, #468]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001a56:	430a      	orrs	r2, r1
 8001a58:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001a5a:	4b74      	ldr	r3, [pc, #464]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	2209      	movs	r2, #9
 8001a60:	4393      	bics	r3, r2
 8001a62:	0019      	movs	r1, r3
 8001a64:	4b71      	ldr	r3, [pc, #452]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	430a      	orrs	r2, r1
 8001a6a:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a6c:	f000 fc40 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 8001a70:	0001      	movs	r1, r0
 8001a72:	4b6e      	ldr	r3, [pc, #440]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001a74:	68db      	ldr	r3, [r3, #12]
 8001a76:	091b      	lsrs	r3, r3, #4
 8001a78:	220f      	movs	r2, #15
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	4a6f      	ldr	r2, [pc, #444]	; (8001c3c <HAL_RCC_OscConfig+0x364>)
 8001a7e:	5cd3      	ldrb	r3, [r2, r3]
 8001a80:	000a      	movs	r2, r1
 8001a82:	40da      	lsrs	r2, r3
 8001a84:	4b6e      	ldr	r3, [pc, #440]	; (8001c40 <HAL_RCC_OscConfig+0x368>)
 8001a86:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 8001a88:	4b6e      	ldr	r3, [pc, #440]	; (8001c44 <HAL_RCC_OscConfig+0x36c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2513      	movs	r5, #19
 8001a8e:	197c      	adds	r4, r7, r5
 8001a90:	0018      	movs	r0, r3
 8001a92:	f7ff fa5d 	bl	8000f50 <HAL_InitTick>
 8001a96:	0003      	movs	r3, r0
 8001a98:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 8001a9a:	197b      	adds	r3, r7, r5
 8001a9c:	781b      	ldrb	r3, [r3, #0]
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d046      	beq.n	8001b30 <HAL_RCC_OscConfig+0x258>
      {
        return status;
 8001aa2:	197b      	adds	r3, r7, r5
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	e2d0      	b.n	800204a <HAL_RCC_OscConfig+0x772>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d027      	beq.n	8001afe <HAL_RCC_OscConfig+0x226>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8001aae:	4b5f      	ldr	r3, [pc, #380]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	2209      	movs	r2, #9
 8001ab4:	4393      	bics	r3, r2
 8001ab6:	0019      	movs	r1, r3
 8001ab8:	4b5c      	ldr	r3, [pc, #368]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	430a      	orrs	r2, r1
 8001abe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ac0:	f7ff fa8c 	bl	8000fdc <HAL_GetTick>
 8001ac4:	0003      	movs	r3, r0
 8001ac6:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001ac8:	e008      	b.n	8001adc <HAL_RCC_OscConfig+0x204>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001aca:	f7ff fa87 	bl	8000fdc <HAL_GetTick>
 8001ace:	0002      	movs	r2, r0
 8001ad0:	69bb      	ldr	r3, [r7, #24]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d901      	bls.n	8001adc <HAL_RCC_OscConfig+0x204>
          {
            return HAL_TIMEOUT;
 8001ad8:	2303      	movs	r3, #3
 8001ada:	e2b6      	b.n	800204a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001adc:	4b53      	ldr	r3, [pc, #332]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	2204      	movs	r2, #4
 8001ae2:	4013      	ands	r3, r2
 8001ae4:	d0f1      	beq.n	8001aca <HAL_RCC_OscConfig+0x1f2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ae6:	4b51      	ldr	r3, [pc, #324]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4a53      	ldr	r2, [pc, #332]	; (8001c38 <HAL_RCC_OscConfig+0x360>)
 8001aec:	4013      	ands	r3, r2
 8001aee:	0019      	movs	r1, r3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	021a      	lsls	r2, r3, #8
 8001af6:	4b4d      	ldr	r3, [pc, #308]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001af8:	430a      	orrs	r2, r1
 8001afa:	605a      	str	r2, [r3, #4]
 8001afc:	e018      	b.n	8001b30 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001afe:	4b4b      	ldr	r3, [pc, #300]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001b00:	681a      	ldr	r2, [r3, #0]
 8001b02:	4b4a      	ldr	r3, [pc, #296]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001b04:	2101      	movs	r1, #1
 8001b06:	438a      	bics	r2, r1
 8001b08:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b0a:	f7ff fa67 	bl	8000fdc <HAL_GetTick>
 8001b0e:	0003      	movs	r3, r0
 8001b10:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b12:	e008      	b.n	8001b26 <HAL_RCC_OscConfig+0x24e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001b14:	f7ff fa62 	bl	8000fdc <HAL_GetTick>
 8001b18:	0002      	movs	r2, r0
 8001b1a:	69bb      	ldr	r3, [r7, #24]
 8001b1c:	1ad3      	subs	r3, r2, r3
 8001b1e:	2b02      	cmp	r3, #2
 8001b20:	d901      	bls.n	8001b26 <HAL_RCC_OscConfig+0x24e>
          {
            return HAL_TIMEOUT;
 8001b22:	2303      	movs	r3, #3
 8001b24:	e291      	b.n	800204a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8001b26:	4b41      	ldr	r3, [pc, #260]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2204      	movs	r2, #4
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d1f1      	bne.n	8001b14 <HAL_RCC_OscConfig+0x23c>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2210      	movs	r2, #16
 8001b36:	4013      	ands	r3, r2
 8001b38:	d100      	bne.n	8001b3c <HAL_RCC_OscConfig+0x264>
 8001b3a:	e0a1      	b.n	8001c80 <HAL_RCC_OscConfig+0x3a8>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001b3c:	6a3b      	ldr	r3, [r7, #32]
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d140      	bne.n	8001bc4 <HAL_RCC_OscConfig+0x2ec>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b42:	4b3a      	ldr	r3, [pc, #232]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	2380      	movs	r3, #128	; 0x80
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d005      	beq.n	8001b5a <HAL_RCC_OscConfig+0x282>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	69db      	ldr	r3, [r3, #28]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d101      	bne.n	8001b5a <HAL_RCC_OscConfig+0x282>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e277      	b.n	800204a <HAL_RCC_OscConfig+0x772>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b5a:	4b34      	ldr	r3, [pc, #208]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	4a3a      	ldr	r2, [pc, #232]	; (8001c48 <HAL_RCC_OscConfig+0x370>)
 8001b60:	4013      	ands	r3, r2
 8001b62:	0019      	movs	r1, r3
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b68:	4b30      	ldr	r3, [pc, #192]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b6e:	4b2f      	ldr	r3, [pc, #188]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001b70:	685b      	ldr	r3, [r3, #4]
 8001b72:	021b      	lsls	r3, r3, #8
 8001b74:	0a19      	lsrs	r1, r3, #8
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	6a1b      	ldr	r3, [r3, #32]
 8001b7a:	061a      	lsls	r2, r3, #24
 8001b7c:	4b2b      	ldr	r3, [pc, #172]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001b7e:	430a      	orrs	r2, r1
 8001b80:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b86:	0b5b      	lsrs	r3, r3, #13
 8001b88:	3301      	adds	r3, #1
 8001b8a:	2280      	movs	r2, #128	; 0x80
 8001b8c:	0212      	lsls	r2, r2, #8
 8001b8e:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001b90:	4b26      	ldr	r3, [pc, #152]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	091b      	lsrs	r3, r3, #4
 8001b96:	210f      	movs	r1, #15
 8001b98:	400b      	ands	r3, r1
 8001b9a:	4928      	ldr	r1, [pc, #160]	; (8001c3c <HAL_RCC_OscConfig+0x364>)
 8001b9c:	5ccb      	ldrb	r3, [r1, r3]
 8001b9e:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001ba0:	4b27      	ldr	r3, [pc, #156]	; (8001c40 <HAL_RCC_OscConfig+0x368>)
 8001ba2:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8001ba4:	4b27      	ldr	r3, [pc, #156]	; (8001c44 <HAL_RCC_OscConfig+0x36c>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	2513      	movs	r5, #19
 8001baa:	197c      	adds	r4, r7, r5
 8001bac:	0018      	movs	r0, r3
 8001bae:	f7ff f9cf 	bl	8000f50 <HAL_InitTick>
 8001bb2:	0003      	movs	r3, r0
 8001bb4:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 8001bb6:	197b      	adds	r3, r7, r5
 8001bb8:	781b      	ldrb	r3, [r3, #0]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d060      	beq.n	8001c80 <HAL_RCC_OscConfig+0x3a8>
        {
          return status;
 8001bbe:	197b      	adds	r3, r7, r5
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	e242      	b.n	800204a <HAL_RCC_OscConfig+0x772>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	69db      	ldr	r3, [r3, #28]
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d03f      	beq.n	8001c4c <HAL_RCC_OscConfig+0x374>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001bcc:	4b17      	ldr	r3, [pc, #92]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001bce:	681a      	ldr	r2, [r3, #0]
 8001bd0:	4b16      	ldr	r3, [pc, #88]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001bd2:	2180      	movs	r1, #128	; 0x80
 8001bd4:	0049      	lsls	r1, r1, #1
 8001bd6:	430a      	orrs	r2, r1
 8001bd8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bda:	f7ff f9ff 	bl	8000fdc <HAL_GetTick>
 8001bde:	0003      	movs	r3, r0
 8001be0:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001be2:	e008      	b.n	8001bf6 <HAL_RCC_OscConfig+0x31e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001be4:	f7ff f9fa 	bl	8000fdc <HAL_GetTick>
 8001be8:	0002      	movs	r2, r0
 8001bea:	69bb      	ldr	r3, [r7, #24]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0x31e>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e229      	b.n	800204a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8001bf6:	4b0d      	ldr	r3, [pc, #52]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	2380      	movs	r3, #128	; 0x80
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	4013      	ands	r3, r2
 8001c00:	d0f0      	beq.n	8001be4 <HAL_RCC_OscConfig+0x30c>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c02:	4b0a      	ldr	r3, [pc, #40]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	4a10      	ldr	r2, [pc, #64]	; (8001c48 <HAL_RCC_OscConfig+0x370>)
 8001c08:	4013      	ands	r3, r2
 8001c0a:	0019      	movs	r1, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c10:	4b06      	ldr	r3, [pc, #24]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001c12:	430a      	orrs	r2, r1
 8001c14:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c16:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001c18:	685b      	ldr	r3, [r3, #4]
 8001c1a:	021b      	lsls	r3, r3, #8
 8001c1c:	0a19      	lsrs	r1, r3, #8
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a1b      	ldr	r3, [r3, #32]
 8001c22:	061a      	lsls	r2, r3, #24
 8001c24:	4b01      	ldr	r3, [pc, #4]	; (8001c2c <HAL_RCC_OscConfig+0x354>)
 8001c26:	430a      	orrs	r2, r1
 8001c28:	605a      	str	r2, [r3, #4]
 8001c2a:	e029      	b.n	8001c80 <HAL_RCC_OscConfig+0x3a8>
 8001c2c:	40021000 	.word	0x40021000
 8001c30:	fffeffff 	.word	0xfffeffff
 8001c34:	fffbffff 	.word	0xfffbffff
 8001c38:	ffffe0ff 	.word	0xffffe0ff
 8001c3c:	080036f0 	.word	0x080036f0
 8001c40:	20000044 	.word	0x20000044
 8001c44:	20000048 	.word	0x20000048
 8001c48:	ffff1fff 	.word	0xffff1fff
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c4c:	4bbd      	ldr	r3, [pc, #756]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001c4e:	681a      	ldr	r2, [r3, #0]
 8001c50:	4bbc      	ldr	r3, [pc, #752]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001c52:	49bd      	ldr	r1, [pc, #756]	; (8001f48 <HAL_RCC_OscConfig+0x670>)
 8001c54:	400a      	ands	r2, r1
 8001c56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c58:	f7ff f9c0 	bl	8000fdc <HAL_GetTick>
 8001c5c:	0003      	movs	r3, r0
 8001c5e:	61bb      	str	r3, [r7, #24]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c60:	e008      	b.n	8001c74 <HAL_RCC_OscConfig+0x39c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c62:	f7ff f9bb 	bl	8000fdc <HAL_GetTick>
 8001c66:	0002      	movs	r2, r0
 8001c68:	69bb      	ldr	r3, [r7, #24]
 8001c6a:	1ad3      	subs	r3, r2, r3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d901      	bls.n	8001c74 <HAL_RCC_OscConfig+0x39c>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e1ea      	b.n	800204a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8001c74:	4bb3      	ldr	r3, [pc, #716]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	2380      	movs	r3, #128	; 0x80
 8001c7a:	009b      	lsls	r3, r3, #2
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	d1f0      	bne.n	8001c62 <HAL_RCC_OscConfig+0x38a>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	2208      	movs	r2, #8
 8001c86:	4013      	ands	r3, r2
 8001c88:	d036      	beq.n	8001cf8 <HAL_RCC_OscConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	695b      	ldr	r3, [r3, #20]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d019      	beq.n	8001cc6 <HAL_RCC_OscConfig+0x3ee>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c92:	4bac      	ldr	r3, [pc, #688]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001c94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001c96:	4bab      	ldr	r3, [pc, #684]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001c98:	2101      	movs	r1, #1
 8001c9a:	430a      	orrs	r2, r1
 8001c9c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c9e:	f7ff f99d 	bl	8000fdc <HAL_GetTick>
 8001ca2:	0003      	movs	r3, r0
 8001ca4:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001ca6:	e008      	b.n	8001cba <HAL_RCC_OscConfig+0x3e2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001ca8:	f7ff f998 	bl	8000fdc <HAL_GetTick>
 8001cac:	0002      	movs	r2, r0
 8001cae:	69bb      	ldr	r3, [r7, #24]
 8001cb0:	1ad3      	subs	r3, r2, r3
 8001cb2:	2b02      	cmp	r3, #2
 8001cb4:	d901      	bls.n	8001cba <HAL_RCC_OscConfig+0x3e2>
        {
          return HAL_TIMEOUT;
 8001cb6:	2303      	movs	r3, #3
 8001cb8:	e1c7      	b.n	800204a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001cba:	4ba2      	ldr	r3, [pc, #648]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001cbc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	4013      	ands	r3, r2
 8001cc2:	d0f1      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x3d0>
 8001cc4:	e018      	b.n	8001cf8 <HAL_RCC_OscConfig+0x420>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001cc6:	4b9f      	ldr	r3, [pc, #636]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001cc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001cca:	4b9e      	ldr	r3, [pc, #632]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001ccc:	2101      	movs	r1, #1
 8001cce:	438a      	bics	r2, r1
 8001cd0:	651a      	str	r2, [r3, #80]	; 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cd2:	f7ff f983 	bl	8000fdc <HAL_GetTick>
 8001cd6:	0003      	movs	r3, r0
 8001cd8:	61bb      	str	r3, [r7, #24]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cda:	e008      	b.n	8001cee <HAL_RCC_OscConfig+0x416>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001cdc:	f7ff f97e 	bl	8000fdc <HAL_GetTick>
 8001ce0:	0002      	movs	r2, r0
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d901      	bls.n	8001cee <HAL_RCC_OscConfig+0x416>
        {
          return HAL_TIMEOUT;
 8001cea:	2303      	movs	r3, #3
 8001cec:	e1ad      	b.n	800204a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001cee:	4b95      	ldr	r3, [pc, #596]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001cf0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001cf2:	2202      	movs	r2, #2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	d1f1      	bne.n	8001cdc <HAL_RCC_OscConfig+0x404>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	2204      	movs	r2, #4
 8001cfe:	4013      	ands	r3, r2
 8001d00:	d100      	bne.n	8001d04 <HAL_RCC_OscConfig+0x42c>
 8001d02:	e0ae      	b.n	8001e62 <HAL_RCC_OscConfig+0x58a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d04:	2027      	movs	r0, #39	; 0x27
 8001d06:	183b      	adds	r3, r7, r0
 8001d08:	2200      	movs	r2, #0
 8001d0a:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001d0c:	4b8d      	ldr	r3, [pc, #564]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001d0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d10:	2380      	movs	r3, #128	; 0x80
 8001d12:	055b      	lsls	r3, r3, #21
 8001d14:	4013      	ands	r3, r2
 8001d16:	d109      	bne.n	8001d2c <HAL_RCC_OscConfig+0x454>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d18:	4b8a      	ldr	r3, [pc, #552]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001d1a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001d1c:	4b89      	ldr	r3, [pc, #548]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001d1e:	2180      	movs	r1, #128	; 0x80
 8001d20:	0549      	lsls	r1, r1, #21
 8001d22:	430a      	orrs	r2, r1
 8001d24:	639a      	str	r2, [r3, #56]	; 0x38
      pwrclkchanged = SET;
 8001d26:	183b      	adds	r3, r7, r0
 8001d28:	2201      	movs	r2, #1
 8001d2a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d2c:	4b87      	ldr	r3, [pc, #540]	; (8001f4c <HAL_RCC_OscConfig+0x674>)
 8001d2e:	681a      	ldr	r2, [r3, #0]
 8001d30:	2380      	movs	r3, #128	; 0x80
 8001d32:	005b      	lsls	r3, r3, #1
 8001d34:	4013      	ands	r3, r2
 8001d36:	d11a      	bne.n	8001d6e <HAL_RCC_OscConfig+0x496>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001d38:	4b84      	ldr	r3, [pc, #528]	; (8001f4c <HAL_RCC_OscConfig+0x674>)
 8001d3a:	681a      	ldr	r2, [r3, #0]
 8001d3c:	4b83      	ldr	r3, [pc, #524]	; (8001f4c <HAL_RCC_OscConfig+0x674>)
 8001d3e:	2180      	movs	r1, #128	; 0x80
 8001d40:	0049      	lsls	r1, r1, #1
 8001d42:	430a      	orrs	r2, r1
 8001d44:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001d46:	f7ff f949 	bl	8000fdc <HAL_GetTick>
 8001d4a:	0003      	movs	r3, r0
 8001d4c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d4e:	e008      	b.n	8001d62 <HAL_RCC_OscConfig+0x48a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d50:	f7ff f944 	bl	8000fdc <HAL_GetTick>
 8001d54:	0002      	movs	r2, r0
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	1ad3      	subs	r3, r2, r3
 8001d5a:	2b64      	cmp	r3, #100	; 0x64
 8001d5c:	d901      	bls.n	8001d62 <HAL_RCC_OscConfig+0x48a>
        {
          return HAL_TIMEOUT;
 8001d5e:	2303      	movs	r3, #3
 8001d60:	e173      	b.n	800204a <HAL_RCC_OscConfig+0x772>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001d62:	4b7a      	ldr	r3, [pc, #488]	; (8001f4c <HAL_RCC_OscConfig+0x674>)
 8001d64:	681a      	ldr	r2, [r3, #0]
 8001d66:	2380      	movs	r3, #128	; 0x80
 8001d68:	005b      	lsls	r3, r3, #1
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	d0f0      	beq.n	8001d50 <HAL_RCC_OscConfig+0x478>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	2380      	movs	r3, #128	; 0x80
 8001d74:	005b      	lsls	r3, r3, #1
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d107      	bne.n	8001d8a <HAL_RCC_OscConfig+0x4b2>
 8001d7a:	4b72      	ldr	r3, [pc, #456]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001d7c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d7e:	4b71      	ldr	r3, [pc, #452]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001d80:	2180      	movs	r1, #128	; 0x80
 8001d82:	0049      	lsls	r1, r1, #1
 8001d84:	430a      	orrs	r2, r1
 8001d86:	651a      	str	r2, [r3, #80]	; 0x50
 8001d88:	e031      	b.n	8001dee <HAL_RCC_OscConfig+0x516>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d10c      	bne.n	8001dac <HAL_RCC_OscConfig+0x4d4>
 8001d92:	4b6c      	ldr	r3, [pc, #432]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001d94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001d96:	4b6b      	ldr	r3, [pc, #428]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001d98:	496b      	ldr	r1, [pc, #428]	; (8001f48 <HAL_RCC_OscConfig+0x670>)
 8001d9a:	400a      	ands	r2, r1
 8001d9c:	651a      	str	r2, [r3, #80]	; 0x50
 8001d9e:	4b69      	ldr	r3, [pc, #420]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001da0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001da2:	4b68      	ldr	r3, [pc, #416]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001da4:	496a      	ldr	r1, [pc, #424]	; (8001f50 <HAL_RCC_OscConfig+0x678>)
 8001da6:	400a      	ands	r2, r1
 8001da8:	651a      	str	r2, [r3, #80]	; 0x50
 8001daa:	e020      	b.n	8001dee <HAL_RCC_OscConfig+0x516>
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689a      	ldr	r2, [r3, #8]
 8001db0:	23a0      	movs	r3, #160	; 0xa0
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d10e      	bne.n	8001dd6 <HAL_RCC_OscConfig+0x4fe>
 8001db8:	4b62      	ldr	r3, [pc, #392]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001dba:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dbc:	4b61      	ldr	r3, [pc, #388]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001dbe:	2180      	movs	r1, #128	; 0x80
 8001dc0:	00c9      	lsls	r1, r1, #3
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	651a      	str	r2, [r3, #80]	; 0x50
 8001dc6:	4b5f      	ldr	r3, [pc, #380]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001dc8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dca:	4b5e      	ldr	r3, [pc, #376]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001dcc:	2180      	movs	r1, #128	; 0x80
 8001dce:	0049      	lsls	r1, r1, #1
 8001dd0:	430a      	orrs	r2, r1
 8001dd2:	651a      	str	r2, [r3, #80]	; 0x50
 8001dd4:	e00b      	b.n	8001dee <HAL_RCC_OscConfig+0x516>
 8001dd6:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001dd8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001dda:	4b5a      	ldr	r3, [pc, #360]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001ddc:	495a      	ldr	r1, [pc, #360]	; (8001f48 <HAL_RCC_OscConfig+0x670>)
 8001dde:	400a      	ands	r2, r1
 8001de0:	651a      	str	r2, [r3, #80]	; 0x50
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001de4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001de6:	4b57      	ldr	r3, [pc, #348]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001de8:	4959      	ldr	r1, [pc, #356]	; (8001f50 <HAL_RCC_OscConfig+0x678>)
 8001dea:	400a      	ands	r2, r1
 8001dec:	651a      	str	r2, [r3, #80]	; 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d015      	beq.n	8001e22 <HAL_RCC_OscConfig+0x54a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001df6:	f7ff f8f1 	bl	8000fdc <HAL_GetTick>
 8001dfa:	0003      	movs	r3, r0
 8001dfc:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001dfe:	e009      	b.n	8001e14 <HAL_RCC_OscConfig+0x53c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e00:	f7ff f8ec 	bl	8000fdc <HAL_GetTick>
 8001e04:	0002      	movs	r2, r0
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	1ad3      	subs	r3, r2, r3
 8001e0a:	4a52      	ldr	r2, [pc, #328]	; (8001f54 <HAL_RCC_OscConfig+0x67c>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d901      	bls.n	8001e14 <HAL_RCC_OscConfig+0x53c>
        {
          return HAL_TIMEOUT;
 8001e10:	2303      	movs	r3, #3
 8001e12:	e11a      	b.n	800204a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001e14:	4b4b      	ldr	r3, [pc, #300]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001e16:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	009b      	lsls	r3, r3, #2
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	d0ef      	beq.n	8001e00 <HAL_RCC_OscConfig+0x528>
 8001e20:	e014      	b.n	8001e4c <HAL_RCC_OscConfig+0x574>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e22:	f7ff f8db 	bl	8000fdc <HAL_GetTick>
 8001e26:	0003      	movs	r3, r0
 8001e28:	61bb      	str	r3, [r7, #24]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e2a:	e009      	b.n	8001e40 <HAL_RCC_OscConfig+0x568>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7ff f8d6 	bl	8000fdc <HAL_GetTick>
 8001e30:	0002      	movs	r2, r0
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	4a47      	ldr	r2, [pc, #284]	; (8001f54 <HAL_RCC_OscConfig+0x67c>)
 8001e38:	4293      	cmp	r3, r2
 8001e3a:	d901      	bls.n	8001e40 <HAL_RCC_OscConfig+0x568>
        {
          return HAL_TIMEOUT;
 8001e3c:	2303      	movs	r3, #3
 8001e3e:	e104      	b.n	800204a <HAL_RCC_OscConfig+0x772>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001e40:	4b40      	ldr	r3, [pc, #256]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001e42:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8001e44:	2380      	movs	r3, #128	; 0x80
 8001e46:	009b      	lsls	r3, r3, #2
 8001e48:	4013      	ands	r3, r2
 8001e4a:	d1ef      	bne.n	8001e2c <HAL_RCC_OscConfig+0x554>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e4c:	2327      	movs	r3, #39	; 0x27
 8001e4e:	18fb      	adds	r3, r7, r3
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d105      	bne.n	8001e62 <HAL_RCC_OscConfig+0x58a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e56:	4b3b      	ldr	r3, [pc, #236]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e5a:	4b3a      	ldr	r3, [pc, #232]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001e5c:	493e      	ldr	r1, [pc, #248]	; (8001f58 <HAL_RCC_OscConfig+0x680>)
 8001e5e:	400a      	ands	r2, r1
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	2220      	movs	r2, #32
 8001e68:	4013      	ands	r3, r2
 8001e6a:	d049      	beq.n	8001f00 <HAL_RCC_OscConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	699b      	ldr	r3, [r3, #24]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d026      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x5ea>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8001e74:	4b33      	ldr	r3, [pc, #204]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	4b32      	ldr	r3, [pc, #200]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001e7a:	2101      	movs	r1, #1
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	609a      	str	r2, [r3, #8]
 8001e80:	4b30      	ldr	r3, [pc, #192]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e84:	4b2f      	ldr	r3, [pc, #188]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001e86:	2101      	movs	r1, #1
 8001e88:	430a      	orrs	r2, r1
 8001e8a:	635a      	str	r2, [r3, #52]	; 0x34
 8001e8c:	4b33      	ldr	r3, [pc, #204]	; (8001f5c <HAL_RCC_OscConfig+0x684>)
 8001e8e:	6a1a      	ldr	r2, [r3, #32]
 8001e90:	4b32      	ldr	r3, [pc, #200]	; (8001f5c <HAL_RCC_OscConfig+0x684>)
 8001e92:	2180      	movs	r1, #128	; 0x80
 8001e94:	0189      	lsls	r1, r1, #6
 8001e96:	430a      	orrs	r2, r1
 8001e98:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7ff f89f 	bl	8000fdc <HAL_GetTick>
 8001e9e:	0003      	movs	r3, r0
 8001ea0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x5de>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ea4:	f7ff f89a 	bl	8000fdc <HAL_GetTick>
 8001ea8:	0002      	movs	r2, r0
 8001eaa:	69bb      	ldr	r3, [r7, #24]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x5de>
          {
            return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e0c9      	b.n	800204a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001eb6:	4b23      	ldr	r3, [pc, #140]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2202      	movs	r2, #2
 8001ebc:	4013      	ands	r3, r2
 8001ebe:	d0f1      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x5cc>
 8001ec0:	e01e      	b.n	8001f00 <HAL_RCC_OscConfig+0x628>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8001ec2:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	4b1f      	ldr	r3, [pc, #124]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001ec8:	2101      	movs	r1, #1
 8001eca:	438a      	bics	r2, r1
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	4b23      	ldr	r3, [pc, #140]	; (8001f5c <HAL_RCC_OscConfig+0x684>)
 8001ed0:	6a1a      	ldr	r2, [r3, #32]
 8001ed2:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <HAL_RCC_OscConfig+0x684>)
 8001ed4:	4922      	ldr	r1, [pc, #136]	; (8001f60 <HAL_RCC_OscConfig+0x688>)
 8001ed6:	400a      	ands	r2, r1
 8001ed8:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eda:	f7ff f87f 	bl	8000fdc <HAL_GetTick>
 8001ede:	0003      	movs	r3, r0
 8001ee0:	61bb      	str	r3, [r7, #24]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ee2:	e008      	b.n	8001ef6 <HAL_RCC_OscConfig+0x61e>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ee4:	f7ff f87a 	bl	8000fdc <HAL_GetTick>
 8001ee8:	0002      	movs	r2, r0
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	1ad3      	subs	r3, r2, r3
 8001eee:	2b02      	cmp	r3, #2
 8001ef0:	d901      	bls.n	8001ef6 <HAL_RCC_OscConfig+0x61e>
          {
            return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e0a9      	b.n	800204a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001ef6:	4b13      	ldr	r3, [pc, #76]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001ef8:	689b      	ldr	r3, [r3, #8]
 8001efa:	2202      	movs	r2, #2
 8001efc:	4013      	ands	r3, r2
 8001efe:	d1f1      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x60c>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d100      	bne.n	8001f0a <HAL_RCC_OscConfig+0x632>
 8001f08:	e09e      	b.n	8002048 <HAL_RCC_OscConfig+0x770>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001f0a:	6a3b      	ldr	r3, [r7, #32]
 8001f0c:	2b0c      	cmp	r3, #12
 8001f0e:	d100      	bne.n	8001f12 <HAL_RCC_OscConfig+0x63a>
 8001f10:	e077      	b.n	8002002 <HAL_RCC_OscConfig+0x72a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d158      	bne.n	8001fcc <HAL_RCC_OscConfig+0x6f4>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f1a:	4b0a      	ldr	r3, [pc, #40]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001f1c:	681a      	ldr	r2, [r3, #0]
 8001f1e:	4b09      	ldr	r3, [pc, #36]	; (8001f44 <HAL_RCC_OscConfig+0x66c>)
 8001f20:	4910      	ldr	r1, [pc, #64]	; (8001f64 <HAL_RCC_OscConfig+0x68c>)
 8001f22:	400a      	ands	r2, r1
 8001f24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f26:	f7ff f859 	bl	8000fdc <HAL_GetTick>
 8001f2a:	0003      	movs	r3, r0
 8001f2c:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f2e:	e01b      	b.n	8001f68 <HAL_RCC_OscConfig+0x690>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f30:	f7ff f854 	bl	8000fdc <HAL_GetTick>
 8001f34:	0002      	movs	r2, r0
 8001f36:	69bb      	ldr	r3, [r7, #24]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d914      	bls.n	8001f68 <HAL_RCC_OscConfig+0x690>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e083      	b.n	800204a <HAL_RCC_OscConfig+0x772>
 8001f42:	46c0      	nop			; (mov r8, r8)
 8001f44:	40021000 	.word	0x40021000
 8001f48:	fffffeff 	.word	0xfffffeff
 8001f4c:	40007000 	.word	0x40007000
 8001f50:	fffffbff 	.word	0xfffffbff
 8001f54:	00001388 	.word	0x00001388
 8001f58:	efffffff 	.word	0xefffffff
 8001f5c:	40010000 	.word	0x40010000
 8001f60:	ffffdfff 	.word	0xffffdfff
 8001f64:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001f68:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <HAL_RCC_OscConfig+0x77c>)
 8001f6a:	681a      	ldr	r2, [r3, #0]
 8001f6c:	2380      	movs	r3, #128	; 0x80
 8001f6e:	049b      	lsls	r3, r3, #18
 8001f70:	4013      	ands	r3, r2
 8001f72:	d1dd      	bne.n	8001f30 <HAL_RCC_OscConfig+0x658>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f74:	4b37      	ldr	r3, [pc, #220]	; (8002054 <HAL_RCC_OscConfig+0x77c>)
 8001f76:	68db      	ldr	r3, [r3, #12]
 8001f78:	4a37      	ldr	r2, [pc, #220]	; (8002058 <HAL_RCC_OscConfig+0x780>)
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	0019      	movs	r1, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f86:	431a      	orrs	r2, r3
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	4b31      	ldr	r3, [pc, #196]	; (8002054 <HAL_RCC_OscConfig+0x77c>)
 8001f90:	430a      	orrs	r2, r1
 8001f92:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001f94:	4b2f      	ldr	r3, [pc, #188]	; (8002054 <HAL_RCC_OscConfig+0x77c>)
 8001f96:	681a      	ldr	r2, [r3, #0]
 8001f98:	4b2e      	ldr	r3, [pc, #184]	; (8002054 <HAL_RCC_OscConfig+0x77c>)
 8001f9a:	2180      	movs	r1, #128	; 0x80
 8001f9c:	0449      	lsls	r1, r1, #17
 8001f9e:	430a      	orrs	r2, r1
 8001fa0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fa2:	f7ff f81b 	bl	8000fdc <HAL_GetTick>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x6e6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fac:	f7ff f816 	bl	8000fdc <HAL_GetTick>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x6e6>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e045      	b.n	800204a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8001fbe:	4b25      	ldr	r3, [pc, #148]	; (8002054 <HAL_RCC_OscConfig+0x77c>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	049b      	lsls	r3, r3, #18
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d0f0      	beq.n	8001fac <HAL_RCC_OscConfig+0x6d4>
 8001fca:	e03d      	b.n	8002048 <HAL_RCC_OscConfig+0x770>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001fcc:	4b21      	ldr	r3, [pc, #132]	; (8002054 <HAL_RCC_OscConfig+0x77c>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	4b20      	ldr	r3, [pc, #128]	; (8002054 <HAL_RCC_OscConfig+0x77c>)
 8001fd2:	4922      	ldr	r1, [pc, #136]	; (800205c <HAL_RCC_OscConfig+0x784>)
 8001fd4:	400a      	ands	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fd8:	f7ff f800 	bl	8000fdc <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	61bb      	str	r3, [r7, #24]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x71c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001fe2:	f7fe fffb 	bl	8000fdc <HAL_GetTick>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	69bb      	ldr	r3, [r7, #24]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x71c>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e02a      	b.n	800204a <HAL_RCC_OscConfig+0x772>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8001ff4:	4b17      	ldr	r3, [pc, #92]	; (8002054 <HAL_RCC_OscConfig+0x77c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	049b      	lsls	r3, r3, #18
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d1f0      	bne.n	8001fe2 <HAL_RCC_OscConfig+0x70a>
 8002000:	e022      	b.n	8002048 <HAL_RCC_OscConfig+0x770>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	2b01      	cmp	r3, #1
 8002008:	d101      	bne.n	800200e <HAL_RCC_OscConfig+0x736>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e01d      	b.n	800204a <HAL_RCC_OscConfig+0x772>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800200e:	4b11      	ldr	r3, [pc, #68]	; (8002054 <HAL_RCC_OscConfig+0x77c>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	61fb      	str	r3, [r7, #28]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	2380      	movs	r3, #128	; 0x80
 8002018:	025b      	lsls	r3, r3, #9
 800201a:	401a      	ands	r2, r3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002020:	429a      	cmp	r2, r3
 8002022:	d10f      	bne.n	8002044 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002024:	69fa      	ldr	r2, [r7, #28]
 8002026:	23f0      	movs	r3, #240	; 0xf0
 8002028:	039b      	lsls	r3, r3, #14
 800202a:	401a      	ands	r2, r3
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002030:	429a      	cmp	r2, r3
 8002032:	d107      	bne.n	8002044 <HAL_RCC_OscConfig+0x76c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002034:	69fa      	ldr	r2, [r7, #28]
 8002036:	23c0      	movs	r3, #192	; 0xc0
 8002038:	041b      	lsls	r3, r3, #16
 800203a:	401a      	ands	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002040:	429a      	cmp	r2, r3
 8002042:	d001      	beq.n	8002048 <HAL_RCC_OscConfig+0x770>
        {
          return HAL_ERROR;
 8002044:	2301      	movs	r3, #1
 8002046:	e000      	b.n	800204a <HAL_RCC_OscConfig+0x772>
        }
      }
    }
  }
  return HAL_OK;
 8002048:	2300      	movs	r3, #0
}
 800204a:	0018      	movs	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	b00a      	add	sp, #40	; 0x28
 8002050:	bdb0      	pop	{r4, r5, r7, pc}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	40021000 	.word	0x40021000
 8002058:	ff02ffff 	.word	0xff02ffff
 800205c:	feffffff 	.word	0xfeffffff

08002060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b5b0      	push	{r4, r5, r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e128      	b.n	80022c6 <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b96      	ldr	r3, [pc, #600]	; (80022d0 <HAL_RCC_ClockConfig+0x270>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	2201      	movs	r2, #1
 800207a:	4013      	ands	r3, r2
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d91e      	bls.n	80020c0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b93      	ldr	r3, [pc, #588]	; (80022d0 <HAL_RCC_ClockConfig+0x270>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	2201      	movs	r2, #1
 8002088:	4393      	bics	r3, r2
 800208a:	0019      	movs	r1, r3
 800208c:	4b90      	ldr	r3, [pc, #576]	; (80022d0 <HAL_RCC_ClockConfig+0x270>)
 800208e:	683a      	ldr	r2, [r7, #0]
 8002090:	430a      	orrs	r2, r1
 8002092:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002094:	f7fe ffa2 	bl	8000fdc <HAL_GetTick>
 8002098:	0003      	movs	r3, r0
 800209a:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800209c:	e009      	b.n	80020b2 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800209e:	f7fe ff9d 	bl	8000fdc <HAL_GetTick>
 80020a2:	0002      	movs	r2, r0
 80020a4:	68fb      	ldr	r3, [r7, #12]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	4a8a      	ldr	r2, [pc, #552]	; (80022d4 <HAL_RCC_ClockConfig+0x274>)
 80020aa:	4293      	cmp	r3, r2
 80020ac:	d901      	bls.n	80020b2 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80020ae:	2303      	movs	r3, #3
 80020b0:	e109      	b.n	80022c6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020b2:	4b87      	ldr	r3, [pc, #540]	; (80022d0 <HAL_RCC_ClockConfig+0x270>)
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	2201      	movs	r2, #1
 80020b8:	4013      	ands	r3, r2
 80020ba:	683a      	ldr	r2, [r7, #0]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d1ee      	bne.n	800209e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2202      	movs	r2, #2
 80020c6:	4013      	ands	r3, r2
 80020c8:	d009      	beq.n	80020de <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ca:	4b83      	ldr	r3, [pc, #524]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 80020cc:	68db      	ldr	r3, [r3, #12]
 80020ce:	22f0      	movs	r2, #240	; 0xf0
 80020d0:	4393      	bics	r3, r2
 80020d2:	0019      	movs	r1, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	689a      	ldr	r2, [r3, #8]
 80020d8:	4b7f      	ldr	r3, [pc, #508]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 80020da:	430a      	orrs	r2, r1
 80020dc:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	2201      	movs	r2, #1
 80020e4:	4013      	ands	r3, r2
 80020e6:	d100      	bne.n	80020ea <HAL_RCC_ClockConfig+0x8a>
 80020e8:	e089      	b.n	80021fe <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	685b      	ldr	r3, [r3, #4]
 80020ee:	2b02      	cmp	r3, #2
 80020f0:	d107      	bne.n	8002102 <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80020f2:	4b79      	ldr	r3, [pc, #484]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	2380      	movs	r3, #128	; 0x80
 80020f8:	029b      	lsls	r3, r3, #10
 80020fa:	4013      	ands	r3, r2
 80020fc:	d120      	bne.n	8002140 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e0e1      	b.n	80022c6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	685b      	ldr	r3, [r3, #4]
 8002106:	2b03      	cmp	r3, #3
 8002108:	d107      	bne.n	800211a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800210a:	4b73      	ldr	r3, [pc, #460]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 800210c:	681a      	ldr	r2, [r3, #0]
 800210e:	2380      	movs	r3, #128	; 0x80
 8002110:	049b      	lsls	r3, r3, #18
 8002112:	4013      	ands	r3, r2
 8002114:	d114      	bne.n	8002140 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8002116:	2301      	movs	r3, #1
 8002118:	e0d5      	b.n	80022c6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	685b      	ldr	r3, [r3, #4]
 800211e:	2b01      	cmp	r3, #1
 8002120:	d106      	bne.n	8002130 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002122:	4b6d      	ldr	r3, [pc, #436]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	2204      	movs	r2, #4
 8002128:	4013      	ands	r3, r2
 800212a:	d109      	bne.n	8002140 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	e0ca      	b.n	80022c6 <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002130:	4b69      	ldr	r3, [pc, #420]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	2380      	movs	r3, #128	; 0x80
 8002136:	009b      	lsls	r3, r3, #2
 8002138:	4013      	ands	r3, r2
 800213a:	d101      	bne.n	8002140 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	e0c2      	b.n	80022c6 <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002140:	4b65      	ldr	r3, [pc, #404]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	2203      	movs	r2, #3
 8002146:	4393      	bics	r3, r2
 8002148:	0019      	movs	r1, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	685a      	ldr	r2, [r3, #4]
 800214e:	4b62      	ldr	r3, [pc, #392]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 8002150:	430a      	orrs	r2, r1
 8002152:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002154:	f7fe ff42 	bl	8000fdc <HAL_GetTick>
 8002158:	0003      	movs	r3, r0
 800215a:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	685b      	ldr	r3, [r3, #4]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d111      	bne.n	8002188 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002164:	e009      	b.n	800217a <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002166:	f7fe ff39 	bl	8000fdc <HAL_GetTick>
 800216a:	0002      	movs	r2, r0
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	4a58      	ldr	r2, [pc, #352]	; (80022d4 <HAL_RCC_ClockConfig+0x274>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d901      	bls.n	800217a <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8002176:	2303      	movs	r3, #3
 8002178:	e0a5      	b.n	80022c6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800217a:	4b57      	ldr	r3, [pc, #348]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 800217c:	68db      	ldr	r3, [r3, #12]
 800217e:	220c      	movs	r2, #12
 8002180:	4013      	ands	r3, r2
 8002182:	2b08      	cmp	r3, #8
 8002184:	d1ef      	bne.n	8002166 <HAL_RCC_ClockConfig+0x106>
 8002186:	e03a      	b.n	80021fe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	685b      	ldr	r3, [r3, #4]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d111      	bne.n	80021b4 <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002190:	e009      	b.n	80021a6 <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002192:	f7fe ff23 	bl	8000fdc <HAL_GetTick>
 8002196:	0002      	movs	r2, r0
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	4a4d      	ldr	r2, [pc, #308]	; (80022d4 <HAL_RCC_ClockConfig+0x274>)
 800219e:	4293      	cmp	r3, r2
 80021a0:	d901      	bls.n	80021a6 <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 80021a2:	2303      	movs	r3, #3
 80021a4:	e08f      	b.n	80022c6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a6:	4b4c      	ldr	r3, [pc, #304]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 80021a8:	68db      	ldr	r3, [r3, #12]
 80021aa:	220c      	movs	r2, #12
 80021ac:	4013      	ands	r3, r2
 80021ae:	2b0c      	cmp	r3, #12
 80021b0:	d1ef      	bne.n	8002192 <HAL_RCC_ClockConfig+0x132>
 80021b2:	e024      	b.n	80021fe <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	2b01      	cmp	r3, #1
 80021ba:	d11b      	bne.n	80021f4 <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021bc:	e009      	b.n	80021d2 <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021be:	f7fe ff0d 	bl	8000fdc <HAL_GetTick>
 80021c2:	0002      	movs	r2, r0
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	4a42      	ldr	r2, [pc, #264]	; (80022d4 <HAL_RCC_ClockConfig+0x274>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d901      	bls.n	80021d2 <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e079      	b.n	80022c6 <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80021d2:	4b41      	ldr	r3, [pc, #260]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 80021d4:	68db      	ldr	r3, [r3, #12]
 80021d6:	220c      	movs	r2, #12
 80021d8:	4013      	ands	r3, r2
 80021da:	2b04      	cmp	r3, #4
 80021dc:	d1ef      	bne.n	80021be <HAL_RCC_ClockConfig+0x15e>
 80021de:	e00e      	b.n	80021fe <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80021e0:	f7fe fefc 	bl	8000fdc <HAL_GetTick>
 80021e4:	0002      	movs	r2, r0
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	1ad3      	subs	r3, r2, r3
 80021ea:	4a3a      	ldr	r2, [pc, #232]	; (80022d4 <HAL_RCC_ClockConfig+0x274>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d901      	bls.n	80021f4 <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 80021f0:	2303      	movs	r3, #3
 80021f2:	e068      	b.n	80022c6 <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80021f4:	4b38      	ldr	r3, [pc, #224]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 80021f6:	68db      	ldr	r3, [r3, #12]
 80021f8:	220c      	movs	r2, #12
 80021fa:	4013      	ands	r3, r2
 80021fc:	d1f0      	bne.n	80021e0 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021fe:	4b34      	ldr	r3, [pc, #208]	; (80022d0 <HAL_RCC_ClockConfig+0x270>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	2201      	movs	r2, #1
 8002204:	4013      	ands	r3, r2
 8002206:	683a      	ldr	r2, [r7, #0]
 8002208:	429a      	cmp	r2, r3
 800220a:	d21e      	bcs.n	800224a <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800220c:	4b30      	ldr	r3, [pc, #192]	; (80022d0 <HAL_RCC_ClockConfig+0x270>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	2201      	movs	r2, #1
 8002212:	4393      	bics	r3, r2
 8002214:	0019      	movs	r1, r3
 8002216:	4b2e      	ldr	r3, [pc, #184]	; (80022d0 <HAL_RCC_ClockConfig+0x270>)
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	430a      	orrs	r2, r1
 800221c:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800221e:	f7fe fedd 	bl	8000fdc <HAL_GetTick>
 8002222:	0003      	movs	r3, r0
 8002224:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002226:	e009      	b.n	800223c <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002228:	f7fe fed8 	bl	8000fdc <HAL_GetTick>
 800222c:	0002      	movs	r2, r0
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	1ad3      	subs	r3, r2, r3
 8002232:	4a28      	ldr	r2, [pc, #160]	; (80022d4 <HAL_RCC_ClockConfig+0x274>)
 8002234:	4293      	cmp	r3, r2
 8002236:	d901      	bls.n	800223c <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e044      	b.n	80022c6 <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800223c:	4b24      	ldr	r3, [pc, #144]	; (80022d0 <HAL_RCC_ClockConfig+0x270>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2201      	movs	r2, #1
 8002242:	4013      	ands	r3, r2
 8002244:	683a      	ldr	r2, [r7, #0]
 8002246:	429a      	cmp	r2, r3
 8002248:	d1ee      	bne.n	8002228 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	2204      	movs	r2, #4
 8002250:	4013      	ands	r3, r2
 8002252:	d009      	beq.n	8002268 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002254:	4b20      	ldr	r3, [pc, #128]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a20      	ldr	r2, [pc, #128]	; (80022dc <HAL_RCC_ClockConfig+0x27c>)
 800225a:	4013      	ands	r3, r2
 800225c:	0019      	movs	r1, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	68da      	ldr	r2, [r3, #12]
 8002262:	4b1d      	ldr	r3, [pc, #116]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 8002264:	430a      	orrs	r2, r1
 8002266:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2208      	movs	r2, #8
 800226e:	4013      	ands	r3, r2
 8002270:	d00a      	beq.n	8002288 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002272:	4b19      	ldr	r3, [pc, #100]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 8002274:	68db      	ldr	r3, [r3, #12]
 8002276:	4a1a      	ldr	r2, [pc, #104]	; (80022e0 <HAL_RCC_ClockConfig+0x280>)
 8002278:	4013      	ands	r3, r2
 800227a:	0019      	movs	r1, r3
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	691b      	ldr	r3, [r3, #16]
 8002280:	00da      	lsls	r2, r3, #3
 8002282:	4b15      	ldr	r3, [pc, #84]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 8002284:	430a      	orrs	r2, r1
 8002286:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002288:	f000 f832 	bl	80022f0 <HAL_RCC_GetSysClockFreq>
 800228c:	0001      	movs	r1, r0
 800228e:	4b12      	ldr	r3, [pc, #72]	; (80022d8 <HAL_RCC_ClockConfig+0x278>)
 8002290:	68db      	ldr	r3, [r3, #12]
 8002292:	091b      	lsrs	r3, r3, #4
 8002294:	220f      	movs	r2, #15
 8002296:	4013      	ands	r3, r2
 8002298:	4a12      	ldr	r2, [pc, #72]	; (80022e4 <HAL_RCC_ClockConfig+0x284>)
 800229a:	5cd3      	ldrb	r3, [r2, r3]
 800229c:	000a      	movs	r2, r1
 800229e:	40da      	lsrs	r2, r3
 80022a0:	4b11      	ldr	r3, [pc, #68]	; (80022e8 <HAL_RCC_ClockConfig+0x288>)
 80022a2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80022a4:	4b11      	ldr	r3, [pc, #68]	; (80022ec <HAL_RCC_ClockConfig+0x28c>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	250b      	movs	r5, #11
 80022aa:	197c      	adds	r4, r7, r5
 80022ac:	0018      	movs	r0, r3
 80022ae:	f7fe fe4f 	bl	8000f50 <HAL_InitTick>
 80022b2:	0003      	movs	r3, r0
 80022b4:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 80022b6:	197b      	adds	r3, r7, r5
 80022b8:	781b      	ldrb	r3, [r3, #0]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 80022be:	197b      	adds	r3, r7, r5
 80022c0:	781b      	ldrb	r3, [r3, #0]
 80022c2:	e000      	b.n	80022c6 <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 80022c4:	2300      	movs	r3, #0
}
 80022c6:	0018      	movs	r0, r3
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b004      	add	sp, #16
 80022cc:	bdb0      	pop	{r4, r5, r7, pc}
 80022ce:	46c0      	nop			; (mov r8, r8)
 80022d0:	40022000 	.word	0x40022000
 80022d4:	00001388 	.word	0x00001388
 80022d8:	40021000 	.word	0x40021000
 80022dc:	fffff8ff 	.word	0xfffff8ff
 80022e0:	ffffc7ff 	.word	0xffffc7ff
 80022e4:	080036f0 	.word	0x080036f0
 80022e8:	20000044 	.word	0x20000044
 80022ec:	20000048 	.word	0x20000048

080022f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80022f0:	b5b0      	push	{r4, r5, r7, lr}
 80022f2:	b08e      	sub	sp, #56	; 0x38
 80022f4:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 80022f6:	4b4c      	ldr	r3, [pc, #304]	; (8002428 <HAL_RCC_GetSysClockFreq+0x138>)
 80022f8:	68db      	ldr	r3, [r3, #12]
 80022fa:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80022fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022fe:	230c      	movs	r3, #12
 8002300:	4013      	ands	r3, r2
 8002302:	2b0c      	cmp	r3, #12
 8002304:	d014      	beq.n	8002330 <HAL_RCC_GetSysClockFreq+0x40>
 8002306:	d900      	bls.n	800230a <HAL_RCC_GetSysClockFreq+0x1a>
 8002308:	e07b      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x112>
 800230a:	2b04      	cmp	r3, #4
 800230c:	d002      	beq.n	8002314 <HAL_RCC_GetSysClockFreq+0x24>
 800230e:	2b08      	cmp	r3, #8
 8002310:	d00b      	beq.n	800232a <HAL_RCC_GetSysClockFreq+0x3a>
 8002312:	e076      	b.n	8002402 <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8002314:	4b44      	ldr	r3, [pc, #272]	; (8002428 <HAL_RCC_GetSysClockFreq+0x138>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	2210      	movs	r2, #16
 800231a:	4013      	ands	r3, r2
 800231c:	d002      	beq.n	8002324 <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 800231e:	4b43      	ldr	r3, [pc, #268]	; (800242c <HAL_RCC_GetSysClockFreq+0x13c>)
 8002320:	633b      	str	r3, [r7, #48]	; 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 8002322:	e07c      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 8002324:	4b42      	ldr	r3, [pc, #264]	; (8002430 <HAL_RCC_GetSysClockFreq+0x140>)
 8002326:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002328:	e079      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800232a:	4b42      	ldr	r3, [pc, #264]	; (8002434 <HAL_RCC_GetSysClockFreq+0x144>)
 800232c:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800232e:	e076      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002332:	0c9a      	lsrs	r2, r3, #18
 8002334:	230f      	movs	r3, #15
 8002336:	401a      	ands	r2, r3
 8002338:	4b3f      	ldr	r3, [pc, #252]	; (8002438 <HAL_RCC_GetSysClockFreq+0x148>)
 800233a:	5c9b      	ldrb	r3, [r3, r2]
 800233c:	62bb      	str	r3, [r7, #40]	; 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 800233e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002340:	0d9a      	lsrs	r2, r3, #22
 8002342:	2303      	movs	r3, #3
 8002344:	4013      	ands	r3, r2
 8002346:	3301      	adds	r3, #1
 8002348:	627b      	str	r3, [r7, #36]	; 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800234a:	4b37      	ldr	r3, [pc, #220]	; (8002428 <HAL_RCC_GetSysClockFreq+0x138>)
 800234c:	68da      	ldr	r2, [r3, #12]
 800234e:	2380      	movs	r3, #128	; 0x80
 8002350:	025b      	lsls	r3, r3, #9
 8002352:	4013      	ands	r3, r2
 8002354:	d01a      	beq.n	800238c <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002358:	61bb      	str	r3, [r7, #24]
 800235a:	2300      	movs	r3, #0
 800235c:	61fb      	str	r3, [r7, #28]
 800235e:	4a35      	ldr	r2, [pc, #212]	; (8002434 <HAL_RCC_GetSysClockFreq+0x144>)
 8002360:	2300      	movs	r3, #0
 8002362:	69b8      	ldr	r0, [r7, #24]
 8002364:	69f9      	ldr	r1, [r7, #28]
 8002366:	f7fd ff7b 	bl	8000260 <__aeabi_lmul>
 800236a:	0002      	movs	r2, r0
 800236c:	000b      	movs	r3, r1
 800236e:	0010      	movs	r0, r2
 8002370:	0019      	movs	r1, r3
 8002372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002374:	613b      	str	r3, [r7, #16]
 8002376:	2300      	movs	r3, #0
 8002378:	617b      	str	r3, [r7, #20]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	697b      	ldr	r3, [r7, #20]
 800237e:	f7fd ff4f 	bl	8000220 <__aeabi_uldivmod>
 8002382:	0002      	movs	r2, r0
 8002384:	000b      	movs	r3, r1
 8002386:	0013      	movs	r3, r2
 8002388:	637b      	str	r3, [r7, #52]	; 0x34
 800238a:	e037      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 800238c:	4b26      	ldr	r3, [pc, #152]	; (8002428 <HAL_RCC_GetSysClockFreq+0x138>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	2210      	movs	r2, #16
 8002392:	4013      	ands	r3, r2
 8002394:	d01a      	beq.n	80023cc <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 8002396:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002398:	60bb      	str	r3, [r7, #8]
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4a23      	ldr	r2, [pc, #140]	; (800242c <HAL_RCC_GetSysClockFreq+0x13c>)
 80023a0:	2300      	movs	r3, #0
 80023a2:	68b8      	ldr	r0, [r7, #8]
 80023a4:	68f9      	ldr	r1, [r7, #12]
 80023a6:	f7fd ff5b 	bl	8000260 <__aeabi_lmul>
 80023aa:	0002      	movs	r2, r0
 80023ac:	000b      	movs	r3, r1
 80023ae:	0010      	movs	r0, r2
 80023b0:	0019      	movs	r1, r3
 80023b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023b4:	603b      	str	r3, [r7, #0]
 80023b6:	2300      	movs	r3, #0
 80023b8:	607b      	str	r3, [r7, #4]
 80023ba:	683a      	ldr	r2, [r7, #0]
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	f7fd ff2f 	bl	8000220 <__aeabi_uldivmod>
 80023c2:	0002      	movs	r2, r0
 80023c4:	000b      	movs	r3, r1
 80023c6:	0013      	movs	r3, r2
 80023c8:	637b      	str	r3, [r7, #52]	; 0x34
 80023ca:	e017      	b.n	80023fc <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	0018      	movs	r0, r3
 80023d0:	2300      	movs	r3, #0
 80023d2:	0019      	movs	r1, r3
 80023d4:	4a16      	ldr	r2, [pc, #88]	; (8002430 <HAL_RCC_GetSysClockFreq+0x140>)
 80023d6:	2300      	movs	r3, #0
 80023d8:	f7fd ff42 	bl	8000260 <__aeabi_lmul>
 80023dc:	0002      	movs	r2, r0
 80023de:	000b      	movs	r3, r1
 80023e0:	0010      	movs	r0, r2
 80023e2:	0019      	movs	r1, r3
 80023e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023e6:	001c      	movs	r4, r3
 80023e8:	2300      	movs	r3, #0
 80023ea:	001d      	movs	r5, r3
 80023ec:	0022      	movs	r2, r4
 80023ee:	002b      	movs	r3, r5
 80023f0:	f7fd ff16 	bl	8000220 <__aeabi_uldivmod>
 80023f4:	0002      	movs	r2, r0
 80023f6:	000b      	movs	r3, r1
 80023f8:	0013      	movs	r3, r2
 80023fa:	637b      	str	r3, [r7, #52]	; 0x34
        }
      }
      sysclockfreq = pllvco;
 80023fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80023fe:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002400:	e00d      	b.n	800241e <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_GetSysClockFreq+0x138>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	0b5b      	lsrs	r3, r3, #13
 8002408:	2207      	movs	r2, #7
 800240a:	4013      	ands	r3, r2
 800240c:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 800240e:	6a3b      	ldr	r3, [r7, #32]
 8002410:	3301      	adds	r3, #1
 8002412:	2280      	movs	r2, #128	; 0x80
 8002414:	0212      	lsls	r2, r2, #8
 8002416:	409a      	lsls	r2, r3
 8002418:	0013      	movs	r3, r2
 800241a:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 800241c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 800241e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 8002420:	0018      	movs	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	b00e      	add	sp, #56	; 0x38
 8002426:	bdb0      	pop	{r4, r5, r7, pc}
 8002428:	40021000 	.word	0x40021000
 800242c:	003d0900 	.word	0x003d0900
 8002430:	00f42400 	.word	0x00f42400
 8002434:	007a1200 	.word	0x007a1200
 8002438:	08003700 	.word	0x08003700

0800243c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800243c:	b580      	push	{r7, lr}
 800243e:	b082      	sub	sp, #8
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d101      	bne.n	800244e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800244a:	2301      	movs	r3, #1
 800244c:	e083      	b.n	8002556 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002452:	2b00      	cmp	r3, #0
 8002454:	d109      	bne.n	800246a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	685a      	ldr	r2, [r3, #4]
 800245a:	2382      	movs	r3, #130	; 0x82
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	429a      	cmp	r2, r3
 8002460:	d009      	beq.n	8002476 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2200      	movs	r2, #0
 8002466:	61da      	str	r2, [r3, #28]
 8002468:	e005      	b.n	8002476 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2200      	movs	r2, #0
 800246e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2200      	movs	r2, #0
 8002474:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2251      	movs	r2, #81	; 0x51
 8002480:	5c9b      	ldrb	r3, [r3, r2]
 8002482:	b2db      	uxtb	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d107      	bne.n	8002498 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2250      	movs	r2, #80	; 0x50
 800248c:	2100      	movs	r1, #0
 800248e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0018      	movs	r0, r3
 8002494:	f7fe fc02 	bl	8000c9c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2251      	movs	r2, #81	; 0x51
 800249c:	2102      	movs	r1, #2
 800249e:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	681a      	ldr	r2, [r3, #0]
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	2140      	movs	r1, #64	; 0x40
 80024ac:	438a      	bics	r2, r1
 80024ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	685a      	ldr	r2, [r3, #4]
 80024b4:	2382      	movs	r3, #130	; 0x82
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	401a      	ands	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6899      	ldr	r1, [r3, #8]
 80024be:	2384      	movs	r3, #132	; 0x84
 80024c0:	021b      	lsls	r3, r3, #8
 80024c2:	400b      	ands	r3, r1
 80024c4:	431a      	orrs	r2, r3
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	68d9      	ldr	r1, [r3, #12]
 80024ca:	2380      	movs	r3, #128	; 0x80
 80024cc:	011b      	lsls	r3, r3, #4
 80024ce:	400b      	ands	r3, r1
 80024d0:	431a      	orrs	r2, r3
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	691b      	ldr	r3, [r3, #16]
 80024d6:	2102      	movs	r1, #2
 80024d8:	400b      	ands	r3, r1
 80024da:	431a      	orrs	r2, r3
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	695b      	ldr	r3, [r3, #20]
 80024e0:	2101      	movs	r1, #1
 80024e2:	400b      	ands	r3, r1
 80024e4:	431a      	orrs	r2, r3
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6999      	ldr	r1, [r3, #24]
 80024ea:	2380      	movs	r3, #128	; 0x80
 80024ec:	009b      	lsls	r3, r3, #2
 80024ee:	400b      	ands	r3, r1
 80024f0:	431a      	orrs	r2, r3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	2138      	movs	r1, #56	; 0x38
 80024f8:	400b      	ands	r3, r1
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	2180      	movs	r1, #128	; 0x80
 8002502:	400b      	ands	r3, r1
 8002504:	431a      	orrs	r2, r3
 8002506:	0011      	movs	r1, r2
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800250c:	2380      	movs	r3, #128	; 0x80
 800250e:	019b      	lsls	r3, r3, #6
 8002510:	401a      	ands	r2, r3
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	430a      	orrs	r2, r1
 8002518:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	699b      	ldr	r3, [r3, #24]
 800251e:	0c1b      	lsrs	r3, r3, #16
 8002520:	2204      	movs	r2, #4
 8002522:	4013      	ands	r3, r2
 8002524:	0019      	movs	r1, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800252a:	2210      	movs	r2, #16
 800252c:	401a      	ands	r2, r3
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	430a      	orrs	r2, r1
 8002534:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	69da      	ldr	r2, [r3, #28]
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4907      	ldr	r1, [pc, #28]	; (8002560 <HAL_SPI_Init+0x124>)
 8002542:	400a      	ands	r2, r1
 8002544:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2200      	movs	r2, #0
 800254a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2251      	movs	r2, #81	; 0x51
 8002550:	2101      	movs	r1, #1
 8002552:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002554:	2300      	movs	r3, #0
}
 8002556:	0018      	movs	r0, r3
 8002558:	46bd      	mov	sp, r7
 800255a:	b002      	add	sp, #8
 800255c:	bd80      	pop	{r7, pc}
 800255e:	46c0      	nop			; (mov r8, r8)
 8002560:	fffff7ff 	.word	0xfffff7ff

08002564 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b088      	sub	sp, #32
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	1dbb      	adds	r3, r7, #6
 8002572:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002574:	231f      	movs	r3, #31
 8002576:	18fb      	adds	r3, r7, r3
 8002578:	2200      	movs	r2, #0
 800257a:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2250      	movs	r2, #80	; 0x50
 8002580:	5c9b      	ldrb	r3, [r3, r2]
 8002582:	2b01      	cmp	r3, #1
 8002584:	d101      	bne.n	800258a <HAL_SPI_Transmit+0x26>
 8002586:	2302      	movs	r3, #2
 8002588:	e13e      	b.n	8002808 <HAL_SPI_Transmit+0x2a4>
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	2250      	movs	r2, #80	; 0x50
 800258e:	2101      	movs	r1, #1
 8002590:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002592:	f7fe fd23 	bl	8000fdc <HAL_GetTick>
 8002596:	0003      	movs	r3, r0
 8002598:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800259a:	2316      	movs	r3, #22
 800259c:	18fb      	adds	r3, r7, r3
 800259e:	1dba      	adds	r2, r7, #6
 80025a0:	8812      	ldrh	r2, [r2, #0]
 80025a2:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	2251      	movs	r2, #81	; 0x51
 80025a8:	5c9b      	ldrb	r3, [r3, r2]
 80025aa:	b2db      	uxtb	r3, r3
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d004      	beq.n	80025ba <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 80025b0:	231f      	movs	r3, #31
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	2202      	movs	r2, #2
 80025b6:	701a      	strb	r2, [r3, #0]
    goto error;
 80025b8:	e11b      	b.n	80027f2 <HAL_SPI_Transmit+0x28e>
  }

  if ((pData == NULL) || (Size == 0U))
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d003      	beq.n	80025c8 <HAL_SPI_Transmit+0x64>
 80025c0:	1dbb      	adds	r3, r7, #6
 80025c2:	881b      	ldrh	r3, [r3, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d104      	bne.n	80025d2 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 80025c8:	231f      	movs	r3, #31
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
    goto error;
 80025d0:	e10f      	b.n	80027f2 <HAL_SPI_Transmit+0x28e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2251      	movs	r2, #81	; 0x51
 80025d6:	2103      	movs	r1, #3
 80025d8:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	2200      	movs	r2, #0
 80025de:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	68ba      	ldr	r2, [r7, #8]
 80025e4:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1dba      	adds	r2, r7, #6
 80025ea:	8812      	ldrh	r2, [r2, #0]
 80025ec:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	1dba      	adds	r2, r7, #6
 80025f2:	8812      	ldrh	r2, [r2, #0]
 80025f4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	2200      	movs	r2, #0
 80025fa:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2200      	movs	r2, #0
 8002606:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002608:	68fb      	ldr	r3, [r7, #12]
 800260a:	2200      	movs	r2, #0
 800260c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2200      	movs	r2, #0
 8002612:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	689a      	ldr	r2, [r3, #8]
 8002618:	2380      	movs	r3, #128	; 0x80
 800261a:	021b      	lsls	r3, r3, #8
 800261c:	429a      	cmp	r2, r3
 800261e:	d110      	bne.n	8002642 <HAL_SPI_Transmit+0xde>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	2140      	movs	r1, #64	; 0x40
 800262c:	438a      	bics	r2, r1
 800262e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	2180      	movs	r1, #128	; 0x80
 800263c:	01c9      	lsls	r1, r1, #7
 800263e:	430a      	orrs	r2, r1
 8002640:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	2240      	movs	r2, #64	; 0x40
 800264a:	4013      	ands	r3, r2
 800264c:	2b40      	cmp	r3, #64	; 0x40
 800264e:	d007      	beq.n	8002660 <HAL_SPI_Transmit+0xfc>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	681a      	ldr	r2, [r3, #0]
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	2140      	movs	r1, #64	; 0x40
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	68da      	ldr	r2, [r3, #12]
 8002664:	2380      	movs	r3, #128	; 0x80
 8002666:	011b      	lsls	r3, r3, #4
 8002668:	429a      	cmp	r2, r3
 800266a:	d14e      	bne.n	800270a <HAL_SPI_Transmit+0x1a6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	685b      	ldr	r3, [r3, #4]
 8002670:	2b00      	cmp	r3, #0
 8002672:	d004      	beq.n	800267e <HAL_SPI_Transmit+0x11a>
 8002674:	2316      	movs	r3, #22
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	881b      	ldrh	r3, [r3, #0]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d13f      	bne.n	80026fe <HAL_SPI_Transmit+0x19a>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002682:	881a      	ldrh	r2, [r3, #0]
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800268e:	1c9a      	adds	r2, r3, #2
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002698:	b29b      	uxth	r3, r3
 800269a:	3b01      	subs	r3, #1
 800269c:	b29a      	uxth	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80026a2:	e02c      	b.n	80026fe <HAL_SPI_Transmit+0x19a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	2202      	movs	r2, #2
 80026ac:	4013      	ands	r3, r2
 80026ae:	2b02      	cmp	r3, #2
 80026b0:	d112      	bne.n	80026d8 <HAL_SPI_Transmit+0x174>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026b6:	881a      	ldrh	r2, [r3, #0]
 80026b8:	68fb      	ldr	r3, [r7, #12]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c2:	1c9a      	adds	r2, r3, #2
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	3b01      	subs	r3, #1
 80026d0:	b29a      	uxth	r2, r3
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	86da      	strh	r2, [r3, #54]	; 0x36
 80026d6:	e012      	b.n	80026fe <HAL_SPI_Transmit+0x19a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80026d8:	f7fe fc80 	bl	8000fdc <HAL_GetTick>
 80026dc:	0002      	movs	r2, r0
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	1ad3      	subs	r3, r2, r3
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d802      	bhi.n	80026ee <HAL_SPI_Transmit+0x18a>
 80026e8:	683b      	ldr	r3, [r7, #0]
 80026ea:	3301      	adds	r3, #1
 80026ec:	d102      	bne.n	80026f4 <HAL_SPI_Transmit+0x190>
 80026ee:	683b      	ldr	r3, [r7, #0]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d104      	bne.n	80026fe <HAL_SPI_Transmit+0x19a>
        {
          errorcode = HAL_TIMEOUT;
 80026f4:	231f      	movs	r3, #31
 80026f6:	18fb      	adds	r3, r7, r3
 80026f8:	2203      	movs	r2, #3
 80026fa:	701a      	strb	r2, [r3, #0]
          goto error;
 80026fc:	e079      	b.n	80027f2 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002702:	b29b      	uxth	r3, r3
 8002704:	2b00      	cmp	r3, #0
 8002706:	d1cd      	bne.n	80026a4 <HAL_SPI_Transmit+0x140>
 8002708:	e04f      	b.n	80027aa <HAL_SPI_Transmit+0x246>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d004      	beq.n	800271c <HAL_SPI_Transmit+0x1b8>
 8002712:	2316      	movs	r3, #22
 8002714:	18fb      	adds	r3, r7, r3
 8002716:	881b      	ldrh	r3, [r3, #0]
 8002718:	2b01      	cmp	r3, #1
 800271a:	d141      	bne.n	80027a0 <HAL_SPI_Transmit+0x23c>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	330c      	adds	r3, #12
 8002726:	7812      	ldrb	r2, [r2, #0]
 8002728:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800272e:	1c5a      	adds	r2, r3, #1
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002738:	b29b      	uxth	r3, r3
 800273a:	3b01      	subs	r3, #1
 800273c:	b29a      	uxth	r2, r3
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002742:	e02d      	b.n	80027a0 <HAL_SPI_Transmit+0x23c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002744:	68fb      	ldr	r3, [r7, #12]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2202      	movs	r2, #2
 800274c:	4013      	ands	r3, r2
 800274e:	2b02      	cmp	r3, #2
 8002750:	d113      	bne.n	800277a <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002752:	68fb      	ldr	r3, [r7, #12]
 8002754:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	330c      	adds	r3, #12
 800275c:	7812      	ldrb	r2, [r2, #0]
 800275e:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002764:	1c5a      	adds	r2, r3, #1
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800276e:	b29b      	uxth	r3, r3
 8002770:	3b01      	subs	r3, #1
 8002772:	b29a      	uxth	r2, r3
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	86da      	strh	r2, [r3, #54]	; 0x36
 8002778:	e012      	b.n	80027a0 <HAL_SPI_Transmit+0x23c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800277a:	f7fe fc2f 	bl	8000fdc <HAL_GetTick>
 800277e:	0002      	movs	r2, r0
 8002780:	69bb      	ldr	r3, [r7, #24]
 8002782:	1ad3      	subs	r3, r2, r3
 8002784:	683a      	ldr	r2, [r7, #0]
 8002786:	429a      	cmp	r2, r3
 8002788:	d802      	bhi.n	8002790 <HAL_SPI_Transmit+0x22c>
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	3301      	adds	r3, #1
 800278e:	d102      	bne.n	8002796 <HAL_SPI_Transmit+0x232>
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d104      	bne.n	80027a0 <HAL_SPI_Transmit+0x23c>
        {
          errorcode = HAL_TIMEOUT;
 8002796:	231f      	movs	r3, #31
 8002798:	18fb      	adds	r3, r7, r3
 800279a:	2203      	movs	r2, #3
 800279c:	701a      	strb	r2, [r3, #0]
          goto error;
 800279e:	e028      	b.n	80027f2 <HAL_SPI_Transmit+0x28e>
    while (hspi->TxXferCount > 0U)
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80027a4:	b29b      	uxth	r3, r3
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d1cc      	bne.n	8002744 <HAL_SPI_Transmit+0x1e0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	6839      	ldr	r1, [r7, #0]
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	0018      	movs	r0, r3
 80027b2:	f000 fd23 	bl	80031fc <SPI_EndRxTxTransaction>
 80027b6:	1e03      	subs	r3, r0, #0
 80027b8:	d002      	beq.n	80027c0 <HAL_SPI_Transmit+0x25c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	2220      	movs	r2, #32
 80027be:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d10a      	bne.n	80027de <HAL_SPI_Transmit+0x27a>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80027c8:	2300      	movs	r3, #0
 80027ca:	613b      	str	r3, [r7, #16]
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68db      	ldr	r3, [r3, #12]
 80027d2:	613b      	str	r3, [r7, #16]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	613b      	str	r3, [r7, #16]
 80027dc:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <HAL_SPI_Transmit+0x28c>
  {
    errorcode = HAL_ERROR;
 80027e6:	231f      	movs	r3, #31
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2201      	movs	r2, #1
 80027ec:	701a      	strb	r2, [r3, #0]
 80027ee:	e000      	b.n	80027f2 <HAL_SPI_Transmit+0x28e>
  }

error:
 80027f0:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	2251      	movs	r2, #81	; 0x51
 80027f6:	2101      	movs	r1, #1
 80027f8:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2250      	movs	r2, #80	; 0x50
 80027fe:	2100      	movs	r1, #0
 8002800:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002802:	231f      	movs	r3, #31
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	781b      	ldrb	r3, [r3, #0]
}
 8002808:	0018      	movs	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	b008      	add	sp, #32
 800280e:	bd80      	pop	{r7, pc}

08002810 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002810:	b590      	push	{r4, r7, lr}
 8002812:	b089      	sub	sp, #36	; 0x24
 8002814:	af02      	add	r7, sp, #8
 8002816:	60f8      	str	r0, [r7, #12]
 8002818:	60b9      	str	r1, [r7, #8]
 800281a:	603b      	str	r3, [r7, #0]
 800281c:	1dbb      	adds	r3, r7, #6
 800281e:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002820:	2317      	movs	r3, #23
 8002822:	18fb      	adds	r3, r7, r3
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
    /* in this case, 16-bit access is performed on Data
       So, check Data is 16-bit aligned address */
    assert_param(IS_SPI_16BIT_ALIGNED_ADDRESS(pData));
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	685a      	ldr	r2, [r3, #4]
 800282c:	2382      	movs	r3, #130	; 0x82
 800282e:	005b      	lsls	r3, r3, #1
 8002830:	429a      	cmp	r2, r3
 8002832:	d113      	bne.n	800285c <HAL_SPI_Receive+0x4c>
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	689b      	ldr	r3, [r3, #8]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d10f      	bne.n	800285c <HAL_SPI_Receive+0x4c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	2251      	movs	r2, #81	; 0x51
 8002840:	2104      	movs	r1, #4
 8002842:	5499      	strb	r1, [r3, r2]
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002844:	1dbb      	adds	r3, r7, #6
 8002846:	881c      	ldrh	r4, [r3, #0]
 8002848:	68ba      	ldr	r2, [r7, #8]
 800284a:	68b9      	ldr	r1, [r7, #8]
 800284c:	68f8      	ldr	r0, [r7, #12]
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	9300      	str	r3, [sp, #0]
 8002852:	0023      	movs	r3, r4
 8002854:	f000 f902 	bl	8002a5c <HAL_SPI_TransmitReceive>
 8002858:	0003      	movs	r3, r0
 800285a:	e0f9      	b.n	8002a50 <HAL_SPI_Receive+0x240>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	2250      	movs	r2, #80	; 0x50
 8002860:	5c9b      	ldrb	r3, [r3, r2]
 8002862:	2b01      	cmp	r3, #1
 8002864:	d101      	bne.n	800286a <HAL_SPI_Receive+0x5a>
 8002866:	2302      	movs	r3, #2
 8002868:	e0f2      	b.n	8002a50 <HAL_SPI_Receive+0x240>
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	2250      	movs	r2, #80	; 0x50
 800286e:	2101      	movs	r1, #1
 8002870:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002872:	f7fe fbb3 	bl	8000fdc <HAL_GetTick>
 8002876:	0003      	movs	r3, r0
 8002878:	613b      	str	r3, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	2251      	movs	r2, #81	; 0x51
 800287e:	5c9b      	ldrb	r3, [r3, r2]
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b01      	cmp	r3, #1
 8002884:	d004      	beq.n	8002890 <HAL_SPI_Receive+0x80>
  {
    errorcode = HAL_BUSY;
 8002886:	2317      	movs	r3, #23
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	2202      	movs	r2, #2
 800288c:	701a      	strb	r2, [r3, #0]
    goto error;
 800288e:	e0d4      	b.n	8002a3a <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 8002890:	68bb      	ldr	r3, [r7, #8]
 8002892:	2b00      	cmp	r3, #0
 8002894:	d003      	beq.n	800289e <HAL_SPI_Receive+0x8e>
 8002896:	1dbb      	adds	r3, r7, #6
 8002898:	881b      	ldrh	r3, [r3, #0]
 800289a:	2b00      	cmp	r3, #0
 800289c:	d104      	bne.n	80028a8 <HAL_SPI_Receive+0x98>
  {
    errorcode = HAL_ERROR;
 800289e:	2317      	movs	r3, #23
 80028a0:	18fb      	adds	r3, r7, r3
 80028a2:	2201      	movs	r2, #1
 80028a4:	701a      	strb	r2, [r3, #0]
    goto error;
 80028a6:	e0c8      	b.n	8002a3a <HAL_SPI_Receive+0x22a>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	2251      	movs	r2, #81	; 0x51
 80028ac:	2104      	movs	r1, #4
 80028ae:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	2200      	movs	r2, #0
 80028b4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	68ba      	ldr	r2, [r7, #8]
 80028ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	1dba      	adds	r2, r7, #6
 80028c0:	8812      	ldrh	r2, [r2, #0]
 80028c2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	1dba      	adds	r2, r7, #6
 80028c8:	8812      	ldrh	r2, [r2, #0]
 80028ca:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	2200      	movs	r2, #0
 80028d6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	2200      	movs	r2, #0
 80028dc:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	2200      	movs	r2, #0
 80028e2:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	2200      	movs	r2, #0
 80028e8:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	689a      	ldr	r2, [r3, #8]
 80028ee:	2380      	movs	r3, #128	; 0x80
 80028f0:	021b      	lsls	r3, r3, #8
 80028f2:	429a      	cmp	r2, r3
 80028f4:	d10f      	bne.n	8002916 <HAL_SPI_Receive+0x106>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	681a      	ldr	r2, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	2140      	movs	r1, #64	; 0x40
 8002902:	438a      	bics	r2, r1
 8002904:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4951      	ldr	r1, [pc, #324]	; (8002a58 <HAL_SPI_Receive+0x248>)
 8002912:	400a      	ands	r2, r1
 8002914:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	2240      	movs	r2, #64	; 0x40
 800291e:	4013      	ands	r3, r2
 8002920:	2b40      	cmp	r3, #64	; 0x40
 8002922:	d007      	beq.n	8002934 <HAL_SPI_Receive+0x124>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	681a      	ldr	r2, [r3, #0]
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2140      	movs	r1, #64	; 0x40
 8002930:	430a      	orrs	r2, r1
 8002932:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	68db      	ldr	r3, [r3, #12]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d164      	bne.n	8002a06 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800293c:	e02f      	b.n	800299e <HAL_SPI_Receive+0x18e>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2201      	movs	r2, #1
 8002946:	4013      	ands	r3, r2
 8002948:	2b01      	cmp	r3, #1
 800294a:	d115      	bne.n	8002978 <HAL_SPI_Receive+0x168>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	330c      	adds	r3, #12
 8002952:	001a      	movs	r2, r3
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002958:	7812      	ldrb	r2, [r2, #0]
 800295a:	b2d2      	uxtb	r2, r2
 800295c:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002962:	1c5a      	adds	r2, r3, #1
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800296c:	b29b      	uxth	r3, r3
 800296e:	3b01      	subs	r3, #1
 8002970:	b29a      	uxth	r2, r3
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002976:	e012      	b.n	800299e <HAL_SPI_Receive+0x18e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002978:	f7fe fb30 	bl	8000fdc <HAL_GetTick>
 800297c:	0002      	movs	r2, r0
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	1ad3      	subs	r3, r2, r3
 8002982:	683a      	ldr	r2, [r7, #0]
 8002984:	429a      	cmp	r2, r3
 8002986:	d802      	bhi.n	800298e <HAL_SPI_Receive+0x17e>
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	3301      	adds	r3, #1
 800298c:	d102      	bne.n	8002994 <HAL_SPI_Receive+0x184>
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	2b00      	cmp	r3, #0
 8002992:	d104      	bne.n	800299e <HAL_SPI_Receive+0x18e>
        {
          errorcode = HAL_TIMEOUT;
 8002994:	2317      	movs	r3, #23
 8002996:	18fb      	adds	r3, r7, r3
 8002998:	2203      	movs	r2, #3
 800299a:	701a      	strb	r2, [r3, #0]
          goto error;
 800299c:	e04d      	b.n	8002a3a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029a2:	b29b      	uxth	r3, r3
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d1ca      	bne.n	800293e <HAL_SPI_Receive+0x12e>
 80029a8:	e032      	b.n	8002a10 <HAL_SPI_Receive+0x200>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	689b      	ldr	r3, [r3, #8]
 80029b0:	2201      	movs	r2, #1
 80029b2:	4013      	ands	r3, r2
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d113      	bne.n	80029e0 <HAL_SPI_Receive+0x1d0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68da      	ldr	r2, [r3, #12]
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029c2:	b292      	uxth	r2, r2
 80029c4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ca:	1c9a      	adds	r2, r3, #2
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029d4:	b29b      	uxth	r3, r3
 80029d6:	3b01      	subs	r3, #1
 80029d8:	b29a      	uxth	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	87da      	strh	r2, [r3, #62]	; 0x3e
 80029de:	e012      	b.n	8002a06 <HAL_SPI_Receive+0x1f6>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80029e0:	f7fe fafc 	bl	8000fdc <HAL_GetTick>
 80029e4:	0002      	movs	r2, r0
 80029e6:	693b      	ldr	r3, [r7, #16]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	683a      	ldr	r2, [r7, #0]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d802      	bhi.n	80029f6 <HAL_SPI_Receive+0x1e6>
 80029f0:	683b      	ldr	r3, [r7, #0]
 80029f2:	3301      	adds	r3, #1
 80029f4:	d102      	bne.n	80029fc <HAL_SPI_Receive+0x1ec>
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d104      	bne.n	8002a06 <HAL_SPI_Receive+0x1f6>
        {
          errorcode = HAL_TIMEOUT;
 80029fc:	2317      	movs	r3, #23
 80029fe:	18fb      	adds	r3, r7, r3
 8002a00:	2203      	movs	r2, #3
 8002a02:	701a      	strb	r2, [r3, #0]
          goto error;
 8002a04:	e019      	b.n	8002a3a <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d1cc      	bne.n	80029aa <HAL_SPI_Receive+0x19a>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002a10:	693a      	ldr	r2, [r7, #16]
 8002a12:	6839      	ldr	r1, [r7, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 fb86 	bl	8003128 <SPI_EndRxTransaction>
 8002a1c:	1e03      	subs	r3, r0, #0
 8002a1e:	d002      	beq.n	8002a26 <HAL_SPI_Receive+0x216>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	2220      	movs	r2, #32
 8002a24:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d004      	beq.n	8002a38 <HAL_SPI_Receive+0x228>
  {
    errorcode = HAL_ERROR;
 8002a2e:	2317      	movs	r3, #23
 8002a30:	18fb      	adds	r3, r7, r3
 8002a32:	2201      	movs	r2, #1
 8002a34:	701a      	strb	r2, [r3, #0]
 8002a36:	e000      	b.n	8002a3a <HAL_SPI_Receive+0x22a>
  }

error :
 8002a38:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2251      	movs	r2, #81	; 0x51
 8002a3e:	2101      	movs	r1, #1
 8002a40:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2250      	movs	r2, #80	; 0x50
 8002a46:	2100      	movs	r1, #0
 8002a48:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002a4a:	2317      	movs	r3, #23
 8002a4c:	18fb      	adds	r3, r7, r3
 8002a4e:	781b      	ldrb	r3, [r3, #0]
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b007      	add	sp, #28
 8002a56:	bd90      	pop	{r4, r7, pc}
 8002a58:	ffffbfff 	.word	0xffffbfff

08002a5c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08c      	sub	sp, #48	; 0x30
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
 8002a68:	001a      	movs	r2, r3
 8002a6a:	1cbb      	adds	r3, r7, #2
 8002a6c:	801a      	strh	r2, [r3, #0]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002a72:	232b      	movs	r3, #43	; 0x2b
 8002a74:	18fb      	adds	r3, r7, r3
 8002a76:	2200      	movs	r2, #0
 8002a78:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2250      	movs	r2, #80	; 0x50
 8002a7e:	5c9b      	ldrb	r3, [r3, r2]
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d101      	bne.n	8002a88 <HAL_SPI_TransmitReceive+0x2c>
 8002a84:	2302      	movs	r3, #2
 8002a86:	e1a0      	b.n	8002dca <HAL_SPI_TransmitReceive+0x36e>
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	2250      	movs	r2, #80	; 0x50
 8002a8c:	2101      	movs	r1, #1
 8002a8e:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002a90:	f7fe faa4 	bl	8000fdc <HAL_GetTick>
 8002a94:	0003      	movs	r3, r0
 8002a96:	627b      	str	r3, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002a98:	2023      	movs	r0, #35	; 0x23
 8002a9a:	183b      	adds	r3, r7, r0
 8002a9c:	68fa      	ldr	r2, [r7, #12]
 8002a9e:	2151      	movs	r1, #81	; 0x51
 8002aa0:	5c52      	ldrb	r2, [r2, r1]
 8002aa2:	701a      	strb	r2, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002aaa:	231a      	movs	r3, #26
 8002aac:	18fb      	adds	r3, r7, r3
 8002aae:	1cba      	adds	r2, r7, #2
 8002ab0:	8812      	ldrh	r2, [r2, #0]
 8002ab2:	801a      	strh	r2, [r3, #0]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ab4:	183b      	adds	r3, r7, r0
 8002ab6:	781b      	ldrb	r3, [r3, #0]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d011      	beq.n	8002ae0 <HAL_SPI_TransmitReceive+0x84>
 8002abc:	69fa      	ldr	r2, [r7, #28]
 8002abe:	2382      	movs	r3, #130	; 0x82
 8002ac0:	005b      	lsls	r3, r3, #1
 8002ac2:	429a      	cmp	r2, r3
 8002ac4:	d107      	bne.n	8002ad6 <HAL_SPI_TransmitReceive+0x7a>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	689b      	ldr	r3, [r3, #8]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <HAL_SPI_TransmitReceive+0x7a>
 8002ace:	183b      	adds	r3, r7, r0
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b04      	cmp	r3, #4
 8002ad4:	d004      	beq.n	8002ae0 <HAL_SPI_TransmitReceive+0x84>
  {
    errorcode = HAL_BUSY;
 8002ad6:	232b      	movs	r3, #43	; 0x2b
 8002ad8:	18fb      	adds	r3, r7, r3
 8002ada:	2202      	movs	r2, #2
 8002adc:	701a      	strb	r2, [r3, #0]
    goto error;
 8002ade:	e169      	b.n	8002db4 <HAL_SPI_TransmitReceive+0x358>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d006      	beq.n	8002af4 <HAL_SPI_TransmitReceive+0x98>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d003      	beq.n	8002af4 <HAL_SPI_TransmitReceive+0x98>
 8002aec:	1cbb      	adds	r3, r7, #2
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d104      	bne.n	8002afe <HAL_SPI_TransmitReceive+0xa2>
  {
    errorcode = HAL_ERROR;
 8002af4:	232b      	movs	r3, #43	; 0x2b
 8002af6:	18fb      	adds	r3, r7, r3
 8002af8:	2201      	movs	r2, #1
 8002afa:	701a      	strb	r2, [r3, #0]
    goto error;
 8002afc:	e15a      	b.n	8002db4 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2251      	movs	r2, #81	; 0x51
 8002b02:	5c9b      	ldrb	r3, [r3, r2]
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b04      	cmp	r3, #4
 8002b08:	d003      	beq.n	8002b12 <HAL_SPI_TransmitReceive+0xb6>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	2251      	movs	r2, #81	; 0x51
 8002b0e:	2105      	movs	r1, #5
 8002b10:	5499      	strb	r1, [r3, r2]
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2200      	movs	r2, #0
 8002b16:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	687a      	ldr	r2, [r7, #4]
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	1cba      	adds	r2, r7, #2
 8002b22:	8812      	ldrh	r2, [r2, #0]
 8002b24:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	1cba      	adds	r2, r7, #2
 8002b2a:	8812      	ldrh	r2, [r2, #0]
 8002b2c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	68ba      	ldr	r2, [r7, #8]
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	1cba      	adds	r2, r7, #2
 8002b38:	8812      	ldrh	r2, [r2, #0]
 8002b3a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1cba      	adds	r2, r7, #2
 8002b40:	8812      	ldrh	r2, [r2, #0]
 8002b42:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2200      	movs	r2, #0
 8002b48:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	2240      	movs	r2, #64	; 0x40
 8002b58:	4013      	ands	r3, r2
 8002b5a:	2b40      	cmp	r3, #64	; 0x40
 8002b5c:	d007      	beq.n	8002b6e <HAL_SPI_TransmitReceive+0x112>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681a      	ldr	r2, [r3, #0]
 8002b64:	68fb      	ldr	r3, [r7, #12]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2140      	movs	r1, #64	; 0x40
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	68da      	ldr	r2, [r3, #12]
 8002b72:	2380      	movs	r3, #128	; 0x80
 8002b74:	011b      	lsls	r3, r3, #4
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d000      	beq.n	8002b7c <HAL_SPI_TransmitReceive+0x120>
 8002b7a:	e07a      	b.n	8002c72 <HAL_SPI_TransmitReceive+0x216>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d004      	beq.n	8002b8e <HAL_SPI_TransmitReceive+0x132>
 8002b84:	231a      	movs	r3, #26
 8002b86:	18fb      	adds	r3, r7, r3
 8002b88:	881b      	ldrh	r3, [r3, #0]
 8002b8a:	2b01      	cmp	r3, #1
 8002b8c:	d166      	bne.n	8002c5c <HAL_SPI_TransmitReceive+0x200>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	881a      	ldrh	r2, [r3, #0]
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002b9a:	68fb      	ldr	r3, [r7, #12]
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	1c9a      	adds	r2, r3, #2
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	3b01      	subs	r3, #1
 8002bac:	b29a      	uxth	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002bb2:	e053      	b.n	8002c5c <HAL_SPI_TransmitReceive+0x200>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	2202      	movs	r2, #2
 8002bbc:	4013      	ands	r3, r2
 8002bbe:	2b02      	cmp	r3, #2
 8002bc0:	d11b      	bne.n	8002bfa <HAL_SPI_TransmitReceive+0x19e>
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d016      	beq.n	8002bfa <HAL_SPI_TransmitReceive+0x19e>
 8002bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bce:	2b01      	cmp	r3, #1
 8002bd0:	d113      	bne.n	8002bfa <HAL_SPI_TransmitReceive+0x19e>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bd6:	881a      	ldrh	r2, [r3, #0]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002be2:	1c9a      	adds	r2, r3, #2
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002bec:	b29b      	uxth	r3, r3
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	b29a      	uxth	r2, r3
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	689b      	ldr	r3, [r3, #8]
 8002c00:	2201      	movs	r2, #1
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d119      	bne.n	8002c3c <HAL_SPI_TransmitReceive+0x1e0>
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c0c:	b29b      	uxth	r3, r3
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d014      	beq.n	8002c3c <HAL_SPI_TransmitReceive+0x1e0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68da      	ldr	r2, [r3, #12]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c1c:	b292      	uxth	r2, r2
 8002c1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c24:	1c9a      	adds	r2, r3, #2
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	3b01      	subs	r3, #1
 8002c32:	b29a      	uxth	r2, r3
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002c3c:	f7fe f9ce 	bl	8000fdc <HAL_GetTick>
 8002c40:	0002      	movs	r2, r0
 8002c42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c44:	1ad3      	subs	r3, r2, r3
 8002c46:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d807      	bhi.n	8002c5c <HAL_SPI_TransmitReceive+0x200>
 8002c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c4e:	3301      	adds	r3, #1
 8002c50:	d004      	beq.n	8002c5c <HAL_SPI_TransmitReceive+0x200>
      {
        errorcode = HAL_TIMEOUT;
 8002c52:	232b      	movs	r3, #43	; 0x2b
 8002c54:	18fb      	adds	r3, r7, r3
 8002c56:	2203      	movs	r2, #3
 8002c58:	701a      	strb	r2, [r3, #0]
        goto error;
 8002c5a:	e0ab      	b.n	8002db4 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002c60:	b29b      	uxth	r3, r3
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d1a6      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x158>
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002c6a:	b29b      	uxth	r3, r3
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d1a1      	bne.n	8002bb4 <HAL_SPI_TransmitReceive+0x158>
 8002c70:	e07f      	b.n	8002d72 <HAL_SPI_TransmitReceive+0x316>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d005      	beq.n	8002c86 <HAL_SPI_TransmitReceive+0x22a>
 8002c7a:	231a      	movs	r3, #26
 8002c7c:	18fb      	adds	r3, r7, r3
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	2b01      	cmp	r3, #1
 8002c82:	d000      	beq.n	8002c86 <HAL_SPI_TransmitReceive+0x22a>
 8002c84:	e06b      	b.n	8002d5e <HAL_SPI_TransmitReceive+0x302>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	330c      	adds	r3, #12
 8002c90:	7812      	ldrb	r2, [r2, #0]
 8002c92:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c98:	1c5a      	adds	r2, r3, #1
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	3b01      	subs	r3, #1
 8002ca6:	b29a      	uxth	r2, r3
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002cac:	e057      	b.n	8002d5e <HAL_SPI_TransmitReceive+0x302>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	689b      	ldr	r3, [r3, #8]
 8002cb4:	2202      	movs	r2, #2
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d11c      	bne.n	8002cf6 <HAL_SPI_TransmitReceive+0x29a>
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002cc0:	b29b      	uxth	r3, r3
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d017      	beq.n	8002cf6 <HAL_SPI_TransmitReceive+0x29a>
 8002cc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d114      	bne.n	8002cf6 <HAL_SPI_TransmitReceive+0x29a>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	330c      	adds	r3, #12
 8002cd6:	7812      	ldrb	r2, [r2, #0]
 8002cd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cde:	1c5a      	adds	r2, r3, #1
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ce8:	b29b      	uxth	r3, r3
 8002cea:	3b01      	subs	r3, #1
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689b      	ldr	r3, [r3, #8]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	4013      	ands	r3, r2
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d119      	bne.n	8002d38 <HAL_SPI_TransmitReceive+0x2dc>
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d014      	beq.n	8002d38 <HAL_SPI_TransmitReceive+0x2dc>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	68da      	ldr	r2, [r3, #12]
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d18:	b2d2      	uxtb	r2, r2
 8002d1a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d20:	1c5a      	adds	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d2a:	b29b      	uxth	r3, r3
 8002d2c:	3b01      	subs	r3, #1
 8002d2e:	b29a      	uxth	r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8002d34:	2301      	movs	r3, #1
 8002d36:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002d38:	f7fe f950 	bl	8000fdc <HAL_GetTick>
 8002d3c:	0002      	movs	r2, r0
 8002d3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d40:	1ad3      	subs	r3, r2, r3
 8002d42:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002d44:	429a      	cmp	r2, r3
 8002d46:	d802      	bhi.n	8002d4e <HAL_SPI_TransmitReceive+0x2f2>
 8002d48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d4a:	3301      	adds	r3, #1
 8002d4c:	d102      	bne.n	8002d54 <HAL_SPI_TransmitReceive+0x2f8>
 8002d4e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d104      	bne.n	8002d5e <HAL_SPI_TransmitReceive+0x302>
      {
        errorcode = HAL_TIMEOUT;
 8002d54:	232b      	movs	r3, #43	; 0x2b
 8002d56:	18fb      	adds	r3, r7, r3
 8002d58:	2203      	movs	r2, #3
 8002d5a:	701a      	strb	r2, [r3, #0]
        goto error;
 8002d5c:	e02a      	b.n	8002db4 <HAL_SPI_TransmitReceive+0x358>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002d62:	b29b      	uxth	r3, r3
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d1a2      	bne.n	8002cae <HAL_SPI_TransmitReceive+0x252>
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002d6c:	b29b      	uxth	r3, r3
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d19d      	bne.n	8002cae <HAL_SPI_TransmitReceive+0x252>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002d72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d74:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	0018      	movs	r0, r3
 8002d7a:	f000 fa3f 	bl	80031fc <SPI_EndRxTxTransaction>
 8002d7e:	1e03      	subs	r3, r0, #0
 8002d80:	d007      	beq.n	8002d92 <HAL_SPI_TransmitReceive+0x336>
  {
    errorcode = HAL_ERROR;
 8002d82:	232b      	movs	r3, #43	; 0x2b
 8002d84:	18fb      	adds	r3, r7, r3
 8002d86:	2201      	movs	r2, #1
 8002d88:	701a      	strb	r2, [r3, #0]
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2220      	movs	r2, #32
 8002d8e:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8002d90:	e010      	b.n	8002db4 <HAL_SPI_TransmitReceive+0x358>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d10b      	bne.n	8002db2 <HAL_SPI_TransmitReceive+0x356>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002d9a:	2300      	movs	r3, #0
 8002d9c:	617b      	str	r3, [r7, #20]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	68db      	ldr	r3, [r3, #12]
 8002da4:	617b      	str	r3, [r7, #20]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	617b      	str	r3, [r7, #20]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	e000      	b.n	8002db4 <HAL_SPI_TransmitReceive+0x358>
  }

error :
 8002db2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	2251      	movs	r2, #81	; 0x51
 8002db8:	2101      	movs	r1, #1
 8002dba:	5499      	strb	r1, [r3, r2]
  __HAL_UNLOCK(hspi);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2250      	movs	r2, #80	; 0x50
 8002dc0:	2100      	movs	r1, #0
 8002dc2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002dc4:	232b      	movs	r3, #43	; 0x2b
 8002dc6:	18fb      	adds	r3, r7, r3
 8002dc8:	781b      	ldrb	r3, [r3, #0]
}
 8002dca:	0018      	movs	r0, r3
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	b00c      	add	sp, #48	; 0x30
 8002dd0:	bd80      	pop	{r7, pc}
	...

08002dd4 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b088      	sub	sp, #32
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	689b      	ldr	r3, [r3, #8]
 8002dea:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002dec:	69bb      	ldr	r3, [r7, #24]
 8002dee:	099b      	lsrs	r3, r3, #6
 8002df0:	001a      	movs	r2, r3
 8002df2:	2301      	movs	r3, #1
 8002df4:	4013      	ands	r3, r2
 8002df6:	d10f      	bne.n	8002e18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	4013      	ands	r3, r2
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8002dfe:	d00b      	beq.n	8002e18 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	099b      	lsrs	r3, r3, #6
 8002e04:	001a      	movs	r2, r3
 8002e06:	2301      	movs	r3, #1
 8002e08:	4013      	ands	r3, r2
 8002e0a:	d005      	beq.n	8002e18 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e10:	687a      	ldr	r2, [r7, #4]
 8002e12:	0010      	movs	r0, r2
 8002e14:	4798      	blx	r3
    return;
 8002e16:	e0d5      	b.n	8002fc4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	085b      	lsrs	r3, r3, #1
 8002e1c:	001a      	movs	r2, r3
 8002e1e:	2301      	movs	r3, #1
 8002e20:	4013      	ands	r3, r2
 8002e22:	d00b      	beq.n	8002e3c <HAL_SPI_IRQHandler+0x68>
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	09db      	lsrs	r3, r3, #7
 8002e28:	001a      	movs	r2, r3
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d005      	beq.n	8002e3c <HAL_SPI_IRQHandler+0x68>
  {
    hspi->TxISR(hspi);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e34:	687a      	ldr	r2, [r7, #4]
 8002e36:	0010      	movs	r0, r2
 8002e38:	4798      	blx	r3
    return;
 8002e3a:	e0c3      	b.n	8002fc4 <HAL_SPI_IRQHandler+0x1f0>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	095b      	lsrs	r3, r3, #5
 8002e40:	001a      	movs	r2, r3
 8002e42:	2301      	movs	r3, #1
 8002e44:	4013      	ands	r3, r2
 8002e46:	d10c      	bne.n	8002e62 <HAL_SPI_IRQHandler+0x8e>
 8002e48:	69bb      	ldr	r3, [r7, #24]
 8002e4a:	099b      	lsrs	r3, r3, #6
 8002e4c:	001a      	movs	r2, r3
 8002e4e:	2301      	movs	r3, #1
 8002e50:	4013      	ands	r3, r2
 8002e52:	d106      	bne.n	8002e62 <HAL_SPI_IRQHandler+0x8e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8002e54:	69bb      	ldr	r3, [r7, #24]
 8002e56:	0a1b      	lsrs	r3, r3, #8
 8002e58:	001a      	movs	r2, r3
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	d100      	bne.n	8002e62 <HAL_SPI_IRQHandler+0x8e>
 8002e60:	e0b0      	b.n	8002fc4 <HAL_SPI_IRQHandler+0x1f0>
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	095b      	lsrs	r3, r3, #5
 8002e66:	001a      	movs	r2, r3
 8002e68:	2301      	movs	r3, #1
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	d100      	bne.n	8002e70 <HAL_SPI_IRQHandler+0x9c>
 8002e6e:	e0a9      	b.n	8002fc4 <HAL_SPI_IRQHandler+0x1f0>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	099b      	lsrs	r3, r3, #6
 8002e74:	001a      	movs	r2, r3
 8002e76:	2301      	movs	r3, #1
 8002e78:	4013      	ands	r3, r2
 8002e7a:	d023      	beq.n	8002ec4 <HAL_SPI_IRQHandler+0xf0>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	2251      	movs	r2, #81	; 0x51
 8002e80:	5c9b      	ldrb	r3, [r3, r2]
 8002e82:	b2db      	uxtb	r3, r3
 8002e84:	2b03      	cmp	r3, #3
 8002e86:	d011      	beq.n	8002eac <HAL_SPI_IRQHandler+0xd8>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	431a      	orrs	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	655a      	str	r2, [r3, #84]	; 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002e94:	2300      	movs	r3, #0
 8002e96:	617b      	str	r3, [r7, #20]
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	68db      	ldr	r3, [r3, #12]
 8002e9e:	617b      	str	r3, [r7, #20]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	617b      	str	r3, [r7, #20]
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	e00b      	b.n	8002ec4 <HAL_SPI_IRQHandler+0xf0>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eac:	2300      	movs	r3, #0
 8002eae:	613b      	str	r3, [r7, #16]
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	68db      	ldr	r3, [r3, #12]
 8002eb6:	613b      	str	r3, [r7, #16]
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	689b      	ldr	r3, [r3, #8]
 8002ebe:	613b      	str	r3, [r7, #16]
 8002ec0:	693b      	ldr	r3, [r7, #16]
        return;
 8002ec2:	e07f      	b.n	8002fc4 <HAL_SPI_IRQHandler+0x1f0>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	001a      	movs	r2, r3
 8002eca:	2301      	movs	r3, #1
 8002ecc:	4013      	ands	r3, r2
 8002ece:	d014      	beq.n	8002efa <HAL_SPI_IRQHandler+0x126>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8002edc:	2300      	movs	r3, #0
 8002ede:	60fb      	str	r3, [r7, #12]
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2140      	movs	r1, #64	; 0x40
 8002ef4:	438a      	bics	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
 8002ef8:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8002efa:	69bb      	ldr	r3, [r7, #24]
 8002efc:	0a1b      	lsrs	r3, r3, #8
 8002efe:	001a      	movs	r2, r3
 8002f00:	2301      	movs	r3, #1
 8002f02:	4013      	ands	r3, r2
 8002f04:	d00c      	beq.n	8002f20 <HAL_SPI_IRQHandler+0x14c>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f0a:	2208      	movs	r2, #8
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8002f12:	2300      	movs	r3, #0
 8002f14:	60bb      	str	r3, [r7, #8]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	689b      	ldr	r3, [r3, #8]
 8002f1c:	60bb      	str	r3, [r7, #8]
 8002f1e:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d04c      	beq.n	8002fc2 <HAL_SPI_IRQHandler+0x1ee>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	685a      	ldr	r2, [r3, #4]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	21e0      	movs	r1, #224	; 0xe0
 8002f34:	438a      	bics	r2, r1
 8002f36:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	2251      	movs	r2, #81	; 0x51
 8002f3c:	2101      	movs	r1, #1
 8002f3e:	5499      	strb	r1, [r3, r2]
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	2202      	movs	r2, #2
 8002f44:	4013      	ands	r3, r2
 8002f46:	d103      	bne.n	8002f50 <HAL_SPI_IRQHandler+0x17c>
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	2201      	movs	r2, #1
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	d032      	beq.n	8002fb6 <HAL_SPI_IRQHandler+0x1e2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	2103      	movs	r1, #3
 8002f5c:	438a      	bics	r2, r1
 8002f5e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d010      	beq.n	8002f8a <HAL_SPI_IRQHandler+0x1b6>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f6c:	4a17      	ldr	r2, [pc, #92]	; (8002fcc <HAL_SPI_IRQHandler+0x1f8>)
 8002f6e:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f74:	0018      	movs	r0, r3
 8002f76:	f7fe f9b5 	bl	80012e4 <HAL_DMA_Abort_IT>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d005      	beq.n	8002f8a <HAL_SPI_IRQHandler+0x1b6>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002f82:	2240      	movs	r2, #64	; 0x40
 8002f84:	431a      	orrs	r2, r3
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	655a      	str	r2, [r3, #84]	; 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d016      	beq.n	8002fc0 <HAL_SPI_IRQHandler+0x1ec>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f96:	4a0d      	ldr	r2, [pc, #52]	; (8002fcc <HAL_SPI_IRQHandler+0x1f8>)
 8002f98:	639a      	str	r2, [r3, #56]	; 0x38
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	f7fe f9a0 	bl	80012e4 <HAL_DMA_Abort_IT>
 8002fa4:	1e03      	subs	r3, r0, #0
 8002fa6:	d00b      	beq.n	8002fc0 <HAL_SPI_IRQHandler+0x1ec>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002fac:	2240      	movs	r2, #64	; 0x40
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	655a      	str	r2, [r3, #84]	; 0x54
        if (hspi->hdmatx != NULL)
 8002fb4:	e004      	b.n	8002fc0 <HAL_SPI_IRQHandler+0x1ec>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f000 f809 	bl	8002fd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8002fbe:	e000      	b.n	8002fc2 <HAL_SPI_IRQHandler+0x1ee>
        if (hspi->hdmatx != NULL)
 8002fc0:	46c0      	nop			; (mov r8, r8)
    return;
 8002fc2:	46c0      	nop			; (mov r8, r8)
  }
}
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	b008      	add	sp, #32
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	46c0      	nop			; (mov r8, r8)
 8002fcc:	08002fe1 	.word	0x08002fe1

08002fd0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8002fd8:	46c0      	nop			; (mov r8, r8)
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	b002      	add	sp, #8
 8002fde:	bd80      	pop	{r7, pc}

08002fe0 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	0018      	movs	r0, r3
 8002ffe:	f7ff ffe7 	bl	8002fd0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003002:	46c0      	nop			; (mov r8, r8)
 8003004:	46bd      	mov	sp, r7
 8003006:	b004      	add	sp, #16
 8003008:	bd80      	pop	{r7, pc}
	...

0800300c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b088      	sub	sp, #32
 8003010:	af00      	add	r7, sp, #0
 8003012:	60f8      	str	r0, [r7, #12]
 8003014:	60b9      	str	r1, [r7, #8]
 8003016:	603b      	str	r3, [r7, #0]
 8003018:	1dfb      	adds	r3, r7, #7
 800301a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800301c:	f7fd ffde 	bl	8000fdc <HAL_GetTick>
 8003020:	0002      	movs	r2, r0
 8003022:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	18d3      	adds	r3, r2, r3
 800302a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800302c:	f7fd ffd6 	bl	8000fdc <HAL_GetTick>
 8003030:	0003      	movs	r3, r0
 8003032:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003034:	4b3a      	ldr	r3, [pc, #232]	; (8003120 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	015b      	lsls	r3, r3, #5
 800303a:	0d1b      	lsrs	r3, r3, #20
 800303c:	69fa      	ldr	r2, [r7, #28]
 800303e:	4353      	muls	r3, r2
 8003040:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003042:	e058      	b.n	80030f6 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	3301      	adds	r3, #1
 8003048:	d055      	beq.n	80030f6 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800304a:	f7fd ffc7 	bl	8000fdc <HAL_GetTick>
 800304e:	0002      	movs	r2, r0
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	69fa      	ldr	r2, [r7, #28]
 8003056:	429a      	cmp	r2, r3
 8003058:	d902      	bls.n	8003060 <SPI_WaitFlagStateUntilTimeout+0x54>
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d142      	bne.n	80030e6 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	685a      	ldr	r2, [r3, #4]
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	21e0      	movs	r1, #224	; 0xe0
 800306c:	438a      	bics	r2, r1
 800306e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	685a      	ldr	r2, [r3, #4]
 8003074:	2382      	movs	r3, #130	; 0x82
 8003076:	005b      	lsls	r3, r3, #1
 8003078:	429a      	cmp	r2, r3
 800307a:	d113      	bne.n	80030a4 <SPI_WaitFlagStateUntilTimeout+0x98>
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689a      	ldr	r2, [r3, #8]
 8003080:	2380      	movs	r3, #128	; 0x80
 8003082:	021b      	lsls	r3, r3, #8
 8003084:	429a      	cmp	r2, r3
 8003086:	d005      	beq.n	8003094 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	689a      	ldr	r2, [r3, #8]
 800308c:	2380      	movs	r3, #128	; 0x80
 800308e:	00db      	lsls	r3, r3, #3
 8003090:	429a      	cmp	r2, r3
 8003092:	d107      	bne.n	80030a4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2140      	movs	r1, #64	; 0x40
 80030a0:	438a      	bics	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a8:	2380      	movs	r3, #128	; 0x80
 80030aa:	019b      	lsls	r3, r3, #6
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d110      	bne.n	80030d2 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	681a      	ldr	r2, [r3, #0]
 80030b6:	68fb      	ldr	r3, [r7, #12]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	491a      	ldr	r1, [pc, #104]	; (8003124 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80030bc:	400a      	ands	r2, r1
 80030be:	601a      	str	r2, [r3, #0]
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2180      	movs	r1, #128	; 0x80
 80030cc:	0189      	lsls	r1, r1, #6
 80030ce:	430a      	orrs	r2, r1
 80030d0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	2251      	movs	r2, #81	; 0x51
 80030d6:	2101      	movs	r1, #1
 80030d8:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2250      	movs	r2, #80	; 0x50
 80030de:	2100      	movs	r1, #0
 80030e0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e017      	b.n	8003116 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80030e6:	697b      	ldr	r3, [r7, #20]
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d101      	bne.n	80030f0 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80030ec:	2300      	movs	r3, #0
 80030ee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	3b01      	subs	r3, #1
 80030f4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	68ba      	ldr	r2, [r7, #8]
 80030fe:	4013      	ands	r3, r2
 8003100:	68ba      	ldr	r2, [r7, #8]
 8003102:	1ad3      	subs	r3, r2, r3
 8003104:	425a      	negs	r2, r3
 8003106:	4153      	adcs	r3, r2
 8003108:	b2db      	uxtb	r3, r3
 800310a:	001a      	movs	r2, r3
 800310c:	1dfb      	adds	r3, r7, #7
 800310e:	781b      	ldrb	r3, [r3, #0]
 8003110:	429a      	cmp	r2, r3
 8003112:	d197      	bne.n	8003044 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003114:	2300      	movs	r3, #0
}
 8003116:	0018      	movs	r0, r3
 8003118:	46bd      	mov	sp, r7
 800311a:	b008      	add	sp, #32
 800311c:	bd80      	pop	{r7, pc}
 800311e:	46c0      	nop			; (mov r8, r8)
 8003120:	20000044 	.word	0x20000044
 8003124:	ffffdfff 	.word	0xffffdfff

08003128 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af02      	add	r7, sp, #8
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	685a      	ldr	r2, [r3, #4]
 8003138:	2382      	movs	r3, #130	; 0x82
 800313a:	005b      	lsls	r3, r3, #1
 800313c:	429a      	cmp	r2, r3
 800313e:	d113      	bne.n	8003168 <SPI_EndRxTransaction+0x40>
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	689a      	ldr	r2, [r3, #8]
 8003144:	2380      	movs	r3, #128	; 0x80
 8003146:	021b      	lsls	r3, r3, #8
 8003148:	429a      	cmp	r2, r3
 800314a:	d005      	beq.n	8003158 <SPI_EndRxTransaction+0x30>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	689a      	ldr	r2, [r3, #8]
 8003150:	2380      	movs	r3, #128	; 0x80
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	429a      	cmp	r2, r3
 8003156:	d107      	bne.n	8003168 <SPI_EndRxTransaction+0x40>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	2140      	movs	r1, #64	; 0x40
 8003164:	438a      	bics	r2, r1
 8003166:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	685a      	ldr	r2, [r3, #4]
 800316c:	2382      	movs	r3, #130	; 0x82
 800316e:	005b      	lsls	r3, r3, #1
 8003170:	429a      	cmp	r2, r3
 8003172:	d12b      	bne.n	80031cc <SPI_EndRxTransaction+0xa4>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	689a      	ldr	r2, [r3, #8]
 8003178:	2380      	movs	r3, #128	; 0x80
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	429a      	cmp	r2, r3
 800317e:	d012      	beq.n	80031a6 <SPI_EndRxTransaction+0x7e>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003180:	68ba      	ldr	r2, [r7, #8]
 8003182:	68f8      	ldr	r0, [r7, #12]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	9300      	str	r3, [sp, #0]
 8003188:	0013      	movs	r3, r2
 800318a:	2200      	movs	r2, #0
 800318c:	2180      	movs	r1, #128	; 0x80
 800318e:	f7ff ff3d 	bl	800300c <SPI_WaitFlagStateUntilTimeout>
 8003192:	1e03      	subs	r3, r0, #0
 8003194:	d02d      	beq.n	80031f2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800319a:	2220      	movs	r2, #32
 800319c:	431a      	orrs	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031a2:	2303      	movs	r3, #3
 80031a4:	e026      	b.n	80031f4 <SPI_EndRxTransaction+0xcc>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	68f8      	ldr	r0, [r7, #12]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	9300      	str	r3, [sp, #0]
 80031ae:	0013      	movs	r3, r2
 80031b0:	2200      	movs	r2, #0
 80031b2:	2101      	movs	r1, #1
 80031b4:	f7ff ff2a 	bl	800300c <SPI_WaitFlagStateUntilTimeout>
 80031b8:	1e03      	subs	r3, r0, #0
 80031ba:	d01a      	beq.n	80031f2 <SPI_EndRxTransaction+0xca>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031c0:	2220      	movs	r2, #32
 80031c2:	431a      	orrs	r2, r3
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 80031c8:	2303      	movs	r3, #3
 80031ca:	e013      	b.n	80031f4 <SPI_EndRxTransaction+0xcc>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 80031cc:	68ba      	ldr	r2, [r7, #8]
 80031ce:	68f8      	ldr	r0, [r7, #12]
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	9300      	str	r3, [sp, #0]
 80031d4:	0013      	movs	r3, r2
 80031d6:	2200      	movs	r2, #0
 80031d8:	2101      	movs	r1, #1
 80031da:	f7ff ff17 	bl	800300c <SPI_WaitFlagStateUntilTimeout>
 80031de:	1e03      	subs	r3, r0, #0
 80031e0:	d007      	beq.n	80031f2 <SPI_EndRxTransaction+0xca>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80031e2:	68fb      	ldr	r3, [r7, #12]
 80031e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031e6:	2220      	movs	r2, #32
 80031e8:	431a      	orrs	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e000      	b.n	80031f4 <SPI_EndRxTransaction+0xcc>
    }
  }
  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	0018      	movs	r0, r3
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b004      	add	sp, #16
 80031fa:	bd80      	pop	{r7, pc}

080031fc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b088      	sub	sp, #32
 8003200:	af02      	add	r7, sp, #8
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003208:	4b1d      	ldr	r3, [pc, #116]	; (8003280 <SPI_EndRxTxTransaction+0x84>)
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	491d      	ldr	r1, [pc, #116]	; (8003284 <SPI_EndRxTxTransaction+0x88>)
 800320e:	0018      	movs	r0, r3
 8003210:	f7fc ff7a 	bl	8000108 <__udivsi3>
 8003214:	0003      	movs	r3, r0
 8003216:	001a      	movs	r2, r3
 8003218:	0013      	movs	r3, r2
 800321a:	015b      	lsls	r3, r3, #5
 800321c:	1a9b      	subs	r3, r3, r2
 800321e:	009b      	lsls	r3, r3, #2
 8003220:	189b      	adds	r3, r3, r2
 8003222:	00db      	lsls	r3, r3, #3
 8003224:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	2382      	movs	r3, #130	; 0x82
 800322c:	005b      	lsls	r3, r3, #1
 800322e:	429a      	cmp	r2, r3
 8003230:	d112      	bne.n	8003258 <SPI_EndRxTxTransaction+0x5c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003232:	68ba      	ldr	r2, [r7, #8]
 8003234:	68f8      	ldr	r0, [r7, #12]
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	9300      	str	r3, [sp, #0]
 800323a:	0013      	movs	r3, r2
 800323c:	2200      	movs	r2, #0
 800323e:	2180      	movs	r1, #128	; 0x80
 8003240:	f7ff fee4 	bl	800300c <SPI_WaitFlagStateUntilTimeout>
 8003244:	1e03      	subs	r3, r0, #0
 8003246:	d016      	beq.n	8003276 <SPI_EndRxTxTransaction+0x7a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800324c:	2220      	movs	r2, #32
 800324e:	431a      	orrs	r2, r3
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e00f      	b.n	8003278 <SPI_EndRxTxTransaction+0x7c>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	2b00      	cmp	r3, #0
 800325c:	d00a      	beq.n	8003274 <SPI_EndRxTxTransaction+0x78>
      {
        break;
      }
      count--;
 800325e:	697b      	ldr	r3, [r7, #20]
 8003260:	3b01      	subs	r3, #1
 8003262:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	2280      	movs	r2, #128	; 0x80
 800326c:	4013      	ands	r3, r2
 800326e:	2b80      	cmp	r3, #128	; 0x80
 8003270:	d0f2      	beq.n	8003258 <SPI_EndRxTxTransaction+0x5c>
 8003272:	e000      	b.n	8003276 <SPI_EndRxTxTransaction+0x7a>
        break;
 8003274:	46c0      	nop			; (mov r8, r8)
  }

  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	0018      	movs	r0, r3
 800327a:	46bd      	mov	sp, r7
 800327c:	b006      	add	sp, #24
 800327e:	bd80      	pop	{r7, pc}
 8003280:	20000044 	.word	0x20000044
 8003284:	016e3600 	.word	0x016e3600

08003288 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e032      	b.n	8003300 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2239      	movs	r2, #57	; 0x39
 800329e:	5c9b      	ldrb	r3, [r3, r2]
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d107      	bne.n	80032b6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2238      	movs	r2, #56	; 0x38
 80032aa:	2100      	movs	r1, #0
 80032ac:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	0018      	movs	r0, r3
 80032b2:	f7fd fd9b 	bl	8000dec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2239      	movs	r2, #57	; 0x39
 80032ba:	2102      	movs	r1, #2
 80032bc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	3304      	adds	r3, #4
 80032c6:	0019      	movs	r1, r3
 80032c8:	0010      	movs	r0, r2
 80032ca:	f000 f92d 	bl	8003528 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	223e      	movs	r2, #62	; 0x3e
 80032d2:	2101      	movs	r1, #1
 80032d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	223a      	movs	r2, #58	; 0x3a
 80032da:	2101      	movs	r1, #1
 80032dc:	5499      	strb	r1, [r3, r2]
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	223b      	movs	r2, #59	; 0x3b
 80032e2:	2101      	movs	r1, #1
 80032e4:	5499      	strb	r1, [r3, r2]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	223c      	movs	r2, #60	; 0x3c
 80032ea:	2101      	movs	r1, #1
 80032ec:	5499      	strb	r1, [r3, r2]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	223d      	movs	r2, #61	; 0x3d
 80032f2:	2101      	movs	r1, #1
 80032f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2239      	movs	r2, #57	; 0x39
 80032fa:	2101      	movs	r1, #1
 80032fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032fe:	2300      	movs	r3, #0
}
 8003300:	0018      	movs	r0, r3
 8003302:	46bd      	mov	sp, r7
 8003304:	b002      	add	sp, #8
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b082      	sub	sp, #8
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	2202      	movs	r2, #2
 8003318:	4013      	ands	r3, r2
 800331a:	2b02      	cmp	r3, #2
 800331c:	d124      	bne.n	8003368 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	68db      	ldr	r3, [r3, #12]
 8003324:	2202      	movs	r2, #2
 8003326:	4013      	ands	r3, r2
 8003328:	2b02      	cmp	r3, #2
 800332a:	d11d      	bne.n	8003368 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2203      	movs	r2, #3
 8003332:	4252      	negs	r2, r2
 8003334:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2201      	movs	r2, #1
 800333a:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	699b      	ldr	r3, [r3, #24]
 8003342:	2203      	movs	r2, #3
 8003344:	4013      	ands	r3, r2
 8003346:	d004      	beq.n	8003352 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	0018      	movs	r0, r3
 800334c:	f000 f8d4 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 8003350:	e007      	b.n	8003362 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	0018      	movs	r0, r3
 8003356:	f000 f8c7 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	0018      	movs	r0, r3
 800335e:	f000 f8d3 	bl	8003508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	2200      	movs	r2, #0
 8003366:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	691b      	ldr	r3, [r3, #16]
 800336e:	2204      	movs	r2, #4
 8003370:	4013      	ands	r3, r2
 8003372:	2b04      	cmp	r3, #4
 8003374:	d125      	bne.n	80033c2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68db      	ldr	r3, [r3, #12]
 800337c:	2204      	movs	r2, #4
 800337e:	4013      	ands	r3, r2
 8003380:	2b04      	cmp	r3, #4
 8003382:	d11e      	bne.n	80033c2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	2205      	movs	r2, #5
 800338a:	4252      	negs	r2, r2
 800338c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2202      	movs	r2, #2
 8003392:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	699a      	ldr	r2, [r3, #24]
 800339a:	23c0      	movs	r3, #192	; 0xc0
 800339c:	009b      	lsls	r3, r3, #2
 800339e:	4013      	ands	r3, r2
 80033a0:	d004      	beq.n	80033ac <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	0018      	movs	r0, r3
 80033a6:	f000 f8a7 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 80033aa:	e007      	b.n	80033bc <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	0018      	movs	r0, r3
 80033b0:	f000 f89a 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	0018      	movs	r0, r3
 80033b8:	f000 f8a6 	bl	8003508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2200      	movs	r2, #0
 80033c0:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	691b      	ldr	r3, [r3, #16]
 80033c8:	2208      	movs	r2, #8
 80033ca:	4013      	ands	r3, r2
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d124      	bne.n	800341a <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	68db      	ldr	r3, [r3, #12]
 80033d6:	2208      	movs	r2, #8
 80033d8:	4013      	ands	r3, r2
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d11d      	bne.n	800341a <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	2209      	movs	r2, #9
 80033e4:	4252      	negs	r2, r2
 80033e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2204      	movs	r2, #4
 80033ec:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	69db      	ldr	r3, [r3, #28]
 80033f4:	2203      	movs	r2, #3
 80033f6:	4013      	ands	r3, r2
 80033f8:	d004      	beq.n	8003404 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	0018      	movs	r0, r3
 80033fe:	f000 f87b 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 8003402:	e007      	b.n	8003414 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	0018      	movs	r0, r3
 8003408:	f000 f86e 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	0018      	movs	r0, r3
 8003410:	f000 f87a 	bl	8003508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2200      	movs	r2, #0
 8003418:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	691b      	ldr	r3, [r3, #16]
 8003420:	2210      	movs	r2, #16
 8003422:	4013      	ands	r3, r2
 8003424:	2b10      	cmp	r3, #16
 8003426:	d125      	bne.n	8003474 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	68db      	ldr	r3, [r3, #12]
 800342e:	2210      	movs	r2, #16
 8003430:	4013      	ands	r3, r2
 8003432:	2b10      	cmp	r3, #16
 8003434:	d11e      	bne.n	8003474 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2211      	movs	r2, #17
 800343c:	4252      	negs	r2, r2
 800343e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2208      	movs	r2, #8
 8003444:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	23c0      	movs	r3, #192	; 0xc0
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	4013      	ands	r3, r2
 8003452:	d004      	beq.n	800345e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	0018      	movs	r0, r3
 8003458:	f000 f84e 	bl	80034f8 <HAL_TIM_IC_CaptureCallback>
 800345c:	e007      	b.n	800346e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	0018      	movs	r0, r3
 8003462:	f000 f841 	bl	80034e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	0018      	movs	r0, r3
 800346a:	f000 f84d 	bl	8003508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2201      	movs	r2, #1
 800347c:	4013      	ands	r3, r2
 800347e:	2b01      	cmp	r3, #1
 8003480:	d10f      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	68db      	ldr	r3, [r3, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	4013      	ands	r3, r2
 800348c:	2b01      	cmp	r3, #1
 800348e:	d108      	bne.n	80034a2 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	2202      	movs	r2, #2
 8003496:	4252      	negs	r2, r2
 8003498:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	0018      	movs	r0, r3
 800349e:	f000 f81b 	bl	80034d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2240      	movs	r2, #64	; 0x40
 80034aa:	4013      	ands	r3, r2
 80034ac:	2b40      	cmp	r3, #64	; 0x40
 80034ae:	d10f      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	68db      	ldr	r3, [r3, #12]
 80034b6:	2240      	movs	r2, #64	; 0x40
 80034b8:	4013      	ands	r3, r2
 80034ba:	2b40      	cmp	r3, #64	; 0x40
 80034bc:	d108      	bne.n	80034d0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	2241      	movs	r2, #65	; 0x41
 80034c4:	4252      	negs	r2, r2
 80034c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	0018      	movs	r0, r3
 80034cc:	f000 f824 	bl	8003518 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80034d0:	46c0      	nop			; (mov r8, r8)
 80034d2:	46bd      	mov	sp, r7
 80034d4:	b002      	add	sp, #8
 80034d6:	bd80      	pop	{r7, pc}

080034d8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80034e0:	46c0      	nop			; (mov r8, r8)
 80034e2:	46bd      	mov	sp, r7
 80034e4:	b002      	add	sp, #8
 80034e6:	bd80      	pop	{r7, pc}

080034e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034f0:	46c0      	nop			; (mov r8, r8)
 80034f2:	46bd      	mov	sp, r7
 80034f4:	b002      	add	sp, #8
 80034f6:	bd80      	pop	{r7, pc}

080034f8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003500:	46c0      	nop			; (mov r8, r8)
 8003502:	46bd      	mov	sp, r7
 8003504:	b002      	add	sp, #8
 8003506:	bd80      	pop	{r7, pc}

08003508 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003508:	b580      	push	{r7, lr}
 800350a:	b082      	sub	sp, #8
 800350c:	af00      	add	r7, sp, #0
 800350e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003510:	46c0      	nop			; (mov r8, r8)
 8003512:	46bd      	mov	sp, r7
 8003514:	b002      	add	sp, #8
 8003516:	bd80      	pop	{r7, pc}

08003518 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	b082      	sub	sp, #8
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003520:	46c0      	nop			; (mov r8, r8)
 8003522:	46bd      	mov	sp, r7
 8003524:	b002      	add	sp, #8
 8003526:	bd80      	pop	{r7, pc}

08003528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003528:	b580      	push	{r7, lr}
 800352a:	b084      	sub	sp, #16
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003538:	687a      	ldr	r2, [r7, #4]
 800353a:	2380      	movs	r3, #128	; 0x80
 800353c:	05db      	lsls	r3, r3, #23
 800353e:	429a      	cmp	r2, r3
 8003540:	d007      	beq.n	8003552 <TIM_Base_SetConfig+0x2a>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a1f      	ldr	r2, [pc, #124]	; (80035c4 <TIM_Base_SetConfig+0x9c>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d003      	beq.n	8003552 <TIM_Base_SetConfig+0x2a>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a1e      	ldr	r2, [pc, #120]	; (80035c8 <TIM_Base_SetConfig+0xa0>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d108      	bne.n	8003564 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2270      	movs	r2, #112	; 0x70
 8003556:	4393      	bics	r3, r2
 8003558:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	68fa      	ldr	r2, [r7, #12]
 8003560:	4313      	orrs	r3, r2
 8003562:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003564:	687a      	ldr	r2, [r7, #4]
 8003566:	2380      	movs	r3, #128	; 0x80
 8003568:	05db      	lsls	r3, r3, #23
 800356a:	429a      	cmp	r2, r3
 800356c:	d007      	beq.n	800357e <TIM_Base_SetConfig+0x56>
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <TIM_Base_SetConfig+0x9c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d003      	beq.n	800357e <TIM_Base_SetConfig+0x56>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	4a13      	ldr	r2, [pc, #76]	; (80035c8 <TIM_Base_SetConfig+0xa0>)
 800357a:	4293      	cmp	r3, r2
 800357c:	d108      	bne.n	8003590 <TIM_Base_SetConfig+0x68>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	4a12      	ldr	r2, [pc, #72]	; (80035cc <TIM_Base_SetConfig+0xa4>)
 8003582:	4013      	ands	r3, r2
 8003584:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	68fa      	ldr	r2, [r7, #12]
 800358c:	4313      	orrs	r3, r2
 800358e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	2280      	movs	r2, #128	; 0x80
 8003594:	4393      	bics	r3, r2
 8003596:	001a      	movs	r2, r3
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	691b      	ldr	r3, [r3, #16]
 800359c:	4313      	orrs	r3, r2
 800359e:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	68fa      	ldr	r2, [r7, #12]
 80035a4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	615a      	str	r2, [r3, #20]
}
 80035bc:	46c0      	nop			; (mov r8, r8)
 80035be:	46bd      	mov	sp, r7
 80035c0:	b004      	add	sp, #16
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40010800 	.word	0x40010800
 80035c8:	40011400 	.word	0x40011400
 80035cc:	fffffcff 	.word	0xfffffcff

080035d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
 80035d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2238      	movs	r2, #56	; 0x38
 80035de:	5c9b      	ldrb	r3, [r3, r2]
 80035e0:	2b01      	cmp	r3, #1
 80035e2:	d101      	bne.n	80035e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80035e4:	2302      	movs	r3, #2
 80035e6:	e042      	b.n	800366e <HAL_TIMEx_MasterConfigSynchronization+0x9e>
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2238      	movs	r2, #56	; 0x38
 80035ec:	2101      	movs	r1, #1
 80035ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2239      	movs	r2, #57	; 0x39
 80035f4:	2102      	movs	r1, #2
 80035f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2270      	movs	r2, #112	; 0x70
 800360c:	4393      	bics	r3, r2
 800360e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	68fa      	ldr	r2, [r7, #12]
 8003616:	4313      	orrs	r3, r2
 8003618:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68fa      	ldr	r2, [r7, #12]
 8003620:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681a      	ldr	r2, [r3, #0]
 8003626:	2380      	movs	r3, #128	; 0x80
 8003628:	05db      	lsls	r3, r3, #23
 800362a:	429a      	cmp	r2, r3
 800362c:	d009      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4a11      	ldr	r2, [pc, #68]	; (8003678 <HAL_TIMEx_MasterConfigSynchronization+0xa8>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d004      	beq.n	8003642 <HAL_TIMEx_MasterConfigSynchronization+0x72>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a0f      	ldr	r2, [pc, #60]	; (800367c <HAL_TIMEx_MasterConfigSynchronization+0xac>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d10c      	bne.n	800365c <HAL_TIMEx_MasterConfigSynchronization+0x8c>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	2280      	movs	r2, #128	; 0x80
 8003646:	4393      	bics	r3, r2
 8003648:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	68ba      	ldr	r2, [r7, #8]
 8003650:	4313      	orrs	r3, r2
 8003652:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	68ba      	ldr	r2, [r7, #8]
 800365a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2239      	movs	r2, #57	; 0x39
 8003660:	2101      	movs	r1, #1
 8003662:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	2238      	movs	r2, #56	; 0x38
 8003668:	2100      	movs	r1, #0
 800366a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800366c:	2300      	movs	r3, #0
}
 800366e:	0018      	movs	r0, r3
 8003670:	46bd      	mov	sp, r7
 8003672:	b004      	add	sp, #16
 8003674:	bd80      	pop	{r7, pc}
 8003676:	46c0      	nop			; (mov r8, r8)
 8003678:	40010800 	.word	0x40010800
 800367c:	40011400 	.word	0x40011400

08003680 <__libc_init_array>:
 8003680:	b570      	push	{r4, r5, r6, lr}
 8003682:	2600      	movs	r6, #0
 8003684:	4d0c      	ldr	r5, [pc, #48]	; (80036b8 <__libc_init_array+0x38>)
 8003686:	4c0d      	ldr	r4, [pc, #52]	; (80036bc <__libc_init_array+0x3c>)
 8003688:	1b64      	subs	r4, r4, r5
 800368a:	10a4      	asrs	r4, r4, #2
 800368c:	42a6      	cmp	r6, r4
 800368e:	d109      	bne.n	80036a4 <__libc_init_array+0x24>
 8003690:	2600      	movs	r6, #0
 8003692:	f000 f821 	bl	80036d8 <_init>
 8003696:	4d0a      	ldr	r5, [pc, #40]	; (80036c0 <__libc_init_array+0x40>)
 8003698:	4c0a      	ldr	r4, [pc, #40]	; (80036c4 <__libc_init_array+0x44>)
 800369a:	1b64      	subs	r4, r4, r5
 800369c:	10a4      	asrs	r4, r4, #2
 800369e:	42a6      	cmp	r6, r4
 80036a0:	d105      	bne.n	80036ae <__libc_init_array+0x2e>
 80036a2:	bd70      	pop	{r4, r5, r6, pc}
 80036a4:	00b3      	lsls	r3, r6, #2
 80036a6:	58eb      	ldr	r3, [r5, r3]
 80036a8:	4798      	blx	r3
 80036aa:	3601      	adds	r6, #1
 80036ac:	e7ee      	b.n	800368c <__libc_init_array+0xc>
 80036ae:	00b3      	lsls	r3, r6, #2
 80036b0:	58eb      	ldr	r3, [r5, r3]
 80036b2:	4798      	blx	r3
 80036b4:	3601      	adds	r6, #1
 80036b6:	e7f2      	b.n	800369e <__libc_init_array+0x1e>
 80036b8:	08003714 	.word	0x08003714
 80036bc:	08003714 	.word	0x08003714
 80036c0:	08003714 	.word	0x08003714
 80036c4:	08003718 	.word	0x08003718

080036c8 <memset>:
 80036c8:	0003      	movs	r3, r0
 80036ca:	1882      	adds	r2, r0, r2
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d100      	bne.n	80036d2 <memset+0xa>
 80036d0:	4770      	bx	lr
 80036d2:	7019      	strb	r1, [r3, #0]
 80036d4:	3301      	adds	r3, #1
 80036d6:	e7f9      	b.n	80036cc <memset+0x4>

080036d8 <_init>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr

080036e4 <_fini>:
 80036e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036e6:	46c0      	nop			; (mov r8, r8)
 80036e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ea:	bc08      	pop	{r3}
 80036ec:	469e      	mov	lr, r3
 80036ee:	4770      	bx	lr
